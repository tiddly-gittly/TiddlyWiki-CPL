{"title":"$:/plugins/wikilabs/pragma-comment","name":"Pragma Comment","description":"Add possibility to add 'pragma comments'","author":"Mario Pietsch","core-version":">=5.1.15","version":"0.1.2","list":"readme license history","stability":"STABILITY_0_DEPRECATED","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/wikilabs/pragma-comment/history\":{\"title\":\"$:/plugins/wikilabs/pragma-comment/history\",\"text\":\"V 0.1.2 - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\nV 0.1.1-DEPRECATED - 2022.03.27\\n\\n* removed from landing page\\n* add DEPRECATED to version number\\n\\nV 0.1.1 - 2020.10.06\\n\\n* Deprecated since there is a similar function in the core\\n\\nV 0.1.0 - 2020.12.25\\n\\n* Initial release\\n\"},\"$:/plugins/wikilabs/pragma-comment/license\":{\"title\":\"$:/plugins/wikilabs/pragma-comment/license\",\"text\":\"[[Pragma Comments Plugin|https://wikilabs.github.io/#pragma-comments]] (c) Mario Pietsch - 2020-2024\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"},\"$:/plugins/wikilabs/pragma-comment/pragma-comment.js\":{\"title\":\"$:/plugins/wikilabs/pragma-comment/pragma-comment.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/pragma-comment/pragma-comment.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for pragma comment specifications\\n\\n```\\n\\\\\\\\ this is comment in pragma \\\"space\\\"\\n\\\\\\\\ fast comment, since it doesn't produce a parse-tree element\\n\\n\\\\\\\\define xx()\\n\\\\\\\\ slow comment because it WILL produce parse-tree elements\\n\\\\\\\\end\\n```\\n\\n\\\\*/\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw:false, exports:false*/\\n\\\"use strict\\\";\\n\\nexports.name = \\\"pragmacomment\\\";\\nexports.types = {\\n\\tpragma: true\\n};\\n\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function (parser) {\\n\\tvar self = this;\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\\\\\\\\\/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function () {\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse line terminated by a line break\\n\\tvar reMatch = /([^\\\\n]*\\\\S)|(\\\\r?\\\\n)/mg;\\n\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\twhile (match && match.index === this.parser.pos) {\\n\\t\\tthis.parser.pos = reMatch.lastIndex;\\n\\t\\t// Exit if we've got the line break\\n\\t\\tif (match[2]) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn [];\\n};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/plugins/wikilabs/pragma-comment/readme\":{\"title\":\"$:/plugins/wikilabs/pragma-comment/readme\",\"text\":\"! Deprecated\\n\\nA similar function is part of the TW core since V5.2.0 See: https://tiddlywiki.com/#HTML%20in%20WikiText : Pragma Comments\\n\\n! Pragma Comment\\n\\nThe following lines will not create a parse-tree element and it will not interrupt the \\\"pragma parser\\\". So comments can be placed outside of macro definitions, which is much faster during macro execution.\\n\\n```\\n\\\\\\\\ comment comes here till the end of the line\\n\\\\\\\\ comments like this are fast since they are ignored and the result is cached!\\n\\n\\\\define test()\\n\\\\\\\\ This comment is as slow as the next line\\n<!-- HTML comment -->\\n\\\\end\\n\\n\\\\\\\\ The whole definition is deactivated. .... Works well for a few lines of code!\\n\\\\\\\\define test()\\n\\\\\\\\end\\n\\n\\\\\\\\ if you have big junks of code, it's easier to rename the macro eg: testXXXX() as shown below!\\n\\\\define testXXXX()\\nx\\nx\\nx\\n\\\\end\\n```\\n\\n\\n\"}}}"}