{"title":"$:/plugins/commons/file-uploads-fission","description":"Fission uploader for uploading binary files to external storage","name":"File Uploads: Fission","author":"Saq Imtiaz","core-version":">=5.1.23","list":"readme settings","parent-plugin":"$:/plugins/commons/file-uploads","version":"0.1.4","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/config/file-uploads/fission/canonical-uri-type\":{\"title\":\"$:/config/file-uploads/fission/canonical-uri-type\",\"text\":\"public\"},\"$:/config/file-uploads/fission/ipfs-gateway\":{\"title\":\"$:/config/file-uploads/fission/ipfs-gateway\",\"text\":\"ipfs.runfission.com\"},\"$:/config/file-uploads/fission/uploadpath\":{\"title\":\"$:/config/file-uploads/fission/uploadpath\",\"text\":\"files\\n\"},\"$:/plugins/commons/file-uploads-fission/uploader.js\":{\"title\":\"$:/plugins/commons/file-uploads-fission/uploader.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/commons/file-uploads-fission/uploader.js\\ntype: application/javascript\\nmodule-type: uploader\\n\\nHandles uploading to Fission Webnative filing system\\n\\n\\\\*/\\n(function(){\\n\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"fission\\\";\\n\\nvar fissionUserName;\\n\\nexports.create = function(params) {\\n\\t//webnativeDetails does not provide access to webnative.path.file() and authenticatedUsername()\\n\\tvar webnativeDetails = window.webnativeDetails || window.parent && window.parent.webnativeDetails,\\n\\t\\twebnative = window.webnative || window.parent && window.parent.webnative;\\n\\tif(webnative && webnativeDetails && webnativeDetails.fs) {\\n\\t\\tif(!fissionUserName) {\\n\\t\\t\\twebnative.authenticatedUsername().then(result => {fissionUserName = result});\\n\\t\\t}\\n\\t\\treturn new FissionUploader(params,webnative,webnativeDetails.fs);\\n\\t}\\n\\tparams.logger.alert(\\\"Fission uploader could not be initialized. \\\\n Webnative is not available, are you using ~TiddlyWiki on Fission?\\\");\\n\\treturn null;\\n};\\n\\nfunction FissionUploader(params,webnative,fs) {\\n\\tvar self = this;\\n\\tthis.webnative = webnative;\\n\\tthis.params = params || {};\\n\\tthis.logger = new $tw.utils.Logger(\\\"fission-uploader\\\");\\n\\tthis.fs = fs;\\n\\tthis.outputBasePath = [\\\"public\\\"];\\n\\tvar uploadFolder = $tw.wiki.getTiddlerText(\\\"$:/config/file-uploads/fission/uploadpath\\\",\\\"files\\\").trim().replace(/^\\\\/|\\\\/$/gm,\\\"\\\");\\n\\tvar uploadPath = uploadFolder.split(\\\"/\\\");\\n\\t$tw.utils.each(uploadPath,function(folder){\\n\\t\\tself.outputBasePath.push(folder);\\n\\t})\\n\\tthis.logger.log(\\\"FissionUploader\\\",params);\\n};\\n\\nFissionUploader.prototype.initialize = function(callback) {\\n\\tthis.logger.log(\\\"uploader initialize\\\");\\n\\tcallback();\\n};\\n\\n// Converts base64 data into a form accepted by the backend for saving\\nFissionUploader.prototype._prepareUploadData = function (uploadItem) {\\n\\tif(uploadItem.isBase64) {\\n\\t\\treturn uploadItem.getUint8Array();\\n\\t} else {\\n\\t\\treturn uploadItem.text;\\n\\t}\\n};\\n\\n// Returns the canonical_uri for a file that has been uploaded\\nasync function getCanonicalURI(uploadItem,uploader) {\\n\\tconst uriType = $tw.wiki.getTiddlerText(\\\"$:/config/file-uploads/fission/canonical-uri-type\\\",\\\"public\\\").trim();\\n\\tvar filePath = uploader.outputBasePath.slice(1);\\n\\tfilePath.push(uploadItem.filename);\\n\\tif(uriType === \\\"public\\\") {\\n\\t\\treturn `https://${fissionUserName}.files.fission.name/p/${filePath.join(\\\"/\\\")}`;\\t\\t\\n\\t} else {\\n\\t\\tconst ipfsGateway = $tw.wiki.getTiddlerText(\\\"$:/config/file-uploads/fission/ipfs-gateway\\\",\\\"ipfs.runfission.com\\\").trim();\\n\\t\\tconst rootCid = await uploader.fs.root.put();\\n\\t\\tconst ipfs = await uploader.webnative.ipfs.get();\\n\\t\\tconst { cid } = await ipfs.files.stat(`/ipfs/${rootCid}/p/${filePath.join(\\\"/\\\")}`);\\n\\t\\treturn `https://${ipfsGateway}/ipfs/${cid.toBaseEncodedString()}`;\\n\\t}\\n}\\n\\n// Returns the path object representing the path to which the file will be saved\\nFissionUploader.prototype._getUploadPath = function(uploadItem) {\\n\\tvar pathParams = this.outputBasePath.slice();\\n\\tpathParams.splice(pathParams.length,0,uploadItem.filename);\\n\\treturn this.webnative.path.file.apply(null,pathParams);\\n};\\n\\n/*\\nArguments:\\nuploadItem: object of type UploadItem representing tiddler to be uploaded\\ncallback accepts two arguments:\\n\\terr: error object if there was an error\\n\\tuploadItemInfo: object corresponding to the tiddler being uploaded with the following properties set:\\n\\t- title\\n\\t- canonical_uri (if available)\\n\\t- fields (optional)\\n\\t- uploadComplete (boolean)\\n\\t- getUint8Array()\\n\\t- getBlob()\\n*/\\nFissionUploader.prototype.uploadFile = function(uploadItem,callback) {  \\n\\tvar self = this,\\n\\t\\tpath = this._getUploadPath(uploadItem),\\n\\t\\tuploadInfo = { title: uploadItem.title };\\n\\tself.fs.add(path,self._prepareUploadData(uploadItem)).then(function() {\\n\\t\\treturn getCanonicalURI(uploadItem,self);\\n\\t}).then(function(canonical_uri) {\\n\\t\\tself.logger.log(`Saved to ${path.file.join(\\\"/\\\")} with canonical_uri ${canonical_uri}`);\\n\\t\\t // Set the canonical_uri\\n\\t\\tuploadInfo.canonical_uri = canonical_uri;\\n\\t\\t// Set updateProgress to true if the progress bar should be updated\\n\\t\\t// For some uploaders where the data is just being added to the payload with no uploading taking place we may not want to update the progress bar\\n\\t\\tuploadInfo.updateProgress = true;\\n\\t\\t// Set uploadComplete to true if the uploaded file has been persisted and is available at the canonical_uri\\n\\t\\t// This flag triggers the creation of a canonical_uri tiddler corresponding to the uploaded file\\n\\t\\t// Here we set uploadComplete to false since with Fission the file uploaded will not be persisted until we call publish()\\n\\t\\tuploadInfo.uploadComplete = false;\\n\\t\\tcallback(null,uploadInfo);\\n\\t}).catch(function(err) {\\n\\t\\tself.logger.alert(`Error saving file ${path.file.join(\\\"/\\\")} to fission: ${err}`);\\n\\t\\tcallback(err,uploadInfo);\\n\\t});\\n};\\n\\n/*\\nArguments:\\ncallback accepts two arguments:\\n\\terr: error object if there was an error\\n\\tuploadInfoArray (optional): array of uploadInfo objects corresponding to the tiddlers that have been uploaded\\n\\t\\tthis is needed and should set the canonical_uri for each uploadItem if:\\n\\t\\t- (a) uploadInfo.uploadComplete was not set to true in uploadFile AND \\n\\t\\t- (b) uploadInfo.canonical_uri was not set in uploadFile\\n*/\\nFissionUploader.prototype.deinitialize = function(callback) {\\n\\tvar self = this;\\n\\tthis.fs.publish().then(function() {\\n\\t\\tself.logger.log(\\\"uploader deinitialize\\\");\\n\\t\\tcallback();\\n\\t}).catch(function(err) {\\n\\t\\tself.logger.alert(`Error uploading to fission: ${err} in uploader deinitialize`);\\n\\t\\tcallback(err);\\n\\t});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"uploader\"},\"$:/plugins/commons/file-uploads-fission/readme\":{\"title\":\"$:/plugins/commons/file-uploads-fission/readme\",\"text\":\"Fission uploader module for the File Uploads plugin. Saves uploads to Fission's Webnative file system which is based on IPFS.\\n\\nMeant for use on [[TiddlyWiki on Fission|https://tiddlywiki.fission.app/]]\"},\"$:/plugins/commons/file-uploads-fission/settings\":{\"title\":\"$:/plugins/commons/file-uploads-fission/settings\",\"text\":\"[[Type of canonical URI|$:/config/file-uploads/fission/canonical-uri-type]]:\\n<$select tiddler=\\\"$:/config/file-uploads/fission/canonical-uri-type\\\" default=\\\"direct IPFS\\\">\\n<$list filter='[[direct IPFS]] public'>\\n<option value=<<currentTiddler>>><$view field='title'/></option>\\n</$list>\\n</$select>\\n\\n<$list filter=\\\"[{$:/config/file-uploads/fission/canonical-uri-type}match[direct IPFS]]\\\" variable=\\\"_NULL\\\">\\n\\n<hr>\\n[[IPFS Gateway|$:/config/file-uploads/fission/ipfs-gateway]]:\\n<$edit-text tiddler=\\\"$:/config/file-uploads/fission/ipfs-gateway\\\" field=\\\"text\\\" tag=\\\"input\\\" />\\n\\nThe canonical file uri will point to a direct IPFS link at the gateway youâ€™ve selected.\\n\\nExample: //<$text text={{{ [{$:/config/file-uploads/fission/ipfs-gateway}addprefix[https://]addsuffix[/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu]] }}}/>//\\n<hr>\\n\\n</$list>\\n\\n[[Upload folder path relative to root of public folder|$:/config/file-uploads/fission/uploadpath]]: \\n<$edit-text tiddler=\\\"$:/config/file-uploads/fission/uploadpath\\\" field=\\\"text\\\" tag=\\\"input\\\" />\\n\\nThe files can be browsed in your Fission public file system at this path:<br>\\n//<$text text={{{ [[https://fissionUserName.files.fission.name/p/]addsuffix{$:/config/file-uploads/fission/uploadpath}] }}}/>//\\n\\n\\n\"}}}"}