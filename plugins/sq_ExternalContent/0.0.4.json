{"title":"$:/plugins/sq/ExternalContent","name":"External Content","description":"Load content from another TiddlyWiki","author":"Saq Imtiaz","core-version":">=5.3.0","list":"readme settings","version":"0.0.4","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/config/sq/ExternalContent/load-on-startup\": {\n            \"title\": \"$:/config/sq/ExternalContent/load-on-startup\",\n            \"text\": \"yes\"\n        },\n        \"$:/plugins/sq/ExternalContent/filters/jsonfiltertiddlers.js\": {\n            \"title\": \"$:/plugins/sq/ExternalContent/filters/jsonfiltertiddlers.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/sq/ExternalContent/filters/jsonfiltertiddlers.js\\ntype: application/javascript\\nmodule-type: filteroperator\\ndescription: Interpret each incoming title as a JSON array of tiddlers and return tiddlers that match the filter expression\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports[\\\"jsonfiltertiddlers\\\"] = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tlet data = $tw.utils.parseJSONSafe(title),\\n\\t\\t\\toutput = [];\\n\\t\\tif(data && Array.isArray(data)) {\\n\\t\\t\\tlet tempWiki = new $tw.Wiki();\\n\\t\\t\\ttempWiki.addTiddlers(data);\\n\\t\\t\\tlet outputTitles = tempWiki.filterTiddlers(operator.operand||\\\"\\\");\\n\\t\\t\\toutputTitles.forEach(title => {\\n\\t\\t\\t\\tlet tiddler = tempWiki.getTiddler(title);\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tlet fields = tiddler.getFieldStrings();;\\n\\t\\t\\t\\t\\toutput.push(fields)\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tresults.push(JSON.stringify(output));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"filteroperator\",\n            \"description\": \"Interpret each incoming title as a JSON array of tiddlers and return tiddlers that match the filter expression\"\n        },\n        \"$:/plugins/sq/ExternalContent/loadWikiActions\": {\n            \"title\": \"$:/plugins/sq/ExternalContent/loadWikiActions\",\n            \"code-body\": \"yes\",\n            \"text\": \"\\\\procedure startupConfigTitle() $:/config/sq/ExternalContent/load-on-startup\\n\\\\procedure loadWikiActions(wikiURL,contentFilter,deserializer)\\n\\t<!-- actions invoked after fetching the remote data -->\\n\\t\\\\procedure getWikiCallback()\\n\\t\\t<!-- actions to turn the remote data into tiddlers -->\\n\\t\\t\\\\procedure importTiddlers()\\n\\t\\t\\t<$let\\n\\t\\t\\t\\tpassthroughFilter=\\\"[all[]]\\\"\\n\\t\\t\\t\\tdefaultDeserializer=\\\"text/html\\\"\\n\\t\\t\\t\\tcontentFilter={{{ [<contentFilter>!is[blank]else<passthroughFilter>] }}}\\n\\t\\t\\t\\tdeserializer={{{ [<deserializer>!is[blank]else<defaultDeserializer>] }}}\\n\\t\\t\\t\\ttiddlerJSON={{{[<data>deserialize<deserializer>jsonfiltertiddlers<contentFilter>]}}}\\n\\t\\t\\t\\ttiddlers={{{ [<tiddlerJSON>jsonindexes[]] :map[<tiddlerJSON>jsonget<currentTiddler>,[title]] :and[format:titlelist[]join[ ]] }}}\\n\\t\\t\\t>\\n\\t\\t\\t<$action-log $$filter=\\\"wikiURL contentFilter deserializer tiddlers tiddlerJSON\\\"/>\\n\\t\\t\\t\\t<!-- iterate over each position in the array -->\\n\\t\\t\\t\\t<$list filter=\\\"[<tiddlerJSON>jsonindexes[]]\\\" variable=\\\"index\\\">\\n\\t\\t\\t\\t\\t<!-- get the tiddler at that position in the array from the JSON -->\\n\\t\\t\\t\\t\\t<$let\\n\\t\\t\\t\\t\\t\\ttiddler={{{ [<tiddlerJSON>jsonextract<index>] }}} \\n\\t\\t\\t\\t\\t\\ttitle={{{ [<tiddler>jsonget[title]] }}}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<!-- make sure we have a title for the tiddler and exclude system tiddlers -->\\n\\t\\t\\t\\t\\t\\t<$list filter=\\\"[<title>!is[blank]]\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$action-setmultiplefields\\n\\t\\t\\t\\t\\t\\t\\t\\t$fields=\\\"[<tiddler>jsonindexes[]] externalTiddler is_volatile includeTimestamp\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t$values=\\\"[<tiddler>jsonindexes[]] :map[<tiddler>jsonget<currentTiddler>!is[blank]else[]] =yes =yes [<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>]\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t$timestamp=\\\"no\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t</$let>\\n\\t\\t\\\\end importTiddlers\\n\\t\\t<!-- actions invoked if there is an error fetching the data -->\\n\\t\\t\\\\procedure failureHandler()\\n\\t\\t\\t<$action-log status=\\\"error fetching the wiki\\\"/>\\n\\t\\t\\t<$action-setfield $tiddler={{{ [[$:/temp/http/error/]addsuffix<now [UTC]YYYY0MM0DD0hh0mm0ssXXX]>] }}} text={{{ [[There was an error fetching the wiki ]addsuffix<wikiURL>addsuffix<error>] }}} tags=\\\"$:/tags/Alert\\\"/>\\n\\t\\t\\\\end failureHandler\\n\\t\\t<$list filter=\\\"[<status>match[200]]\\\" variable=\\\"null\\\" emptyValue=<<failureHandler>> >\\n\\t\\t\\t<$action-log data=<<data>> status=\\\"succcess\\\" />\\n\\t\\t\\t<<importTiddlers>>\\n\\t\\t</$list>\\n\\t\\\\end getWikiCallback\\n\\n\\t<!-- fetch the remote data source-->\\n\\t\\\\procedure getWikiActions()\\n\\t\\t<$action-sendmessage\\n\\t\\t\\t$message=\\\"tm-http-request\\\"\\n\\t\\t\\tmethod=\\\"GET\\\"\\n\\t\\t\\tbind-status={{{ [[$:/temp/http/load-content/]addsuffix<wikiURL>] }}}\\n\\t\\t\\toncompletion=<<getWikiCallback>>\\n\\t\\t\\turl=<<wikiURL>>\\n\\t\\t\\tvar-wikiURL=<<wikiURL>>\\n\\t\\t\\tvar-contentFilter=<<contentFilter>>\\n\\t\\t\\tvar-deserializer=<<deserializer>>\\n\\t\\t\\t>\\n\\t\\\\end getWikiActions\\n\\n<!--  check if its a tiddlyhost URL and if so map it to the json file /tiddlers.json, also trim any trailing slashes  -->\\n\\n<$let isTiddlyHost={{{ [<wikiURL>regexp[(?i)^https:\\\\/\\\\/\\\\S+tiddlyhost.com]then[yes]else[no]] }}}\\n\\twikiURL={{{ [<isTiddlyHost>match[yes]] :then[<wikiURL>trim:suffix[/]trim:suffix[tiddlers.json]addsuffix[/tiddlers.json]] :else[<wikiURL>] }}}\\n\\tdeserializer={{{ [<isTiddlyHost>match[yes]then[application/json]else<deserializer>] }}}\\n\\t>\\n\\t<$action-log $$filter=\\\"isTiddlyHost wikiURL deserializer\\\"/>\\n\\t<<getWikiActions>>\\n</$let>\\n\\\\end loadWikiActions\\n\\n\\n<!--  ARE IMAGES IMPORTING CORRECTLY?   -->\"\n        },\n        \"$:/plugins/sq/ExternalContent/readme\": {\n            \"title\": \"$:/plugins/sq/ExternalContent/readme\",\n            \"text\": \"!!Import content from other online wikis\\n\\nNote that content is loaded immediately after the wiki starts up, therefore JavaScript modules and tiddlers that are meant to influence the startup behaviour will not take effect if loaded in this manner. The wiki from which content is to be imported must be hosted on a server with CORS support, such as TiddlyHost or GitHub pages.\\n\\n!! Excluding imported content from being saved with the wiki\\n''If you do not want the imported tiddlers to be saved with the host wiki, you must exclude them:''\\n\\n* for single file TiddlyWikis you need to create or amend the global variable publishFilter by adding `-[is_volatile[yes]]`\\n** if you have not previously defined a publishFilter, create a tiddler with the title `$:/publishFilter` with the tag `$:/tags/Global` where the text field consists of `-[is_volatile[yes]]`\\n* for TiddlyWiki on node.js, modify the tiddler `$:/config/SyncFilter` and append `-[is_volatile[yes]]`\\n\\n!! Loading content on startup\\n\\nFor each wiki from which you want to load content on startup, create a tiddler tagged with `$:/tags/load-external-content` with the following fields:\\n\\n|tags |~$:/tags/load-external-content |\\n|text |the URL of the wiki from which to import tiddlers |\\n|content-filter |(optional) filter that determines which tiddlers to import from the target wiki. Note you can filter out system tiddlers or config tiddlers that might not be desirable. |\\n|deserializer|(optional) defaults to `text/html` which is appropriate for TiddlyWiki files |\\n\\nNote: for TiddlyHost files the plugin automatically downloads just the tiddler.json file provided by TiddlyHost and chooses the appropriate deserializer, to decrease the bandwidth used.\\n\\n!! Loading content on demand\\n\\nImport variables from the tiddler `$:/plugins/sq/ExternalContent/loadWikiActions` and use the procedure `loadWikiActions` in an action string.\\n\\nExample:\\n\\n```\\n\\\\procedure loadMyWiki()\\n\\\\import [[$:/plugins/sq/ExternalContent/loadWikiActions]]\\n<$transclude\\n    $variable=\\\"loadWikiActions\\\"\\n    wikiURL=\\\"https://tiddlywiki.com\\\"\\n    contentFilter=\\\"[!is[system]tag[Working with TiddlyWiki]]\\\"\\n    deseralizer=\\\"text/html\\\"\\n    />\\n\\\\end\\n\\n<$button actions=<<loadMyWiki>> > load content </$button>\\n\\n```\"\n        },\n        \"$:/plugins/sq/ExternalContent/settings\": {\n            \"title\": \"$:/plugins/sq/ExternalContent/settings\",\n            \"text\": \"<$checkbox tiddler=\\\"$:/config/sq/ExternalContent/load-on-startup\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> Load external content on startup</$checkbox>\\n\\nWikis to load content from on startup:\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/load-external-content]]\\\">\\n\\n|Defined in |<$link/> |\\n|URL |{{!!text}} |\\n|content-filter|<$text text={{!!content-filter}}/> |\\n|deseralizer|<$text text={{!!deserializer}}/>|\\n\\n</$list>\\n\\n<$button>\\n<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=\\\"Please enter the wiki name here\\\" tags=\\\"$:/tags/load-external-content\\\" text=\\\"Replace this text with the URL\\\" content-filter=\\\"\\\" deseralizer=\\\"\\\"/>\\nAdd wiki to load content from\\n</$button>\"\n        },\n        \"$:/plugins/sq/ExternalContent/startupActions\": {\n            \"title\": \"$:/plugins/sq/ExternalContent/startupActions\",\n            \"tags\": \"$:/tags/StartupAction/PostRender\",\n            \"code-body\": \"yes\",\n            \"text\": \"\\\\import [[$:/plugins/sq/ExternalContent/loadWikiActions]]\\n\\n<% if [<startupConfigTitle>get[text]trim[]match[yes]] %>\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/load-external-content]!is[draft]]\\\">\\n\\t<$transclude\\n\\t\\t$variable=\\\"loadWikiActions\\\"\\n\\t\\twikiURL={{{ [<currentTiddler>get[text]] }}}\\n\\t\\tcontentFilter={{{ [<currentTiddler>get[content-filter]] }}}\\n\\t\\tdeseralizer={{{ [<currentTiddler>get[deseralizer]] }}}\\n\\t\\t/>\\n</$list>\\n<% endif %>\"\n        }\n    }\n}"}