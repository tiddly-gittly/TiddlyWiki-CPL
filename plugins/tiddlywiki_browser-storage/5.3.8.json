{"title":"$:/plugins/tiddlywiki/browser-storage","name":"Browser Storage","description":"Local storage in the browser","list":"readme settings","stability":"STABILITY_2_STABLE","version":"5.3.8","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/config/BrowserStorage/SaveFilter\":{\"title\":\"$:/config/BrowserStorage/SaveFilter\",\"text\":\"[prefix[$:/state/]] -[prefix[$:/state/popup/]]\"},\"$:/plugins/tiddlywiki/browser-storage/icon\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/icon\",\"tags\":\"$:/tags/Image\",\"text\":\"<svg class=\\\"tc-image-browser-storage tc-image-button\\\" viewBox=\\\"0 0 128 128\\\" width=\\\"22pt\\\" height=\\\"22pt\\\">\\n    <g stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill-rule=\\\"evenodd\\\">\\n        <ellipse cx=\\\"64\\\" cy=\\\"16\\\" rx=\\\"40\\\" ry=\\\"16\\\"></ellipse>\\n        <path d=\\\"M24,96 C24,104.836556 41.90861,112 64,112 C86.09139,112 104,104.836556 104,96 L104,112 C104,120.836556 86.09139,128 64,128 C41.90861,128 24,120.836556 24,112 L24,96 Z\\\"></path>\\n        <path d=\\\"M24,72 C24,80.836556 41.90861,88 64,88 C86.09139,88 104,80.836556 104,72 L104,88 C104,96.836556 86.09139,104 64,104 C41.90861,104 24,96.836556 24,88 L24,72 Z\\\"></path>\\n        <path d=\\\"M24,48 C24,56.836556 41.90861,64 64,64 C86.09139,64 104,56.836556 104,48 L104,64 C104,72.836556 86.09139,80 64,80 C41.90861,80 24,72.836556 24,64 L24,48 Z\\\"></path>\\n        <path d=\\\"M24,24 C24,32.836556 41.90861,40 64,40 C86.09139,40 104,32.836556 104,24 L104,40 C104,48.836556 86.09139,56 64,56 C41.90861,56 24,48.836556 24,40 L24,24 Z\\\"></path>\\n    </g>\\n</svg>\"},\"$:/plugins/tiddlywiki/browser-storage/rawmarkup.js\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/rawmarkup.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/browser-storage/rawmarkup.js\\ntype: application/javascript\\nmodule-type: library\\n\\nStartup code injected as raw markup\\n\\n\\\\*/\\n\\n// Need to initialise these because we run before bootprefix.js and boot.js\\n$tw = window.$tw || Object.create(null);\\n$tw.hooks = $tw.hooks || { names: {}};\\n$tw.boot = $tw.boot || {};\\n$tw.boot.preloadDirty = $tw.boot.preloadDirty || [];\\n// Hook the point in the startup process when the tiddlers have been loaded but plugins not unpacked\\nvar hookName = \\\"th-boot-tiddlers-loaded\\\";\\nif(Object.prototype.hasOwnProperty.call($tw.hooks.names,hookName)) {\\n\\t$tw.hooks.names[hookName].push(hookBootTiddlersLoaded);\\n} else {\\n\\t$tw.hooks.names[hookName] = [hookBootTiddlersLoaded];\\n}\\n\\n// Load tiddlers from browser storage\\nfunction hookBootTiddlersLoaded() {\\n\\tvar url = window.location.pathname,\\n\\t\\tkeysToDelete = [],\\n\\t\\tlog = [];\\n\\t// Check that browser storage is available\\n\\ttry {\\n\\t\\twindow.localStorage;\\n\\t} catch(e) {\\n\\t\\treturn;\\n\\t}\\n\\t// Step through each browsder storage item\\n\\tfor(var index=0; index<window.localStorage.length; index++) {\\n\\t\\tvar key = window.localStorage.key(index),\\n\\t\\t\\tparts = key.split(\\\"#\\\");\\n\\t\\t// If it's ours\\n\\t\\tif(parts[0] === \\\"tw5\\\" && parts[1] === url) {\\n\\t\\t\\t// Read it as JSON\\n\\t\\t\\tvar jsonString = window.localStorage.getItem(key),\\n\\t\\t\\t\\tjsonData;\\n\\t\\t\\tif(jsonString) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tjsonData = JSON.parse(jsonString);\\n\\t\\t\\t\\t} catch(e) {}\\n\\t\\t\\t\\tif(jsonData) {\\n\\t\\t\\t\\t\\t// Convert it to a tiddler\\n\\t\\t\\t\\t\\tvar incomingTiddler = new $tw.Tiddler(jsonData);\\n\\t\\t\\t\\t\\tif(incomingTiddler) {\\n\\t\\t\\t\\t\\t\\t// Get any existing tiddler\\n\\t\\t\\t\\t\\t\\tvar title = incomingTiddler.fields.title,\\n\\t\\t\\t\\t\\t\\t\\texistingTiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\t\\t\\tif(existingTiddler && existingTiddler.isEqual(incomingTiddler)) {\\n\\t\\t\\t\\t\\t\\t\\t// If the incoming tiddler is the same as the existing then we can delete the local storage version\\n\\t\\t\\t\\t\\t\\t\\t// Defer deletion until after this loop, since deleting will shift the index and cause the\\n\\t\\t\\t\\t\\t\\t\\t// index+1 item to be skipped.\\n\\t\\t\\t\\t\\t\\t\\tkeysToDelete.push(key);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(incomingTiddler);\\n\\t\\t\\t\\t\\t\\t\\tlog.push(title);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Empty value means the tiddler is marked as deleted\\n\\t\\t\\t\\tvar title = parts.slice(2).join(\\\"#\\\"),\\n\\t\\t\\t\\t\\texistingTiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\tif(existingTiddler) {\\n\\t\\t\\t\\t\\t// The tiddler still exists in the wiki. Delete it so it won't be visible.\\n\\t\\t\\t\\t\\t$tw.wiki.deleteTiddler(title);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// The tiddler is already missing from the wiki, so delete the blank local storage entry\\n\\t\\t\\t\\t\\tkeysToDelete.push(key);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t$tw.utils.each(keysToDelete,function(key) {\\n\\t\\twindow.localStorage.removeItem(key);\\n\\t});\\n\\t// Make sure that all the tiddlers we've loaded are marked as dirty at startup\\n\\tArray.prototype.push.apply($tw.boot.preloadDirty,log);\\n\\t// Save the log\\n\\t$tw.wiki.addTiddler({\\n\\t\\ttitle: \\\"$:/temp/BrowserStorage/Log\\\",\\n\\t\\ttext: $tw.utils.stringifyList(log)\\n\\t});\\n}\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/tiddlywiki/browser-storage/rawmarkup\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/rawmarkup\",\"tags\":\"$:/tags/RawMarkupWikified\",\"text\":\"`<script>`\\n{{$:/plugins/tiddlywiki/browser-storage/rawmarkup.js}}\\n`</script>`\\n\"},\"$:/plugins/tiddlywiki/browser-storage/readme\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/readme\",\"text\":\"This plugin enables ~TiddlyWiki to save tiddlers in [[browser local storage|https://en.wikipedia.org/wiki/Web_storage#localStorage]]. This means that changes are stored within the browser, and automatically re-applied any time the base wiki is reloaded.\\n\\nAt startup, the plugin reads tiddlers from local storage. Any tiddlers that are identical to those built into the file are deleted from local storage. Once the wiki is up and running, any tiddler changes are written straight to local storage.\\n\\n!! Optional use with ~TiddlyWeb plugin\\n\\nFor wikis served from a ~TiddlyWeb compatible server, including the ~TiddlyWiki Node JS server, this plugin may be added to provide temporary local storage of tiddler changes when the [[tiddlyweb sync adapter|https://github.com/TiddlyWiki/TiddlyWiki5/tree/master/plugins/tiddlywiki/tiddlyweb]] is unable to successfully synchronise with the server, and to automatically synchronise tiddlers saved offline in browser storage once connection is re-established. The use of browser storage allows for tiddlers saved offline to be synchronised with the server even in the case where the browser is closed or the user (purposely, accidentally, or automatically in the case of a mobile browser periodically refreshing) navigates away from the wiki.\\n\\nChanges will be synchronised with the server the next time the wiki is loaded in the browser. Tiddlers are removed from browser-storage once synchronised to the server.\\n\\nBy default only state tiddlers are saved by this plugin. On the settings tab, you can update the Save Filter to save all content and system tiddlers. The third example provided is a good choice. \\n\\n!!! Limitations\\n\\n* ''Deleted tiddlers:'' Tiddler deletions while offline are not synchronised with the server due to technical limitations. The intent of using this plugin with a ~TiddlyWeb server is to prevent the loss of new or modified content while temporarily offline. \\n* ''Title changes:'' Tiddlers are saved by title, so a change to a tiddler title will be saved and synchronised to the server, but it will not overwrite the tiddler with the original title. \\n* ''Browser storage:'' While useful as a safety measure for //temporary// offline usage, as noted below, browser storage itself has limitations that could still result in losing data in some cases.   \\n\\n!!Browser local storage is not a panacea for TiddlyWiki:\\n\\n* Browsers limit the amount of local storage available to a page, typically to 5 or 10MB\\n* Keeping personal data in browser local storage can lead to unexpected privacy violations\\n* Browsers reserve the right to without warning delete data stored in local storage at any time\\n* Browsers tie local storage to a URL which can lead to problems if you move a wiki to a URL previously occupied by a different wiki\\n\\nPlease use this plugin with caution. There are a number of unresolved issues and open questions:\\n\\n* Innerwikis read the local storage of their parent wikis\\n* This plugin does not interfere with the existing saver mechanism, so you'll still get warnings when refreshing the page, even if your changes are safely committed to local storage\\n* There is a possibility that tiddlers might be transferred between different wikis if they are accessed via the same URL. This is particularly likely when running in local client server configuration under Node.js\\n\"},\"$:/plugins/tiddlywiki/browser-storage/settings\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/settings\",\"caption\":\"Browser Storage\",\"tags\":\"$:/tags/ControlPanel/SettingsTab\",\"text\":\"! Disable\\n\\nYou can disable the browser storage plugin:\\n\\n<$checkbox tiddler=\\\"$:/config/BrowserStorage/Enabled\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> Use browser local storage</$checkbox>\\n\\n! Clear\\n\\nClick this button to clear browser storage and disable its use:\\n\\n<$button message=\\\"tm-clear-browser-storage\\\">Clear browser storage</$button>\\n\\n! Save Filter\\n\\nThis filter determines which tiddlers will be saved to local storage.\\n\\n* `[prefix[$:/state/]] -[prefix[$:/state/popup/]]` - the default value. Save state tiddlers except popup state tiddlers, thus preserving selected tabs and the open/closed status of table of contents entries. Any other tiddlers created or changed will be lost after reloading the page.\\n* `[all[]]` - attempt to save all changed tiddlers. This means even popup state tiddlers and temporary tiddlers will be saved.\\n* `[all[]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]]` - save all tiddlers except popup state tiddlers, temp tiddlers and the history list.\\n\\n|tc-table-no-border|k\\n|<$link to=\\\"$:/config/BrowserStorage/SaveFilter\\\">Browser Storage Save Filter</$link> |<$edit-text tiddler=\\\"$:/config/BrowserStorage/SaveFilter\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n\\n! Custom Quota Exceeded Alert\\n\\nThis setting allows a custom alert message to be displayed when an attempt to store a tiddler fails due to the storage quota being exceeded:\\n\\n|tc-table-no-border|k\\n|<$link to=\\\"$:/config/BrowserStorage/QuotaExceededAlert\\\">Quota Exceeded Alert</$link> |<$edit-text tiddler=\\\"$:/config/BrowserStorage/QuotaExceededAlert\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n\\n! Prevent browser from evicting local storage\\n\\nPermission for local storage persistence: ''{{$:/info/browser/storage/persisted}}''\\n\\nThe first time a tiddler is saved to local storage a request will be made to prevent automatic eviction of local storage for this site. This means the data will not be cleared unless the user manually clears it.\\n\\nOld browsers may not support this feature. New browsers might not support the feature if the wiki is hosted on a non-localhost unencrypted http connection.\\n\\nSome browsers will explicitly prompt the user for permission. Other browsers may automatically grant or deny the request based on site usage or based on whether the site is bookmarked.\\n\\n! Startup Log\\n\\nThe tiddler $:/temp/BrowserStorage/Log contains a log of the tiddlers that were loaded from local storage at startup:\\n\\n<<list-links \\\"[enlist{$:/temp/BrowserStorage/Log}sort[]]\\\">>\\n\"},\"$:/plugins/tiddlywiki/browser-storage/startup.js\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/startup.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/browser-storage/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nStartup initialisation\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"browser-storage\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nvar ENABLED_TITLE = \\\"$:/config/BrowserStorage/Enabled\\\",\\n\\tSAVE_FILTER_TITLE = \\\"$:/config/BrowserStorage/SaveFilter\\\",\\n\\tPERSISTED_STATE_TITLE = \\\"$:/info/browser/storage/persisted\\\";\\n\\nvar BrowserStorageUtil = require(\\\"$:/plugins/tiddlywiki/browser-storage/util.js\\\").BrowserStorageUtil;\\n\\nexports.startup = function() {\\n\\tvar self = this;\\n\\n\\t// If not exists, add ENABLED tiddler with default value \\\"yes\\\"\\n\\tif(!$tw.wiki.getTiddler(ENABLED_TITLE)) {\\n\\t\\t$tw.wiki.addTiddler({title: ENABLED_TITLE, text: \\\"yes\\\"});\\n\\t}\\n\\t// Compute our prefix for local storage keys\\n\\tvar prefix = \\\"tw5#\\\" + window.location.pathname + \\\"#\\\";\\n\\t// Make a logger\\n\\tvar logger = new $tw.utils.Logger(\\\"browser-storage\\\",{\\n\\t\\t\\tcolour: \\\"cyan\\\"\\n\\t\\t});\\n\\t// Add browserStorage object to $tw\\n\\t$tw.browserStorage = new BrowserStorageUtil($tw.wiki,{\\n\\t\\tenabledTitle: ENABLED_TITLE,\\n\\t\\tprefix: prefix,\\n\\t\\tlogger: logger\\n\\t});\\n\\t// Function to compile the filter\\n\\tvar filterFn,\\n\\t\\tcompileFilter = function() {\\n\\t\\t\\tfilterFn = $tw.wiki.compileFilter($tw.wiki.getTiddlerText(SAVE_FILTER_TITLE));\\n\\t}\\n\\tcompileFilter();\\n\\t// Listen for tm-clear-browser-storage messages\\n\\t$tw.rootWidget.addEventListener(\\\"tm-clear-browser-storage\\\",function(event) {\\n\\t\\t$tw.wiki.addTiddler({title: ENABLED_TITLE, text: \\\"no\\\"});\\n\\t\\t$tw.browserStorage.clearLocalStorage();\\n\\t});\\n\\t// Seperate clear cookie and disable action\\n\\t$tw.rootWidget.addEventListener(\\\"tm-delete-browser-storage\\\",function(event) {\\n\\t\\t$tw.browserStorage.clearLocalStorage();\\n\\t});\\n\\t$tw.rootWidget.addEventListener(\\\"tm-disable-browser-storage\\\",function(event) {\\n\\t\\t$tw.wiki.addTiddler({title: ENABLED_TITLE, text: \\\"no\\\"});\\n\\t});\\n\\t// Helpers for protecting storage from eviction\\n\\tvar setPersistedState = function(state) {\\n\\t\\t\\t$tw.wiki.addTiddler({title: PERSISTED_STATE_TITLE, text: state});\\n\\t\\t},\\n\\t\\trequestPersistence = function() {\\n\\t\\t\\tsetPersistedState(\\\"requested\\\");\\n\\t\\t\\tnavigator.storage.persist().then(function(persisted) {\\n\\t\\t\\t\\tconsole.log(\\\"Request for persisted storage \\\" + (persisted ? \\\"granted\\\" : \\\"denied\\\"));\\n\\t\\t\\t\\tsetPersistedState(persisted ? \\\"granted\\\" : \\\"denied\\\");\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\tpersistPermissionRequested = false,\\n\\t\\trequestPersistenceOnFirstSave = function() {\\n\\t\\t\\t$tw.hooks.addHook(\\\"th-saving-tiddler\\\", function(tiddler) {\\n\\t\\t\\t\\tif(!persistPermissionRequested) {\\n\\t\\t\\t\\t\\tvar filteredChanges = filterFn.call($tw.wiki, function(iterator) {\\n\\t\\t\\t\\t\\t\\titerator(tiddler,tiddler.getFieldString(\\\"title\\\"));\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tif(filteredChanges.length > 0) {\\n\\t\\t\\t\\t\\t\\t// The tiddler will be saved to local storage, so request persistence\\n\\t\\t\\t\\t\\t\\trequestPersistence();\\n\\t\\t\\t\\t\\t\\tpersistPermissionRequested = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn tiddler;\\n\\t\\t\\t});\\n\\t\\t};\\n\\t// Request the browser to never evict the localstorage. Some browsers such as firefox\\n\\t// will prompt the user. To make the decision easier for the user only prompt them\\n\\t// when they click the save button on a tiddler which will be stored to localstorage.\\n\\tif(navigator.storage && navigator.storage.persist) {\\n\\t\\tnavigator.storage.persisted().then(function(isPersisted) {\\n\\t\\t\\tif(!isPersisted) {\\n\\t\\t\\t\\tsetPersistedState(\\\"not requested yet\\\");\\n\\t\\t\\t\\trequestPersistenceOnFirstSave();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsetPersistedState(\\\"granted\\\");\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsetPersistedState(\\\"feature not available\\\");\\n\\t}\\n\\t// Track tiddler changes\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t// Bail if browser storage is disabled\\n\\t\\tif($tw.wiki.getTiddlerText(ENABLED_TITLE) === \\\"no\\\") {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Recompile the filter if it has changed\\n\\t\\tif(changes[SAVE_FILTER_TITLE]) {\\n\\t\\t\\tcompileFilter();\\n\\t\\t}\\n\\t\\t// Filter the changes\\n\\t\\tvar filteredChanges = filterFn.call($tw.wiki,function(iterator) {\\n\\t\\t\\t$tw.utils.each(changes,function(change,title) {\\n\\t\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\titerator(tiddler,title);\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t$tw.utils.each(filteredChanges,function(title) {\\n\\t\\t\\t// Don't try to save changes to our enabled status\\n\\t\\t\\t// (If it were enabled in the file but disabled in local storage then we might not realise that distributing a copy of the file would have local storage enabled for other users)\\n\\t\\t\\tif(title === ENABLED_TITLE) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t// This should always be queried from the browser, so don't store it in local storage\\n\\t\\t\\tif(title === PERSISTED_STATE_TITLE) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t// Save the tiddler\\n\\t\\t\\t$tw.browserStorage.saveTiddlerToLocalStorage(title);\\n\\t\\t});\\n\\t});\\n};\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/tiddlywiki/browser-storage/util.js\":{\"title\":\"$:/plugins/tiddlywiki/browser-storage/util.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/browser-storage/util.js\\ntype: application/javascript\\nmodule-type: library\\n\\nUtility methods for browser-storage plugin\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\nfunction BrowserStorageUtil(wiki,options) {\\n    this.options = options || {};\\n    this.wiki = wiki;\\n    this.cachedTiddlers = [];\\n    this.QUOTA_EXCEEDED_ALERT_TITLE = \\\"$:/config/BrowserStorage/QuotaExceededAlert\\\";\\n    this.DEFAULT_QUOTA_EXCEEDED_ALERT_PREFIX = \\\"Quota exceeded attempting to store `\\\";\\n    this.DEFAULT_QUOTA_EXCEEDED_ALERT_SUFFIX = \\\"` in browser local storage\\\";\\n}\\n\\nBrowserStorageUtil.prototype.isEnabled = function() {\\n    return $tw.wiki.getTiddlerText(this.options.enabledTitle) === \\\"yes\\\";\\n};\\n\\nBrowserStorageUtil.prototype.cachePreloadTiddlers = function() {\\n    var self = this;\\n    $tw.utils.each($tw.boot.preloadDirty, function(item){\\n        var tiddler = $tw.wiki.getTiddler(item);\\n        self.cachedTiddlers.push(tiddler);\\n    });\\n};\\n\\nBrowserStorageUtil.prototype.addCachedTiddlers = function() {\\n    var self = this;\\n    if(this.cachedTiddlers.length > 0) {\\n        $tw.utils.each(this.cachedTiddlers, function(item){\\n            $tw.wiki.addTiddler(item);\\n        });\\n        this.cachedTiddlers.length = 0;\\n    }\\n};\\n\\nBrowserStorageUtil.prototype.removeTiddlerFromLocalStorage = function(title) {\\n    console.log(\\\"browser-storage: Removing\\\", title);\\n    window.localStorage.removeItem(this.options.prefix + title);\\n};\\n\\nBrowserStorageUtil.prototype.saveTiddlerToLocalStorage = function(title) {\\n    // Get the tiddler\\n    var tiddler = $tw.wiki.getTiddler(title);\\n    if(tiddler) {\\n        if(this.wiki.tiddlerExists(title)) {\\n            // This is not a shadow tiddler\\n            console.log(\\\"browser-storage: Saving\\\",title);\\n            // Get the JSON of the tiddler\\n            var json = JSON.stringify(tiddler.getFieldStrings());\\n            // Try to save it to local storage\\n            try {\\n                window.localStorage.setItem(this.options.prefix + title,json);\\n            } catch(e) {\\n                if(e.name === \\\"QuotaExceededError\\\") {\\n                    // Complain if we failed\\n                    var msg = $tw.wiki.getTiddlerText(this.QUOTA_EXCEEDED_ALERT_TITLE,this.DEFAULT_QUOTA_EXCEEDED_ALERT_PREFIX + title + this.DEFAULT_QUOTA_EXCEEDED_ALERT_SUFFIX);\\n                    if(this.options.logger) {\\n                        this.options.logger.alert(msg);\\n                    }\\n                    // No point in keeping old values around for this tiddler\\n                    window.localStorage.removeItem(this.options.prefix + title);\\n                } else {\\n                    console.log(\\\"Browser-storage error:\\\",e);\\n                }\\n            }\\n        } else {\\n            // Shadow tiddler which is no longer overwritten (or never was)\\n            // Ensure it is not in local storage\\n            this.removeTiddlerFromLocalStorage(title);\\n        }\\n    } else {\\n        // In local storage, use the special value of empty string to mark the tiddler as deleted\\n        // On future page loads, if the tiddler is already gone from startup then the blank entry\\n        // will be removed from localstorage. Otherwise, the tiddler will be deleted.\\n        console.log(\\\"browser-storage: Blanking\\\",title); \\n        try {\\n            window.localStorage.setItem(this.options.prefix + title, \\\"\\\");\\n        } catch(e) {\\n            console.log(\\\"Browser-storage error:\\\",e);\\n        }\\n    }\\n};\\n\\nBrowserStorageUtil.prototype.clearLocalStorage = function() {\\n    var url = window.location.pathname,\\n        log = [];\\n    // Step through each browser storage item\\n    if(window.localStorage) {\\n        for(var index=window.localStorage.length - 1; index>=0; index--) {\\n            var key = window.localStorage.key(index),\\n                parts = key.split(\\\"#\\\");\\n            // Delete it if it is ours\\n            if(parts[0] === \\\"tw5\\\" && parts[1] === url) {\\n                window.localStorage.removeItem(key);\\n            }\\n        }\\n    }\\n};\\n\\nexports.BrowserStorageUtil = BrowserStorageUtil;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"}}}","author":"tiddlywiki"}