{"title":"$:/plugins/oeyoews/neotw-bot","description":"向Telegram bot 发送消息","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"neotw-bot","meat#disabled":"yes","qrcode":"yes","created":"2024/08-11","dependents":"$:/plugins/oeyoews/neotw-vue3 $:/plugins/oeyoews/tiddlywiki-tailwindcss-plus","stability":"STABILITY_1_STABLE","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/neotw-bot/templates/app.vue\":{\"text\":\"<template>\\n  <el-form @submit.native.prevent>\\n    <el-form-item>\\n      <el-mention :options=\\\"actionOptions\\\" type='textarea' :autosize=\\\"{ minRows: 4, maxRows: 10 }\\\" placeholder='请输入内容*'\\n        v-model=\\\"text\\\"></el-mention>\\n    </el-form-item>\\n  </el-form>\\n  <div class=\\\"flex gap-1\\\">\\n    <el-input placeholder='你的昵称' v-model=\\\"username\\\"></el-input>\\n    <el-mention :options=\\\"emailSuffixOptions\\\" placeholder='你的邮箱*' v-model.trim=\\\"email\\\"></el-mention>\\n    <!-- 做成弹窗 -->\\n    <el-select v-model=\\\"version\\\" placeholder=\\\"选择版本\\\">\\n      <el-option v-for=\\\"item in versions\\\" :key=\\\"item\\\" :label=\\\"item\\\" :value=\\\"item\\\">\\n      </el-option>\\n    </el-select>\\n    <el-upload accept=\\\"image/*\\\" :auto-upload=\\\"false\\\" :on-change=\\\"handleSuccess\\\" :show-file-list=\\\"false\\\">\\n      <el-button>上传</el-button>\\n    </el-upload>\\n    <el-button @click=\\\"sendMessage\\\">\\n      发送\\n    </el-button>\\n  </div>\\n</template>\",\"title\":\"$:/plugins/oeyoews/neotw-bot/templates/app.vue\",\"hide-body\":\"yes\"},\"$:/plugins/oeyoews/neotw-bot/plugins/TiddlyWikiVue.js\":{\"text\":\"module.exports = {\\n  install(app, options) {\\n    app.component('TiddlyWikiVue', {\\n      template: `<button> {{ msg }} </button>`,\\n      props: {\\n        msg: String\\n      }\\n    });\\n  }\\n};\\n\",\"title\":\"$:/plugins/oeyoews/neotw-bot/plugins/TiddlyWikiVue.js\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/oeyoews/neotw-bot/components/Version.js\":{\"text\":\"module.exports = {\\n  name: 'Version',\\n  props: {\\n    version: {\\n      type: String,\\n      default: '5.3.2'\\n    }\\n  },\\n  template: `<span> {{ version }} </span>`\\n};\\n\",\"title\":\"$:/plugins/oeyoews/neotw-bot/components/Version.js\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/oeyoews/neotw-bot/readme\":{\"title\":\"$:/plugins/oeyoews/neotw-bot/readme\",\"description\":\"neotw-bot\",\"text\":\"[[在线文档|https://neotw.vercel.app/docs/plugins/neotw-bot]]\"},\"$:/plugins/oeyoews/neotw-bot/app.js\":{\"title\":\"$:/plugins/oeyoews/neotw-bot/app.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/neotw-bot/app.js\\ntype: application/javascript\\nmodule-type: library\\n\\n\\\\*/\\n\\nconst { ElNotification } = require('element-plus.min.js');\\n\\nconst getTemplate = require('../neotw-vue3/getTemplate.js');\\nconst pluginTitle = '$:/plugins/oeyoews/neotw-bot';\\n\\nconst app = ({ token }) => {\\n  const component = {\\n    components: {},\\n    template: getTemplate(`${pluginTitle}/templates/app.vue`),\\n    data() {\\n      return {\\n        baseUrl: 'https://api.telegram.org/bot' + token,\\n        chatId: '',\\n        username: '',\\n        email: '',\\n        text: '',\\n        hasToken: false,\\n        version: '',\\n        latestTwVersion: '',\\n        versions: [],\\n        file: '',\\n        actionOptions: ['photo'].map((item) => ({ label: item, value: item })),\\n        emailSuffixOptions: [\\n          'gmail.com',\\n          'outlook.com',\\n          '163.com',\\n          'qq.com',\\n          '126.com',\\n        ].map((item) => ({ label: item, value: item })),\\n      };\\n    },\\n    mounted() {\\n      this.getTWLatestVersion().then(() => {\\n        this.generateRandomVersion();\\n      });\\n      this.checkToken(token);\\n      this.hasToken = this.getChatId();\\n    },\\n    methods: {\\n      handleSuccess(e) {\\n        this.file = e?.raw;\\n        this.caption = e?.name || '';\\n        ElNotification({\\n          title: '成功',\\n          message: e.name + '文件上传本地成功',\\n          type: 'success',\\n        });\\n      },\\n      checkToken(token) {\\n        if (!token) {\\n          ElNotification({\\n            title: '错误',\\n            message: '请输入token',\\n            type: 'warning',\\n          });\\n          return false;\\n        }\\n        // 正则表达式匹配格式：一串数字 + 冒号 + 一串大小写字母和数字\\n        const tokenRegex = /^\\\\d+:[A-Za-z0-9_-]+$/;\\n\\n        // 先检查格式是否正确\\n        if (!tokenRegex.test(token)) {\\n          ElNotification({\\n            title: '错误',\\n            message: 'token 无效',\\n            type: 'warning',\\n          });\\n          return false;\\n        }\\n\\n        // 分割token成两部分\\n        const parts = token.split(':');\\n        const part1 = parts[0]; // 冒号前的部分\\n        const part2 = parts[1]; // 冒号后的部分\\n\\n        // 检查两部分的长度\\n        if (part1.length === 10 && part2.length === 35) {\\n          return true;\\n        } else {\\n          ElNotification({\\n            title: '错误',\\n            message: 'token 无效',\\n            type: 'warning',\\n          });\\n          return false;\\n        }\\n      },\\n      checkEmail(email) {\\n        const emailRegex =\\n          /^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$/;\\n        if (!emailRegex.test(email)) {\\n          ElNotification({\\n            title: '错误',\\n            message: 'email 无效',\\n            type: 'warning',\\n          });\\n          return false;\\n        }\\n        return true;\\n      },\\n      // generate random vx.x.x format number version\\n      generateRandomVersion() {\\n        function getRandomNumber() {\\n          return Math.random().toFixed(1).split('.')[1];\\n        }\\n        Array(3)\\n          .fill(0)\\n          .forEach(() => {\\n            this.versions.push(\\n              `v${getRandomNumber()}.${getRandomNumber()}.${getRandomNumber()}`,\\n            );\\n          });\\n        // 随机位置插入\\n        this.versions.splice(\\n          Math.floor(Math.random() * (this.versions.length + 1)),\\n          0,\\n          this.latestTwVersion,\\n        );\\n      },\\n      // 获取tiddlywiki5最新版本号\\n      getTWLatestVersion() {\\n        return new Promise((resolve, reject) => {\\n          fetch('https://api.github.com/repos/TiddlyWiki/TiddlyWiki5/tags')\\n            .then((res) => res.json())\\n            .then((res) => {\\n              this.latestTwVersion = res[0].name;\\n              resolve();\\n            });\\n        });\\n      },\\n      // 向tg发送图片\\n      sendPhoto() {\\n        const text = this.text.trim();\\n        if (text.startsWith('@photo ')) {\\n          const imageSrc = text.split(' ')[text.split(' ').length - 1];\\n          if (imageSrc.startsWith('http')) {\\n            this.file = imageSrc;\\n            this.text = '';\\n          }\\n        }\\n        // 暂时不进行版本校验\\n        if (!this.file) {\\n          return;\\n        }\\n        const formData = new FormData();\\n        formData.append('chat_id', this.chatId);\\n        this.caption && formData.append('caption', this.caption);\\n        formData.append('photo', this.file);\\n        fetch(this.baseUrl + '/sendPhoto', {\\n          method: 'POST',\\n          body: formData,\\n        })\\n          .then((res) => res.json())\\n          .then((res) => {\\n            this.file = '';\\n            this.caption = '';\\n            if (res.ok) {\\n              ElNotification({\\n                title: '成功',\\n                message: '图片发送成功',\\n                type: 'success',\\n              });\\n            } else {\\n              ElNotification({\\n                type: 'error',\\n                message: res.description,\\n                title: '错误',\\n              });\\n            }\\n          })\\n          .catch((err) => {\\n            ElNotification({\\n              type: 'error',\\n              message: err,\\n              title: '错误',\\n            });\\n          });\\n      },\\n      sendMessage() {\\n        this.sendPhoto();\\n        if (!this.checkToken(token)) {\\n          ElNotification({\\n            title: '错误',\\n            message: 'token 无效',\\n            type: 'warning',\\n          });\\n          return;\\n        }\\n        if (!this.text || !this.username || !this.email) {\\n          ElNotification({\\n            title: '错误',\\n            message: '请完善表单信息',\\n            type: 'warning',\\n          });\\n          return;\\n        }\\n        if (!this.checkEmail(this.email)) {\\n          ElNotification({\\n            title: '错误',\\n            message: 'Email格式不正确',\\n            type: 'warning',\\n          });\\n          return;\\n        }\\n        if (this.version !== this.latestTwVersion) {\\n          ElNotification({\\n            title: '错误',\\n            message: '验证未通过，请选择正确的版本号',\\n            type: 'warning',\\n          });\\n          return;\\n        }\\n        const data = {\\n          chat_id: this.chatId,\\n          text: `username: ${this.username}\\\\nemail: ${this.email}\\\\ncontent: ${this.text}`,\\n          // parse_mode: 'HTML', // 'MarkdownV2', 仍然有很多语法不支持导致报错\\n        };\\n\\n        fetch(this.baseUrl + '/sendMessage', {\\n          method: 'POST',\\n          headers: {\\n            'Content-Type': 'application/json',\\n          },\\n          body: JSON.stringify(data),\\n        })\\n          .then((res) => res.json())\\n          .then((res) => {\\n            if (res.ok) {\\n              this.text = '';\\n              ElNotification({\\n                title: '成功',\\n                message: '发送成功',\\n                type: 'success',\\n                duration: 1500,\\n              });\\n            } else {\\n              ElNotification({\\n                title: '错误(tg-bot)',\\n                message: res.description,\\n                type: 'error',\\n              });\\n            }\\n          })\\n          .catch((err) => {\\n            ElNotification({\\n              title: '错误',\\n              message: err.description,\\n              type: 'error',\\n            });\\n          });\\n      },\\n      async getChatId() {\\n        try {\\n          const response = await fetch(this.baseUrl + '/getUpdates');\\n          const result = await response.json();\\n          this.chatId = result.result[0].my_chat_member.chat.id;\\n        } catch (err) {\\n          console.log(err);\\n        }\\n      },\\n    },\\n  };\\n  return component;\\n};\\n\\nmodule.exports = app;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/neotw-bot/widget.js\":{\"title\":\"$:/plugins/oeyoews/neotw-bot/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/neotw-bot/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nneotw-bot widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\n\\nclass BotWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    if (!$tw.browser) return;\\n\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const ssr = this.document.isTiddlyWikiFakeDom;\\n    if (ssr) return;\\n\\n    const vuelib = '$:/plugins/oeyoews/neotw-vue3/vue.global.prod.js';\\n    const ElementPlus = require('element-plus.min.js');\\n\\n    if (!window.Vue) {\\n      window.Vue = require(vuelib);\\n    }\\n\\n    const { tiddler } = this.attributes;\\n\\n    const { createApp } = window.Vue;\\n    const component = require('./app');\\n    const domNode = this.document.createElement('div');\\n\\n    try {\\n      /** @type {{ use: Function, component: (string, Object) }} */\\n      const app = createApp(\\n        component({\\n          token: $tw.wiki.getTiddlerText(tiddler) || '',\\n        }),\\n      );\\n      app.use(ElementPlus);\\n\\n      app.config.errorHandler = (err) => {\\n        const text = `[Vue3](${app.version}): ` + err.message;\\n        console.error(text);\\n        domNode.textContent = text;\\n        domNode.style.color = 'red';\\n      };\\n\\n      // 挂载\\n      app.mount(domNode);\\n\\n      parent.insertBefore(domNode, nextSibling);\\n      this.domNodes.push(domNode);\\n    } catch (e) {\\n      console.error(e.message);\\n    }\\n  }\\n\\n  // TIP: 界面由 vue 接管， 不要在这里刷新\\n  refresh() {\\n    return false;\\n  }\\n}\\n\\n/** @description neotw-bot widget */\\nexports['tg-bot'] = BotWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}