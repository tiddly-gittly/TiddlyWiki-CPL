{"title":"$:/plugins/oeyoews/neotw-read-files","description":"扩展TiddlyWiki读取目录","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"Neotw Read Files","dependents":"","stability":"STABILITY_3_LEGACY","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/neotw-read-files/readme\":{\"title\":\"$:/plugins/oeyoews/neotw-read-files/readme\",\"text\":\"* 导入的图片不会被删除, 需要手动在files 文件夹里面手动删除\\n* 此插件是关于 tiddlywiki 的路由实验性插件，其中的  ImportToExternalFile  是在 saqimtiaz 的插件基础上修改而来的 (仅仅适用于 tiddlywiki-starter-kit 的用例场景)\\n\\n* https://groups.google.com/g/tiddlywiki/c/T0MP1Adzzk0\\n* https://saqimtiaz.github.io/sq-tw/temp/import-to-external-file.html\"},\"$:/config/sq/OverwriteBinaryFiles\":{\"title\":\"$:/config/sq/OverwriteBinaryFiles\",\"text\":\"yes\"},\"$:/config/sq/SaveAsExternalFile\":{\"title\":\"$:/config/sq/SaveAsExternalFile\",\"text\":\"yes\"},\"$:/plugins/oeyoews/neotw-read-files/routes/get-file.js\":{\"title\":\"$:/plugins/oeyoews/neotw-read-files/routes/get-file.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/neotw-read-files/routes/get-file.js\\ntype: application/javascript\\nmodule-type: route\\n\\nneotw-read-files GET /images/:filepath\\n由 https://github.com/Jermolene/TiddlyWiki5/blob/ceee20fd5970e1b75c2117d2522c998a6c5054f3/core/modules/server/routes/get-file.js 改写\\n\\nhttps://github.com/Jermolene/TiddlyWiki5/discussions/7964\\n\\n\\\\*/\\n!function(){\\\"use strict\\\";exports.method=\\\"GET\\\";const e=$tw.wiki.getTiddlerText(\\\"$:/plugins/oeyoews/neotw-read-files/custom-path\\\")||\\\"static\\\";exports.path=new RegExp(`^/${e}/(.+)`),exports.handler=function(t,n,o){var i=require(\\\"path\\\"),s=require(\\\"fs\\\"),a=$tw.utils.decodeURIComponentSafe(o.params[0]),p=i.resolve(o.boot.wikiPath,e),r=i.resolve(p,a),l=i.extname(r);0!==i.relative(p,r).indexOf(\\\"..\\\")?s.readFile(r,(function(e,t){var n,i=\\\"text/plain\\\";e?(n=404,t=\\\"File '\\\"+a+\\\"' not found\\\"):(n=200,i=$tw.config.fileExtensionInfo[l]?$tw.config.fileExtensionInfo[l].type:\\\"application/octet-stream\\\"),o.sendResponse(n,{\\\"Content-Type\\\":i},t)})):o.sendResponse(404,{\\\"Content-Type\\\":\\\"text/plain\\\"},\\\"File '\\\"+a+\\\"' not found\\\")}}();\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/sq/ImportToExternalFile/server-route-upload.js\":{\"title\":\"$:/plugins/sq/ImportToExternalFile/server-route-upload.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/sq/ImportToExternalFile/server-route-upload.js\\ntype: application/javascript\\nmodule-type: route\\n\\nPOST /^\\\\/api\\\\/upload/\\n\\nUpload media\\n\\n\\\\*/\\n!function(){\\\"use strict\\\";exports.method=\\\"POST\\\",exports.path=new RegExp(\\\"^/api/upload\\\"),exports.bodyFormat=\\\"stream\\\";const e=require(\\\"fs\\\"),t=require(\\\"path\\\");exports.handler=function(i,n,s){let l=\\\"\\\";i.on(\\\"data\\\",(function(e){l+=e,l.length>1e7&&(n.writeHead(413,{\\\"Content-Type\\\":\\\"text/plain\\\"}).end(),i.connection.destroy())})),i.on(\\\"end\\\",(function(){try{let s=JSON.parse(l);const o=t.resolve($tw.boot.wikiTiddlersPath,\\\"./files\\\");\\n/*\\n            var xfilepath = $tw.utils.generateTiddlerFilepath(bodyData.tiddler.fields.title,{\\n                directory: filesPath\\n            });\\n            //var ext = path.extname(originalpath);\\n            //xfilepath = xfilepath.substring(0,xfilepath.length - ext.length);\\n\\n\\n            // 1) try to increment filename before extension.\\n            // 2) don't encode / in file path so can specify a subdir\\n            xfilepath = path.join(filesPath, bodyData.tiddler.fields.title); //with this tiddler titles like images/filename work but only if directory exists\\n            console.log(xfilepath);\\n\\t\\t\\t*/var i=r(s.tiddler.fields.title);$tw.utils.createDirectory(o);const a=Buffer.from(s.tiddler.fields.text,\\\"base64\\\");\\n//const filename = path.join(filesPath, bodyData.tiddler.fields.title);\\ne.writeFile(t.join(i),a,(function(e){if(e)throw e;n.setHeader(\\\"Content-Type\\\",\\\"application/json\\\"),n.end(JSON.stringify({success:\\\"saved \\\"+s.tiddler.fields.title,status:200,\\n//\\\"_canonical_uri\\\":\\t \\\"files/\\\" + bodyData.tiddler.fields.title,\\n_canonical_uri:t.relative(t.resolve($tw.boot.wikiTiddlersPath,\\\"..\\\"),i),tiddler:s.tiddler.fields.title}))}))}catch(e){n.writeHead(400),n.end()}}))};var r=function(r,i){const n=t.resolve($tw.boot.wikiTiddlersPath,\\\"../../files/\\\");var s=r.replace(/\\\\/|\\\\\\\\/g,\\\"_\\\");s=(s=s.replace(/^(con|prn|aux|nul|com[0-9]|lpt[0-9])$/i,\\\"_$1_\\\")).replace(/^ +/,(function(e){return e.replace(/ /g,\\\"_\\\")})),/^\\\\.{1,2}[/\\\\\\\\]/g.test(s)||(s=s.replace(/^\\\\.+/g,(function(e){return e.replace(/\\\\./g,\\\"_\\\")}))),s=s.replace(/[\\\\x00-\\\\x1f\\\\x80-\\\\x9f]/g,\\\"_\\\"),s=$tw.utils.transliterate(s.replace(/<|>|~|\\\\:|\\\\\\\"|\\\\||\\\\?|\\\\*|\\\\^/g,\\\"_\\\"));var l=t.extname(r);if(s=s.substring(0,s.length-l.length),(l=l.replace(/[\\\\. ]+$/,(function(e){return e.replace(/[\\\\. ]/g,\\\"_\\\")}))).length>32&&(l=l.substr(0,32)),s.length>200&&(s=s.substr(0,200)),\\n// If the resulting filename is blank (eg because the title is just punctuation)\\ns&&!/^_+$/g.test(s)||(\\n// ...then just use the character codes of the title\\ns=\\\"\\\",$tw.utils.each(r.split(\\\"\\\"),(function(e){s&&(s+=\\\"-\\\"),s+=e.charCodeAt(0).toString()}))),\\\"yes\\\"===$tw.wiki.getTextReference(\\\"!!text\\\",\\\"yes\\\",\\\"$:/config/sq/OverwriteBinaryFiles\\\"))return t.resolve(n,s+l);var o,a=0;do{o=t.resolve(n,s+(a?\\\"_\\\"+a:\\\"\\\")+l),a++}while(e.existsSync(o));return o}}();\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/sq/ImportToExternalFile/startup.js\":{\"title\":\"$:/plugins/sq/ImportToExternalFile/startup.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/sq/ImportToExternalFile/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nThis adds a hook for the \\\"th-importing-tiddler\\\"\\n\\n\\\\*/\\n!function(){\\\"use strict\\\";exports.name=\\\"sq-server-images\\\",exports.platforms=[\\\"browser\\\"],exports.after=[\\\"render\\\"],exports.synchronous=!0,exports.startup=function(){function e(e){}function t(e){}function i(e){}function n(e){}$tw.hooks.addHook(\\\"th-importing-tiddler\\\",(function(a){if(\\\"yes\\\"!==$tw.wiki.getTextReference(\\\"!!text\\\",\\\"yes\\\",\\\"$:/config/sq/SaveAsExternalFile\\\"))return a;if([\\\"image/gif\\\",\\\"image/x-icon\\\",\\\"image/jpeg\\\",\\\"image/jpeg\\\",\\\"image/png\\\",\\\"image/svg+xml\\\",\\\"application/pdf\\\",\\\"application/zip\\\",\\\"application/font-woff\\\",\\\"application/x-font-ttf\\\",\\\"audio/ogg\\\",\\\"video/mp4\\\",\\\"audio/mp3\\\",\\\"audio/mp4\\\"].indexOf(a.fields.type)>-1&&!a.fields._canonical_uri){let d=new XMLHttpRequest;d.upload.addEventListener(\\\"progress\\\",e),d.upload.addEventListener(\\\"load\\\",t),d.upload.addEventListener(\\\"error\\\",i),d.upload.addEventListener(\\\"abort\\\",n),d.onreadystatechange=function(){if(4==this.readyState&&200==this.status){console.info(this.response);var e=null;try{e=JSON.parse(this.response)}catch(e){}if(e){let t=$tw.wiki.getTiddler(e.tiddler),i=e._canonical_uri;e._canonical_uri.startsWith(\\\"..\\\")&&(i=i.replace(\\\"..\\\",\\\".\\\")),$tw.wiki.addTiddler(new $tw.Tiddler(t,{_canonical_uri:i,text:\\\"\\\"}))}}};let l=\\\"/api/upload\\\";d.open(\\\"POST\\\",l,!0);var r={tiddler:a};d.setRequestHeader(\\\"X-Requested-With\\\",\\\"TiddlyWiki\\\"),d.send(JSON.stringify(r));var o={},s=\\\"/files/\\\"+a.fields.title;\\n//Use tw.utils.generateTiddlerFilePath //remove / etc from title\\nreturn o.title=a.fields.title,o.type=a.fields.type,o._canonical_uri=s,a}return a}))}}();\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/ui/ViewTemplate/import-external-files\":{\"title\":\"$:/core/ui/ViewTemplate/import-external-files\",\"tags\":\"$:/tags/ViewTemplate\",\"list-after\":\"$:/core/ui/ViewTemplate/import\",\"text\":\"<$list filter=\\\"[all[current]field:plugin-type[import]]\\\" variable=\\\"null\\\">\\n\\n<$checkbox tiddler=\\\"$:/config/sq/SaveAsExternalFile\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> Import binary files as external attachments</$checkbox>\\n\\n<$list filter=\\\"[{$:/config/sq/SaveAsExternalFile}match[yes]]\\\" variable=\\\"null\\\">\\n<$checkbox tiddler=\\\"$:/config/sq/OverwriteBinaryFiles\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> Overwrite binary files with the same name</$checkbox>\\n</$list>\\n\\n</$list>\"}}}"}