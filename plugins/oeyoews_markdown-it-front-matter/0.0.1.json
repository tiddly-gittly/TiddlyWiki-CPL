{"title":"$:/plugins/oeyoews/markdown-it-front-matter","description":"markdown-it-front-matter","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"markdown-it-front-matter","meat#disabled":"yes","qrcode":"yes","created":"2023-12-28","dependents":"","parent-plugin":"$:/plugins/oeyoews/markdown-extensions-startup","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/markdown-it-front-matter/readme\":{\"title\":\"$:/plugins/oeyoews/markdown-it-front-matter/readme\",\"text\":\"<!-- plugin template readme -->\\n\\n## Motivation\\n\\n<!-- your plugin motivation, or why you write this plugin -->\\n\",\"type\":\"text/markdown\",\"description\":\"markdown-it-front-matter\"},\"$:/plugins/oeyoews/markdown-it-abbr/markdown-it-front-matter.js\":{\"title\":\"$:/plugins/oeyoews/markdown-it-abbr/markdown-it-front-matter.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/markdown-it-abbr/markdown-it-front-matter.js\\ntype: application/javascript\\nmodule-type: markdownit\\nhide-body: yes\\n\\n\\\\*/\\n\\n// Process front matter and pass to cb\\n'use strict';\\n\\nmodule.exports = function front_matter_plugin(md) {\\n  var min_markers = 3,\\n    marker_str = '-',\\n    marker_char = marker_str.charCodeAt(0),\\n    marker_len = marker_str.length;\\n\\n  function frontMatter(state, startLine, endLine, silent) {\\n    var pos,\\n      nextLine,\\n      marker_count,\\n      token,\\n      old_parent,\\n      old_line_max,\\n      start_content,\\n      auto_closed = false,\\n      start = state.bMarks[startLine] + state.tShift[startLine],\\n      max = state.eMarks[startLine];\\n\\n    // Check out the first character of the first line quickly,\\n    // this should filter out non-front matter\\n    if (startLine !== 0 || marker_char !== state.src.charCodeAt(0)) {\\n      return false;\\n    }\\n\\n    // Check out the rest of the marker string\\n    // while pos <= 3\\n    for (pos = start + 1; pos <= max; pos++) {\\n      if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\\n        start_content = pos + 1;\\n        break;\\n      }\\n    }\\n\\n    marker_count = Math.floor((pos - start) / marker_len);\\n\\n    if (marker_count < min_markers) {\\n      return false;\\n    }\\n    pos -= (pos - start) % marker_len;\\n\\n    // Since start is found, we can report success here in validation mode\\n    if (silent) {\\n      return true;\\n    }\\n\\n    // Search for the end of the block\\n    nextLine = startLine;\\n\\n    for (;;) {\\n      nextLine++;\\n      if (nextLine >= endLine) {\\n        // unclosed block should be autoclosed by end of document.\\n        // also block seems to be autoclosed by end of parent\\n        break;\\n      }\\n\\n      if (state.src.slice(start, max) === '...') {\\n        break;\\n      }\\n\\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\\n      max = state.eMarks[nextLine];\\n\\n      if (start < max && state.sCount[nextLine] < state.blkIndent) {\\n        // non-empty line with negative indent should stop the list:\\n        // - ```\\n        //  test\\n        break;\\n      }\\n\\n      if (marker_char !== state.src.charCodeAt(start)) {\\n        continue;\\n      }\\n\\n      if (state.sCount[nextLine] - state.blkIndent >= 4) {\\n        // closing fence should be indented less than 4 spaces\\n        continue;\\n      }\\n\\n      for (pos = start + 1; pos <= max; pos++) {\\n        if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {\\n          break;\\n        }\\n      }\\n\\n      // closing code fence must be at least as long as the opening one\\n      if (Math.floor((pos - start) / marker_len) < marker_count) {\\n        continue;\\n      }\\n\\n      // make sure tail has spaces only\\n      pos -= (pos - start) % marker_len;\\n      pos = state.skipSpaces(pos);\\n\\n      if (pos < max) {\\n        continue;\\n      }\\n\\n      // found!\\n      auto_closed = true;\\n      break;\\n    }\\n\\n    old_parent = state.parentType;\\n    old_line_max = state.lineMax;\\n    state.parentType = 'container';\\n\\n    // this will prevent lazy continuations from ever going past our end marker\\n    state.lineMax = nextLine;\\n\\n    token = state.push('front_matter', null, 0);\\n    token.hidden = true;\\n    token.markup = state.src.slice(startLine, pos);\\n    token.block = true;\\n    token.map = [startLine, pos];\\n    token.meta = state.src.slice(start_content, start - 1);\\n\\n    state.parentType = old_parent;\\n    state.lineMax = old_line_max;\\n    state.line = nextLine + (auto_closed ? 1 : 0);\\n\\n    const metaLines = token.meta.split('\\\\n');\\n\\n    // TODO: how to get currentTiddler names\\n    // for (const line of metaLines) {\\n    //   const [key, value] = line.split(':');\\n    //   if (key === 'title') {\\n    //     continue;\\n    //   }\\n    //   $tw.wiki.setText('test-front-matter', key, null, value);\\n    // }\\n\\n    return true;\\n  }\\n\\n  md.block.ruler.before('table', 'front_matter', frontMatter, {\\n    alt: ['paragraph', 'reference', 'blockquote', 'list']\\n  });\\n};\\n\",\"type\":\"application/javascript\",\"module-type\":\"markdownit\",\"hide-body\":\"yes\"},\"$:/plugins/oeyoews/markdown-it-front-matter/widget.js\":{\"title\":\"$:/plugins/oeyoews/markdown-it-front-matter/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/markdown-it-front-matter/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nmarkdown-it-front-matter widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\n\\nclass ExampleWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    if (!$tw.browser) return;\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const createElement = $tw.utils.domMaker;\\n\\n    const btn = createElement('button', {\\n      text: 'click me',\\n      class: 'rounded p-1'\\n    });\\n\\n    const domNode = createElement('div', {\\n      text: 'example',\\n      class: 'underline font-bold',\\n      children: [btn]\\n    });\\n\\n    parent.insertBefore(domNode, nextSibling);\\n    this.domNodes.push(domNode);\\n  }\\n}\\n\\n/**\\n * @description markdown-it-front-matter widget\\n * @param xxx\\n */\\nexports.test = ExampleWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}