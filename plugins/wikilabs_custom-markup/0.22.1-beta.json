{"title":"$:/plugins/wikilabs/custom-markup","name":"Custom Markup","description":"Adds a possibilty to style text content with wikitext syntax","dependents":"$:/plugins/wikilabs/pragma-comment","version":"0.22.1-beta","list":"readme license history","stability":"STABILITY_1_EXPERIMENTAL","plugin-type":"plugin","type":"application/json","text":"{\"tiddlers\":{\"$:/config/custom-markup/pragma/PageTemplate\":{\"title\":\"$:/config/custom-markup/pragma/PageTemplate\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\importcustom [tag[$:/tags/Pragma]]\\n\\n<pre><$view /></pre>\"},\"$:/config/wikilabs/custom-markup/icons/glyphs/active\":{\"title\":\"$:/config/wikilabs/custom-markup/icons/glyphs/active\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"°\\\",\\n\\\"element\\\": \\\"<path d='m33.3 42.9q-8.31 0-14 5.82-5.72 5.72-5.72 14 0 8.21 5.72 13.9 5.72 5.61 14 5.61t14-5.61q5.72-5.72 5.72-13.9 0-8.21-5.82-14-5.72-5.82-13.9-5.82zm0-13.4q6.65 0 12.8 2.6 6.13 2.49 10.6 7.27 4.78 4.68 7.17 10.6t2.39 12.8q0 13.7-9.66 23.3-9.56 9.46-23.5 9.46-14 0-23.4-9.35-9.35-9.35-9.35-23.4 0-13.9 9.56-23.6 9.56-9.66 23.4-9.66z' style='stroke-width:5.32'/>\\\"\\n}\"},\"$:/config/ShortcutInfo/add-angle\":{\"title\":\"$:/config/ShortcutInfo/add-angle\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angle!!description}}\"},\"$:/config/ShortcutInfo/add-newline\":{\"title\":\"$:/config/ShortcutInfo/add-newline\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline!!description}}\"},\"$:/config/ShortcutInfo/open-block-dropdown\":{\"title\":\"$:/config/ShortcutInfo/open-block-dropdown\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/chooser-block!!description}}\"},\"$:/config/ShortcutInfo/remove-angle\":{\"title\":\"$:/config/ShortcutInfo/remove-angle\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angle!!description}}\"},\"$:/config/ShortcutInfo/remove-custom-markers\":{\"title\":\"$:/config/ShortcutInfo/remove-custom-markers\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers!!description}}\"},\"$:/config/ShortcutInfo/toggle-glyph\":{\"title\":\"$:/config/ShortcutInfo/toggle-glyph\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-glyph!!description}}\"},\"$:/config/ShortcutInfo/toggle-inline\":{\"title\":\"$:/config/ShortcutInfo/toggle-inline\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-inline!!description}}\"},\"$:/config/ShortcutInfo/toggle-tick\":{\"title\":\"$:/config/ShortcutInfo/toggle-tick\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick!!description}}\"},\"$:/config/shortcuts/add-angle\":{\"title\":\"$:/config/shortcuts/add-angle\",\"tags\":\"\",\"text\":\"\"},\"$:/config/shortcuts/add-glyph\":{\"title\":\"$:/config/shortcuts/add-glyph\",\"tags\":\"\",\"text\":\"ctrl-9\"},\"$:/config/shortcuts/add-newline\":{\"title\":\"$:/config/shortcuts/add-newline\",\"tags\":\"\",\"text\":\"ctrl-shift-Enter\"},\"$:/config/shortcuts/open-block-dropdown\":{\"title\":\"$:/config/shortcuts/open-block-dropdown\",\"tags\":\"\",\"text\":\"ctrl-6\"},\"$:/config/shortcuts/open-inline-dropdown\":{\"title\":\"$:/config/shortcuts/open-inline-dropdown\",\"tags\":\"\",\"text\":\"ctrl-7\"},\"$:/config/shortcuts/remove-angle\":{\"title\":\"$:/config/shortcuts/remove-angle\",\"tags\":\"\",\"text\":\"ctrl-shift-6\"},\"$:/config/shortcuts/remove-custom-markers\":{\"title\":\"$:/config/shortcuts/remove-custom-markers\",\"tags\":\"\",\"text\":\"ctrl-shift-7\"},\"$:/config/shortcuts/remove-glyph\":{\"title\":\"$:/config/shortcuts/remove-glyph\",\"tags\":\"\",\"text\":\"ctrl-shift-9\"},\"$:/config/shortcuts/toggle-glyph\":{\"title\":\"$:/config/shortcuts/toggle-glyph\",\"tags\":\"\",\"text\":\"ctrl-8\"},\"$:/config/shortcuts/toggle-inline\":{\"title\":\"$:/config/shortcuts/toggle-inline\",\"tags\":\"\",\"text\":\"ctrl-0\"},\"$:/config/shortcuts/toggle-tick\":{\"title\":\"$:/config/shortcuts/toggle-tick\",\"tags\":\"\",\"text\":\"ctrl-9\"},\"/config/WLCM/InlineSet/Config\":{\"title\":\"/config/WLCM/InlineSet/Config\",\"created\":\"20210915084029691\",\"modified\":\"20210915084041216\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import [[/config/WLCM/InlineSet/Config/Macros]]\\n\\n\\\\define characterRange() a b c d e f g h\\n\\n! Select an Inline Set\\n\\n<<selectSet>>\\n\\nThis configuration allows you to define \\\"inline snippets\\\" for the selected set\\n\\n<<main>>\"},\"/config/WLCM/InlineSet/Config/Macros\":{\"title\":\"/config/WLCM/InlineSet/Config/Macros\",\"created\":\"20210915084347555\",\"modified\":\"20210915084610911\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define selectSet()\\n\\\\whitespace trim\\n<$select class=\\\"wltc-selector-big\\\" tiddler=\\\"$:/config/WLCM/InlineSet/selected\\\" default=\\\"hugo\\\">\\n\\t<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/WL/Inline/Set]]\\\">\\n\\t\\t<option value=<<currentTiddler>>><$transclude field='caption'><$text text=<<currentTiddler>>/></$transclude></option>\\n\\t</$list>\\n</$select> <<linkSet>> <<addSet>>\\n\\\\end\\n\\n\\\\define linkSet() <$button to={{$:/config/WLCM/InlineSet/selected}} class=\\\"wltc-push-right wltc-btn-big tc-btn-invisible\\\" >{{$:/core/images/link}} </$button>\\n\\n\\\\define add-actions()\\n<$vars template={{$:/config/WLCM/InlineSet/selected}} >\\n<$action-sendmessage $message=\\\"tm-new-tiddler\\\" $param={{$:/config/WLCM/InlineSet/selected}}\\ntext={{{ [<template>get[text]] }}}\\ntags={{{ [<template>get[tags]] }}}\\ntype={{{ [<template>get[type]] }}}\\ncaption={{{ [<template>get[caption]] }}}\\n/>\\n</$vars>\\n\\\\end\\n\\n\\\\define addSet()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/InlineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=match text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\"wltc-push-right wltc-btn-big tc-btn-invisible\\\" actions=<<add-actions>> >{{$:/core/images/clone-button}}</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\n\\\\define enterAction()\\n\\t<$action-sendmessage $message=\\\"tm-new-tiddler\\\" \\n\\ttitle={{{ [<currentTiddler>get[text]] }}} \\n\\ttags=\\\"$:/tags/WL/Snippet/Inline\\\"\\n\\tprefix=\\\"/° \\\"\\n\\tsuffix=\\\"°/\\\"\\n\\tcaption=\\\"New Inline Snippet\\\" \\ntext='\\\"\\\"\\\"\\ncaption: <$text text={{!!caption}}/>\\nprefix: <$text text={{!!prefix}}/>\\nsuffix: <$text text={{!!suffix}}/>\\n\\\"\\\"\\\"'/>\\n\\t<$action-setfield $tiddler={{$:/config/WLCM/InlineSet/selected}}  $index=\\\"$(index)$\\\" $value={{{ [<currentTiddler>get[text]] }}} />\\n\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\\\end\\n\\n\\\\define cancelAction()\\n\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\\\end\\n\\n\\\\define keyAction()\\n<$list filter=\\\"[<event-key>match[Escape]]\\\" variable=none>\\n\\t<<cancelAction>>\\n</$list>\\n\\n<$list filter=\\\"[<event-key>match[Enter]]\\\" variable=none>\\n\\t<<enterAction>>\\n</$list>\\n\\\\end\\n\\n\\\\define editConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{ [[$:/temp/set-$(index)$]get[title]] }}}>\\n\\t<$list filter=\\\"[all[current]has[title]]\\\">\\n\\t\\t<$set name=keys filter=\\\"enter escape\\\">\\n\\t\\t\\t<$keyboard key=<<keys>> actions=<<keyAction>> >\\n\\t\\t\\t\\t<$edit-text tiddler=<<currentTiddler>> placeholder=\\\"- new inline prefix -\\\" tag=input class=\\\"wltc-small-push-right\\\" />\\n\\t\\t\\t</$keyboard>\\n\\t\\t</$set>\\n\\t\\t<$button class=\\\" wltc-small-push-right tc-btn-invisible\\\" disabled={{{ [<currentTiddler>get[text]has[title]then[yes]else[no]] }}}>{{$:/core/images/done-button}}\\n\\t\\t</$button>\\n\\t\\t<$button class=\\\" wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/close-button}}</$button>\\n\\t</$list>\\n</$set>\\n\\\\end\\n\\n\\\\define Warnings()\\n\\\\whitespace trim\\n<p>If the following list is empty, we are good to go!<p>\\n<table class=\\\"\\\">\\n\\t<$list filter='[{$:/config/WLCM/InlineSet/selected}keyvalues:value[]]'>\\n\\t\\t<$list filter=\\\"[<currentTiddler>!has[title]]\\\">\\n\\t\\t<tr>\\n\\t\\t\\t<td>Tiddler - <<currentTiddler>> - doesn't exist </td> <td>\\n\\t\\t\\t<$button >{{$:/core/images/new-button}}\\n\\t\\t\\t\\t<$action-sendmessage $message=\\\"tm-new-tiddler\\\" \\n\\t\\t\\t\\ttitle=<<currentTiddler>> \\n\\t\\t\\t\\ttags=\\\"$:/tags/WL/Snippet/Inline\\\" \\n\\t\\t\\t\\tprefix=\\\"/° \\\"\\n\\t\\t\\t\\tsuffix=\\\"°/\\\"\\n\\t\\t\\t\\tcaption=\\\"New Inline Snippet\\\" \\ntext='\\\"\\\"\\\"\\ncaption: <$text text={{!!caption}}/>\\nprefix: <$text text={{!!prefix}}/>\\nsuffix: <$text text={{!!suffix}}/>\\n\\\"\\\"\\\"' />\\n\\t\\t\\t</$button>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t\\t</$list>\\n\\t</$list>\\n</table>\\n\\\\end\\n\\n\\\\define element()\\n\\\\whitespace trim\\n<span class=\\\"wltc-gap-right wltc-font-mono\\\">$(index)$</span>\\n<$select class=\\\"wltc-tiny-push-down wltc-small-push-right\\\" tiddler={{$:/config/WLCM/InlineSet/selected}} index=\\\"$(index)$\\\" default='xxx'>\\n\\t<$list filter='[all[shadows+tiddlers]tag[$:/tags/WL/Snippet/Inline]]'>\\n\\t\\t<option value=<<currentTiddler>>>\\n\\t\\t\\t<$view field='caption'>{{{[<currentTiddler>!has[title]then[ - doesn't exist!]addprefix<currentTiddler>addprefix[Error - ]else<currentTiddler>]}}}</$view>\\n\\t\\t</option>\\n\\t</$list>\\n</$select>\\n\\\\end\\n\\n\\\\define linkConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/InlineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$set name=captionMissing value={{{[{$:/config/WLCM/InlineSet/selected}getindex<index>get[caption]then[]else[Info: caption is missing]]}}}>\\n\\t\\t<$reveal type=nomatch text=<<currentTiddler>>>\\n\\t\\t\\t<$button to=<<currentTiddler>> class=\\\"wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/link}}</$button><span class=\\\"wltc-small-push-right\\\"><<captionMissing>></span>\\n\\t\\t</$reveal>\\n\\t</$set>\\n</$set>\\n\\\\end\\n\\n\\\\define clearConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/InlineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=nomatch text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\"wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/delete-button}}\\n\\t\\t\\t<$action-confirm $message=\\\"Remove element: -$(index)$- from the set?\\\" >\\n\\t\\t\\t\\t<$action-setfield $tiddler={{$:/config/WLCM/InlineSet/selected}} $index=<<index>> />\\n\\t\\t\\t</$action-confirm>\\n\\t\\t</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\\\define addConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/InlineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=match text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\" wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/new-button}}\\n\\t\\t\\t<$action-setfield $tiddler={{{ [[$:/temp/set-$(index)$]] }}}  $field=\\\"\\\" />\\n\\t\\t</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\\\define main()\\n\\\\whitespace trim\\n<$set name=range filter=\\\"[range[1, 9]] 0 [enlist<characterRange>]\\\">\\n\\t<$set name=keys filter=\\\"\\\"\\\"[enlist<range>] enter escape\\\"\\\"\\\">\\n\\t\\t<$list filter=<<range>> variable=index>\\n\\t\\t\\t<<element>> <<addConfig>> <<editConfig>> <<clearConfig>> <<linkConfig>><br>\\n\\t\\t</$list>\\n\\t</$set>\\n</$set>\\n\\n<<Warnings>>\\n\\\\end\\n\\n<pre><code><$view /></code></pre>\"},\"$:/config/WLCM/LineSet/Config\":{\"title\":\"$:/config/WLCM/LineSet/Config\",\"created\":\"20210425113849845\",\"modified\":\"20210426141701028\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import [[$:/config/WLCM/LineSet/Config/Macros]]\\n\\n\\\\define characterRange() a b c d e f g h\\n\\n! Select a Prefix Set\\n\\n<<selectSet>>\\n\\nThis configuration allows you to define \\\"line prefixes\\\" for the selected set\\n\\n<<main>>\"},\"$:/config/WLCM/LineSet/Config/Macros\":{\"title\":\"$:/config/WLCM/LineSet/Config/Macros\",\"created\":\"20210422152632369\",\"modified\":\"20210426141425216\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define selectSet()\\n\\\\whitespace trim\\n<$select class=\\\"wltc-selector-big\\\" tiddler=\\\"$:/config/WLCM/LineSet/selected\\\" default='hugo'>\\n\\t<$list filter='[all[shadows+tiddlers]tag[$:/tags/WL/LinePrefix/Set]]'>\\n\\t\\t<option value=<<currentTiddler>>><$transclude field='caption'><$text text=<<currentTiddler>>/></$transclude></option>\\n\\t</$list>\\n</$select> <<linkSet>> <<addSet>>\\n\\\\end\\n\\n\\\\define linkSet() <$button to={{$:/config/WLCM/LineSet/selected}} class=\\\"wltc-push-right wltc-btn-big tc-btn-invisible\\\" >{{$:/core/images/link}} </$button>\\n\\n\\\\define add-actions()\\n<$vars template={{$:/config/WLCM/LineSet/selected}} >\\n<$action-sendmessage $message=\\\"tm-new-tiddler\\\" $param={{$:/config/WLCM/LineSet/selected}}\\ntext={{{ [<template>get[text]] }}} \\ntags={{{ [<template>get[tags]] }}} \\ntype={{{ [<template>get[type]] }}} \\ncaption={{{ [<template>get[caption]] }}} \\n/>\\n</$vars>\\n\\\\end\\n\\n\\\\define addSet()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/LineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=match text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\"wltc-push-right wltc-btn-big tc-btn-invisible\\\" actions=<<add-actions>> >{{$:/core/images/clone-button}}</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\\\define enterAction()\\n\\t<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title={{{ [<currentTiddler>get[text]] }}} tags=\\\"$:/tags/WL/Snippet/LinePrefix\\\" caption=\\\"New Line Prefix\\\" text=\\\"\\\" />\\n\\t<$action-setfield $tiddler={{$:/config/WLCM/LineSet/selected}}  $index=\\\"$(index)$\\\" $value={{{ [<currentTiddler>get[text]] }}} />\\n\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\\\end\\n\\n\\\\define cancelAction()\\n\\t<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n\\\\end\\n\\n\\\\define keyAction()\\n<$list filter=\\\"[<event-key>match[Escape]]\\\" variable=none>\\n\\t<<cancelAction>>\\n</$list>\\n\\n<$list filter=\\\"[<event-key>match[Enter]]\\\" variable=none>\\n\\t<<enterAction>>\\n</$list>\\n\\\\end\\n\\n\\\\define editConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{ [[$:/temp/set-$(index)$]get[title]] }}}>\\n\\t<$list filter=\\\"[all[current]has[title]]\\\">\\n\\t\\t<$set name=keys filter=\\\"enter escape\\\">\\n\\t\\t\\t<$keyboard key=<<keys>> actions=<<keyAction>> >\\n\\t\\t\\t\\t<$edit-text tiddler=<<currentTiddler>> placeholder=\\\"- new line prefix -\\\" tag=input class=\\\"wltc-small-push-right\\\" />\\n\\t\\t\\t</$keyboard>\\n\\t\\t</$set>\\n\\t\\t<$button actions=<<enterAction>> class=\\\" wltc-small-push-right tc-btn-invisible\\\" disabled={{{ [<currentTiddler>get[text]has[title]then[yes]else[no]] }}}>{{$:/core/images/done-button}} </$button>\\n\\t\\t<$button class=\\\" wltc-small-push-right tc-btn-invisible\\\" actions=<<cancelAction>> >{{$:/core/images/close-button}}</$button>\\n\\t</$list>\\n</$set>\\n\\\\end\\n\\n\\\\define Warnings()\\n\\\\whitespace trim\\n<p>If the following list is empty, we are good to go!<p>\\n<table class=\\\"\\\">\\n\\t<$list filter='[{$:/config/WLCM/LineSet/selected}keyvalues:value[]]'>\\n\\t\\t<$list filter=\\\"[<currentTiddler>!has[title]]\\\">\\n\\t\\t<tr>\\n\\t\\t\\t<td>Tiddler - <<currentTiddler>> - doesn't exist </td> <td>\\n\\t\\t\\t<$button >{{$:/core/images/new-button}}\\n\\t\\t\\t\\t<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=<<currentTiddler>> tags=\\\"$:/tags/WL/Snippet/LinePrefix\\\" caption=\\\"New Line Prefix\\\" text=\\\"\\\" />\\n\\t\\t\\t</$button>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t\\t</$list>\\n\\t</$list>\\n</table>\\n\\\\end\\n\\n\\\\define element()\\n\\\\whitespace trim\\n<span class=\\\"wltc-gap-right wltc-font-mono\\\">$(index)$</span>\\n<$select class=\\\"wltc-tiny-push-down wltc-small-push-right\\\" tiddler={{$:/config/WLCM/LineSet/selected}} index=\\\"$(index)$\\\" default='xxx'>\\n\\t<$list filter='[all[shadows+tiddlers]tag[$:/tags/WL/Snippet/LinePrefix]]'>\\n\\t\\t<option value=<<currentTiddler>>>\\n\\t\\t\\t<$transclude field='caption'>{{{[<currentTiddler>!has[title]then[ - doesn't exist!]addprefix<currentTiddler>addprefix[Error - ]else<currentTiddler>]}}}</$transclude>\\n\\t\\t</option>\\n\\t</$list>\\n</$select>\\n\\\\end\\n\\n\\\\define linkConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/LineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$set name=captionMissing value={{{[{$:/config/WLCM/LineSet/selected}getindex<index>get[caption]then[]else[Info: caption is missing]]}}}>\\n\\t\\t<$reveal type=nomatch text=<<currentTiddler>>>\\n\\t\\t\\t<$button to=<<currentTiddler>> class=\\\"wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/link}}</$button><span class=\\\"wltc-small-push-right\\\"><<captionMissing>></span>\\n\\t\\t</$reveal>\\n\\t</$set>\\n</$set>\\n\\\\end\\n\\n\\\\define clearConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/LineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=nomatch text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\"wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/delete-button}}\\n\\t\\t\\t<$action-confirm $message=\\\"Remove element: -$(index)$- from the set?\\\" >\\n\\t\\t\\t\\t<$action-setfield $tiddler={{$:/config/WLCM/LineSet/selected}} $index=<<index>> />\\n\\t\\t\\t</$action-confirm>\\n\\t\\t</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\\\define addConfig()\\n\\\\whitespace trim\\n<$set name=currentTiddler value={{{[{$:/config/WLCM/LineSet/selected}getindex<index>get[title]]}}}>\\n\\t<$reveal type=match text=<<currentTiddler>>>\\n\\t\\t<$button class=\\\" wltc-small-push-right tc-btn-invisible\\\">{{$:/core/images/new-button}}\\n\\t\\t\\t<$action-setfield $tiddler={{{ [[$:/temp/set-$(index)$]] }}}  $field=\\\"\\\" />\\n\\t\\t</$button>\\n\\t</$reveal>\\n</$set>\\n\\\\end\\n\\n\\\\define main()\\n\\\\whitespace trim\\n<$set name=range filter=\\\"[range[1, 9]] 0 [enlist<characterRange>]\\\">\\n\\t<$set name=keys filter=\\\"\\\"\\\"[enlist<range>] enter escape\\\"\\\"\\\">\\n\\t\\t<$list filter=<<range>> variable=index>\\n\\t\\t\\t<<element>> <<addConfig>> <<editConfig>> <<clearConfig>> <<linkConfig>><br>\\n\\t\\t</$list>\\n\\t</$set>\\n</$set>\\n\\n<<Warnings>>\\n\\\\end\\n\\n<pre><code><$view /></code></pre>\"},\"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-glyph.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-glyph.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/add-glyph.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"add-glyph\\\"] = function(event,operation) {\\n\\tvar x=\\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0\\n\\t\\t\\tx = \\\"\\\";\\n\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t\\tcount++;\\n\\t\\t\\tx += prefix;\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\t// Apply the prefix\\n\\t\\tif (event.paramObject && event.paramObject.force === \\\"yes\\\") {\\n\\t\\t\\tline = x + prefix + \\\" \\\" + line;\\n\\t\\t} else {\\n\\t\\t\\tline = (line === \\\"\\\") ? line : x + prefix + \\\" \\\" + line;\\n\\t\\t}\\n//\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"add-newline\\\"] = function(event,operation) {\\n\\tvar x = \\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0;\\n//\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n//\\t\\t\\tline = line.substring(1);\\n//\\t\\t\\tcount++;\\n//\\t\\t\\tx += prefix;\\n//\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\t// Apply the prefix\\n\\t\\tline =  line + prefix;\\n//\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node:true, browser: true */\\n/*global $tw:false exports:false */\\n\\\"use strict\\\";\\n\\nexports[\\\"remove-custom-markers\\\"] = function(event,operation) {\\n\\t// regExp to detect custom markers like: \\n\\t// <ID><symol><class> some text\\n\\t// ´span.myClass.otherClass some text\\n\\tvar regExp = /((?=´[^´])´|[»≈]{1,4}|(?=°[^°])°|(?=›[^›])›|(?=¶[^¶])¶)((?:[^\\\\.\\\\r\\\\n\\\\s´°]+))?(\\\\.(?:[^\\\\r\\\\n\\\\s]+))?/mg;\\n\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\n\\tvar test = \\\"›´°_»≈\\\";\\n\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\tvar fragments = line.split(\\\" \\\");\\n\\t\\tvar match = fragments[0].match(regExp); \\n\\n\\t\\tif (match && (fragments[0] === match[0])) {\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\n\\t\\t} else if (!match && (test.indexOf(fragments[0]) !== -1)) {\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\n\\t\\t} else {\\n\\t\\t\\tline = fragments.join(\\\" \\\");\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t}); \\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"remove-tick\\\"] = function(event,operation) {\\n\\tvar x = \\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0;\\n\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t\\tcount++;\\n\\t\\t\\tx += prefix;\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\tif(x === \\\"\\\") {\\n\\t\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\t\\tline = line.substring(1);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tline =  x.substring(1) + \\\" \\\" + line;\\n\\t\\t\\tx = \\\"\\\";\\n\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false exports:false */\\n\\\"use strict\\\";\\n\\nexports[\\\"toggle-tick\\\"] = function(event,operation) {\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines,\\n\\t\\ttext = operation.text.substring(operation.cutStart,operation.cutEnd);\\n\\tif (text === \\\"\\\\n\\\" || text === \\\"\\\\r\\\\n\\\") {\\n\\t\\tif (operation.cutEnd < operation.cutStart) {\\n\\t\\t\\tvar x = operation.cutEnd;\\n\\t\\t\\toperation.cutEnd = operation.cutStart\\n\\t\\t\\toperation.cutStart = x;\\n\\t\\t}\\n\\t\\tlines = [\\\"\\\"]; // only 1 line should be used\\n\\t} else {\\n\\t\\tlines = text.split(/\\\\r?\\\\n/mg);\\n\\t}\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar addPrefix = true;\\n\\t\\tvar fragments = line.split(\\\" \\\");\\n\\t\\tif (fragments[0] === event.paramObject.character) {\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\n\\t\\t\\taddPrefix = false\\n\\t\\t} else {\\n\\t\\t\\tline = fragments.join(\\\" \\\");\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\tif(addPrefix) {\\n\\t\\t\\t// Apply the prefix\\n\\t\\t\\tif (event.paramObject && event.paramObject.force === \\\"yes\\\") {\\n\\t\\t\\t\\tline = prefix + \\\" \\\" + line;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tline = (line === \\\"\\\") ? line : prefix + \\\" \\\" + line;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t}); \\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/tags/EditorToolbar\":{\"title\":\"$:/tags/EditorToolbar\",\"created\":\"20200830174644399\",\"list\":\"$:/core/ui/EditorToolbar/paint $:/core/ui/EditorToolbar/opacity $:/core/ui/EditorToolbar/line-width $:/core/ui/EditorToolbar/rotate-left $:/core/ui/EditorToolbar/clear $:/core/ui/EditorToolbar/bold $:/core/ui/EditorToolbar/italic $:/core/ui/EditorToolbar/strikethrough $:/core/ui/EditorToolbar/underline $:/core/ui/EditorToolbar/superscript $:/core/ui/EditorToolbar/subscript $:/core/ui/EditorToolbar/mono-line $:/core/ui/EditorToolbar/linkify $:/core/ui/EditorToolbar/transcludify $:/core/ui/EditorToolbar/mono-block $:/core/ui/EditorToolbar/quote $:/core/ui/EditorToolbar/list-bullet $:/core/ui/EditorToolbar/list-number $:/core/ui/EditorToolbar/heading-1 $:/core/ui/EditorToolbar/heading-2 $:/core/ui/EditorToolbar/heading-3 $:/core/ui/EditorToolbar/heading-4 $:/core/ui/EditorToolbar/heading-5 $:/core/ui/EditorToolbar/heading-6 $:/core/ui/EditorToolbar/link $:/core/ui/EditorToolbar/excise $:/core/ui/EditorToolbar/picture $:/core/ui/EditorToolbar/stamp $:/core/ui/EditorToolbar/size $:/core/ui/EditorToolbar/editor-height $:/core/ui/EditorToolbar/more $:/core/ui/EditorToolbar/preview $:/core/ui/EditorToolbar/preview-type $:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline $:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angle $:/plugins/wikilabs/custom-markup/EditorToolbar/add-angle $:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers $:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick $:/plugins/wikilabs/custom-markup/EditorToolbar/preview-type\",\"modified\":\"20200915223100053\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angle\",\"caption\":\"add-angle\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"Add a \\\"angle bracket\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/angle-plus\",\"shortcuts\":\"((add-angle))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-glyph\\\"\\n\\tcharacter=\\\"»\\\"\\n\\tcount=\\\"1\\\"\\n\\tforce=\\\"no\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-glyph\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-glyph\",\"caption\":\"add-glyph\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"condition-disabled\":\"[[$:/config/wikilabs/custom-markup/icons/glyphs/active]getindex[disabled]else[yes]]\",\"description\":\"Add a \\\"glyph\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-plus\",\"shortcuts\":\"((add-glyph))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-glyph\\\"\\n\\tcharacter={{$:/config/wikilabs/custom-markup/icons/glyphs/active##glyph}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}]  ~[[no]] }}}\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline\",\"caption\":\"add-newline\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"Adds a newline character at the end of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/add-newline\",\"shortcuts\":\"((add-newline))\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-newline\\\"\\n\\tcharacter=\\\"\\n\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-tick\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-tick\",\"caption\":\"add-tick\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"created\":\"20200830145744005\",\"description\":\"Add a \\\"tick\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/tick-plus\",\"modified\":\"20200913204237400\",\"shortcuts\":\"((add-tick))\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-glyph\\\"\\n\\tcharacter={{{ [[$:/config/edit/linePrefix]get[text]] }}}\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/chooser-block\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/chooser-block\",\"button-classes\":\"tc-text-editor-toolbar-item-adjunct\",\"caption\":\"choose glyph\",\"condition\":\"[all[shadows+tiddlers]tag[$:/tags/EditPreview]!has[draft.of]butfirst[]limit[1]]\",\"description\":\"Choose Line Glyph\",\"dropdown\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\",\"icon\":\"$:/core/images/chevron-down\",\"tags\":\"$:/tags/EditorToolbar\",\"shortcuts\":\"((open-block-dropdown))\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/chooser-inline\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/chooser-inline\",\"button-classes\":\"tc-text-editor-toolbar-item-adjunct\",\"caption\":\"choose inline glyph\",\"condition\":\"[all[shadows+tiddlers]tag[$:/tags/EditPreview]!has[draft.of]butfirst[]limit[1]]\",\"description\":\"Choose Inline Glyph\",\"dropdown\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown\",\"icon\":\"$:/core/images/chevron-down\",\"tags\":\"$:/tags/EditorToolbar\",\"shortcuts\":\"((open-inline-dropdown))\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers\",\"caption\":\"remove-all-markers\",\"tags\":\"$:/tags/EditorToolbar\",\"shortcuts\":\"((remove-custom-markers))\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\",\"description\":\"Remove every \\\"custom marker\\\" from the selected line(s)\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-custom-markers\\\"\\n\\tcharacter=\\\"*\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define getConfigName() $:/plugins/wikilabs/custom-markup/icons/inline/$(__name__)$\\n\\n\\\\define selectID()\\n<$action-createtiddler \\n\\t$basetitle=\\\"$:/config/wikilabs/custom-markup/icons/inline/active\\\"\\n\\t$overwrite=\\\"yes\\\" $template=<<getConfigName>>\\n/>\\n\\\\end\\n\\\\define selectActions()\\n<$action-createtiddler $basetitle=\\\"$:/config/edit/inlinePrefix\\\" $overwrite=\\\"yes\\\" $template=\\\"\\\"\\\"$(inlinePrefix)$\\\"\\\"\\\"\\n\\tname=\\\"\\\"\\\"$(inlinePrefix)$\\\"\\\"\\\"\\n\\ttags=\\\"\\\"\\n/>\\n<$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param={{{ [{$:/config/wikilabs/custom-markup/icons/inline/active##prefix}addsuffix{$:/config/edit/inlinePrefix!!text}addsuffix{$:/config/wikilabs/custom-markup/icons/inline/active##suffix}] }}}/>\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\\\"/>\\n<$action-deletetiddler $tiddler=<<dropdown-state>> />\\n\\n<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [{$:/config/edit/inlinePrefix##prefix}addsuffix[ ]] ~[[/° ]] }}}\\n\\tsuffix={{{ [{$:/config/edit/inlinePrefix##suffix}] ~[[°/]]}}}\\n/>\\n\\n\\\\end\\n\\n\\\\define idSelector()\\n<$tiddler tiddler=\\\"$:/config/edit/inlinePrefix/xx\\\">\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"/°\\\" actions=<<selectID>> name=\\\"slash\\\"> `/°..°/` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"⠒\\\" actions=<<selectID>> name=\\\"braille\\\"> `⠒..⠶` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"❮\\\" actions=<<selectID>> name=\\\"corner\\\"> `❮..❯` </$wl-radio>|\\n</$tiddler>\\n\\\\end\\n\\n\\\\define preview-type-button()\\n<$button tag=\\\"a\\\" class=\\\"wltc-snippet-inline\\\" actions=<<selectActions>> >\\n\\n<$transclude tiddler=<<inlinePrefix>> field=\\\"caption\\\" mode=\\\"inline\\\">\\n\\n<$view tiddler=<<inlinePrefix>> field=\\\"title\\\" mode=\\\"inline\\\"/>\\n\\n</$transclude> \\n\\n<$reveal tag=\\\"span\\\" stateTitle=\\\"$:/config/edit/inlinePrefix\\\" stateField=name type=\\\"match\\\" text=<<inlinePrefix>> default=\\\"XXXXX\\\">\\n\\n<$entity entity=\\\"&nbsp;\\\"/>\\n\\n<$entity entity=\\\"&#x2713;\\\"/>\\n\\n</$reveal>\\n\\n</$button>\\n\\\\end\\n\\nSelect inline glyph -- <$macrocall $name=idSelector />\\n\\n----\\n\\n<$transclude tiddler=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown/snippet-selector\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TextEditor/InlinePrefix]!has[draft.of]sort[title]]\\\" variable=\\\"inlinePrefix\\\">\\n\\n<<preview-type-button>>\\n\\n</$list>\\n\\n----\\n\\n<$button tag=\\\"a\\\">\\n\\n<$action-sendmessage\\n\\t$message=\\\"tm-new-tiddler\\\"\\n\\ttags=\\\"$:/tags/TextEditor/InlinePrefix\\\"\\n\\ttype=\\\"application/x-tiddler-dictionary\\\"\\n\\tcaption=\\\"New Inline Prefix\\\"\\n\\ttext=\\\"prefix: \\nsuffix: \\\"\\n/>\\n\\n<$action-deletetiddler \\n\\t$tiddler=<<dropdown-state>> \\n/>\\n\\n<em>\\n\\n<$text text={{$:/language/Buttons/Stamp/Caption/New}}/>\\n\\n</em>\\n\\n</$button>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown/snippet-selector\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown/snippet-selector\",\"created\":\"20210419150632308\",\"modified\":\"20210424141436922\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import \\\"[[$:/plugins/wikilabs/custom-markup/EditorToolbar/inline-dropdown]]\\\"\\n\\\\whitespace trim\\n\\n<!-- debug helper -->\\n\\\\define notify(key)\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"test-note\\\" index=$key$/>\\n\\\\end\\n\\n\\\\define actionKey()\\n<$list filter=\\\"[<key>match[Escape]]\\\" variable=none>\\n</$list>\\n\\n<$list filter=\\\"[<key>match[Enter]]\\\" variable=none>\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [{$:/config/WLCM/inline/default}get[prefix]addsuffix[ ]] ~[[/° ]] }}}\\n\\tsuffix={{{ [{$:/config/WLCM/inline/default}get[suffix]] ~[[°/]]}}}\\n/>\\n</$list>\\n\\n<$list filter=\\\"[<key>!match[Escape]!match[Enter]]\\\" variable=none>\\n<$action-createtiddler $basetitle=\\\"$:/config/WLCM/inline/default\\\" $overwrite=yes text={{{ [{$:/config/WLCM/InlineSet/selected}getindex<key>] }}}  />\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [{$:/config/WLCM/inline/default}get[prefix]addsuffix[ ]] ~[[/° ]] }}}\\n\\tsuffix={{{ [{$:/config/WLCM/inline/default}get[suffix]] ~[[°/]]}}}\\n/>\\n</$list>\\n\\n<$action-deletetiddler $tiddler=\\\"$:/state/EditorToolbarDropdown--124516744\\\"/>\\n\\\\end\\n\\n\\\\define actionClick()\\n<$action-createtiddler $basetitle=\\\"$:/config/WLCM/inline/default\\\" $overwrite=yes text={{{ [{$:/config/WLCM/InlineSet/selected}getindex<key>] }}}  />\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [{$:/config/WLCM/inline/default}get[prefix]addsuffix[ ]] ~[[/° ]] }}}\\n\\tsuffix={{{ [{$:/config/WLCM/inline/default}get[suffix]] ~[[°/]]}}}\\n/>\\n\\\\end\\n\\n<$select class=\\\"wltc-selector\\\" tiddler=\\\"$:/config/WLCM/InlineSet/selected\\\" default='xxx'>\\n\\t<$list filter='[all[shadows+tiddlers]tag[$:/tags/WL/Inline/Set]]'>\\n\\t\\t<option value=<<currentTiddler>>><$transclude field='caption'><$text text=<<currentTiddler>>/></$transclude></option>\\n\\t</$list>\\n</$select>\\n\\n<hr>\\n\\n<$set name=range filter=\\\"[{$:/config/WLCM/InlineSet/selected}keyvalues:key[]]\\\">\\n<$set name=keys filter=\\\"\\\"\\\"[enlist<range>] enter escape\\\"\\\"\\\">\\n<span class=\\\"fr\\\">\\n\\t<$button to=\\\"/config/WLCM/InlineSet/Config\\\" class=\\\"tc-btn-invisible\\\" tag=a>\\n\\t\\t{{$:/core/images/options-button}}\\n\\t</$button>\\n</span>\\n<$wl-keyboard key=<<keys>> actions=<<actionKey>> >\\n\\t<$list filter=<<range>> variable=key>\\n\\t\\t<$tiddler tiddler={{{[{$:/config/WLCM/InlineSet/selected}getindex<key>has[title]else[Error - Tiddler doesn't exist]]}}}>\\n\\t\\t\\t-<<key>>-&nbsp;:&nbsp;\\n\\t\\t\\t<span class=\\\"wltc-snippet \\\">\\n\\t\\t\\t<$button class=\\\"tc-btn-invisible\\\" actions=<<actionClick>> >\\n\\t\\t\\t\\t<$view field=\\\"caption\\\">&nbsp;<$transclude field=title/></$view>\\n\\t\\t\\t</$button>\\n\\t\\t\\t</span><br>\\n\\t\\t</$tiddler>\\n\\t</$list><br>\\n\\tEnter:&nbsp;<$edit-text tiddler=\\\"$:/config/WLCM/inline/default\\\" placeholder=\\\"- hit key -\\\" tag=input disabled=yesX focus />\\n</$wl-keyboard>\\n</$set>\\n</$set>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\",\"text\":\"ID Button prepared!<br>\\nContent copied to clipboard!\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/snippet-prepared\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/snippet-prepared\",\"text\":\"Snipped copied to clipboard!\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\",\"text\":\"\\\\define getConfigName() $:/plugins/wikilabs/custom-markup/icons/glyphs/$(__name__)$\\n\\n\\\\define selectID()\\n<$action-createtiddler $basetitle=\\\"$:/config/wikilabs/custom-markup/icons/glyphs/active\\\" $overwrite=\\\"yes\\\" $template=<<getConfigName>> />\\n\\\\end\\n\\\\define selectActions()\\n<$action-createtiddler $basetitle=\\\"$:/config/edit/linePrefix\\\" $overwrite=\\\"yes\\\" \\n\\t\\ttext={{{ [<linePrefix>get[text]] }}}\\n\\t\\tname=\\\"\\\"\\\"$(linePrefix)$\\\"\\\"\\\" \\n\\t\\tid={{{ [{$:/config/wikilabs/custom-markup/icons/glyphs/active##glyph}] ~[[´]] }}}\\n/>\\n<$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param={{{ [{$:/config/edit/linePrefix!!text}] }}}/>\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\\\"/>\\n<$action-deletetiddler $tiddler=<<dropdown-state>> />\\n<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\"\\n\\tcharacter={{{ [[$:/config/edit/linePrefix]get[text]] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}] ~[[no]] }}}\\n/>\\n\\\\end\\n\\n\\\\define idSelector()\\n<$tiddler tiddler=\\\"$:/config/edit/linePrefix\\\">\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"›\\\" actions=<<selectID>> name=\\\"single\\\"> `›` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"´\\\" actions=<<selectID>> name=\\\"tick\\\"> `´` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"°\\\" actions=<<selectID>> name=\\\"degree\\\"> `°` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"»\\\" actions=<<selectID>> name=\\\"angle\\\"> `»` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"≈\\\" actions=<<selectID>> name=\\\"approx\\\"> `≈` </$wl-radio>|\\n\\t<$wl-radio field=\\\"id\\\" value=\\\"¶\\\" actions=<<selectID>> name=\\\"pilcrow\\\"> `¶` </$wl-radio>|\\n</$tiddler>\\n<$checkbox tiddler=\\\"$:/config/edit/linePrefix/force\\\" \\n\\tfield=text \\n\\tchecked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\" > Use empty lines\\n</$checkbox>\\n\\\\end\\n\\n\\\\define preview-type-button()\\n<$button tag=\\\"a\\\" class=\\\"wltc-snippet-block\\\" actions=<<selectActions>> >\\n\\n\\t<$transclude tiddler=<<linePrefix>> field=\\\"caption\\\" mode=\\\"inline\\\">\\n\\n\\t\\t<$view tiddler=<<linePrefix>> field=\\\"title\\\" mode=\\\"inline\\\"/>\\n\\n\\t</$transclude>\\n\\n\\t<$reveal tag=\\\"span\\\" stateTitle=\\\"$:/config/edit/linePrefix\\\" stateField=name type=\\\"match\\\" text=<<linePrefix>> default=\\\"XXXXX\\\">\\n\\n\\t\\t<$entity entity=\\\"&nbsp;\\\"/>\\n\\n\\t\\t<$entity entity=\\\"&#x2713;\\\"/>\\n\\n\\t</$reveal>\\n\\n</$button>\\n\\\\end\\n\\nSelect glyph -- <$macrocall $name=idSelector />\\n\\n---\\n\\n<$transclude tiddler=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown/snippet-selector\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/WL/Snippet/LinePrefix]!has[draft.of]sort[title]]\\\" variable=\\\"linePrefix\\\">\\n\\n<<preview-type-button>>\\n\\n</$list>\\n\\n---\\n\\n<$button tag=\\\"a\\\" class=\\\"wltc-snippet-block\\\">\\n\\n<$action-sendmessage\\n\\t$message=\\\"tm-new-tiddler\\\"\\n\\ttags=\\\"$:/tags/WL/Snippet/LinePrefix\\\"\\n\\tcaption=\\\"New Line Prefix\\\"\\n\\ttext=\\\"\\\"\\n/>\\n\\n<$action-deletetiddler $tiddler=<<dropdown-state>> />\\n\\n<em>\\n\\n<$text text=\\\"Add a new configuration!\\\"/>\\n\\n</em>\\n\\n</$button>\\n\\n</$transclude>\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown/snippet-selector\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown/snippet-selector\",\"created\":\"20210419150632308\",\"modified\":\"20210424141436922\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import \\\"[[$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown]]\\\"\\n\\\\whitespace trim\\n\\n<!-- debug helper -->\\n\\\\define notify(key)\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"test-note\\\" index=$key$/>\\n\\\\end\\n\\n<!-- not used atm -->\\n\\\\define copyToClipboard()\\n<$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param={{{ [[$:/config/WLCM/edit-default]get[text]get[text]] }}}/>\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/snippet-prepared\\\"/>\\n\\\\end\\n\\n\\\\define actionKey()\\n<$list filter=\\\"[<key>match[Escape]]\\\" variable=none>\\n</$list>\\n\\n<$list filter=\\\"[<key>match[Enter]]\\\" variable=none>\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\" \\n\\tcharacter={{{ [[$:/config/WLCM/edit-default]get[text]get[text]] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}] ~[[no]] }}} \\n/>\\n</$list>\\n\\n<$list filter=\\\"[<key>!match[Escape]!match[Enter]]\\\" variable=none>\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\" \\n\\tcharacter={{{ [{$:/config/WLCM/LineSet/selected}getindex<key>get[text]] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}] ~[[no]] }}} \\n/>\\n<$action-createtiddler $basetitle=\\\"$:/config/WLCM/edit-default\\\" $overwrite=yes text={{{ [{$:/config/WLCM/LineSet/selected}getindex<key>] }}}  />\\n</$list>\\n\\n<$action-deletetiddler $tiddler=\\\"$:/state/EditorToolbarDropdown--124516744\\\"/>\\n\\\\end\\n\\n\\\\define actionClick()\\n<$action-sendmessage $message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\"\\n\\tcharacter={{{ [{$:/config/WLCM/LineSet/selected}getindex<key>get[text]] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}] ~[[no]] }}}\\n/>\\n<$action-createtiddler $basetitle=\\\"$:/config/WLCM/edit-default\\\" $overwrite=yes text={{{ [{$:/config/WLCM/LineSet/selected}getindex<key>] }}}  />\\n\\\\end\\n\\n<$select class=\\\"wltc-selector\\\" tiddler=\\\"$:/config/WLCM/LineSet/selected\\\" default='xxx'>\\n\\t<$list filter='[all[shadows+tiddlers]tag[$:/tags/WL/LinePrefix/Set]]'>\\n\\t\\t<option value=<<currentTiddler>>><$transclude field='caption'><$text text=<<currentTiddler>>/></$transclude></option>\\n\\t</$list>\\n</$select>\\n\\n<hr>\\n\\n<$set name=range filter=\\\"[{$:/config/WLCM/LineSet/selected}keyvalues:key[]sort[]]\\\">\\n<$set name=keys filter=\\\"\\\"\\\"[enlist<range>] enter escape\\\"\\\"\\\">\\n<span class=\\\"fr\\\">\\n\\t<$button to=\\\"$:/config/WLCM/LineSet/Config\\\" class=\\\"tc-btn-invisible\\\" tag=a>\\n\\t\\t{{$:/core/images/options-button}}\\n\\t</$button>\\n</span>\\n<$wl-keyboard key=<<keys>> actions=<<actionKey>> >\\n\\t<$list filter=<<range>> variable=key>\\n\\t\\t<$tiddler tiddler={{{[{$:/config/WLCM/LineSet/selected}getindex<key>has[title]else[Error - Tiddler doesn't exist]]}}}>\\n\\t\\t\\t-<<key>>-&nbsp;:&nbsp;\\n\\t\\t\\t<span class=\\\"wltc-snippet \\\">\\n\\t\\t\\t<$button class=\\\"tc-btn-invisible\\\" actions=<<actionClick>> >\\n\\t\\t\\t\\t<$transclude field=caption>&nbsp;<$transclude field=title/></$transclude>\\n\\t\\t\\t</$button>\\n\\t\\t\\t</span><br>\\n\\t\\t</$tiddler>\\n\\t</$list><br>\\n\\tEnter:&nbsp;<$edit-text tiddler=\\\"$:/config/WLCM/edit-default\\\" placeholder=\\\"- hit key -\\\" tag=input disabled=yesX focus />\\n</$wl-keyboard>\\n</$set>\\n</$set>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angle\",\"caption\":\"remove-angle\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"Remove a \\\"angle bracket\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/angle-minus\",\"shortcuts\":\"((remove-angle))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-tick\\\"\\n\\tcharacter=\\\"»\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-glyph\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-glyph\",\"caption\":\"remove-glyph\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"Remove a \\\"glyph\\\" at the start of the selected line(s)\",\"condition-disabled\":\"[[$:/config/wikilabs/custom-markup/icons/glyphs/active]getindex[disabled]else[yes]]\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-minus\",\"shortcuts\":\"((remove-glyph))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-tick\\\"\\n\\tcharacter={{$:/config/wikilabs/custom-markup/icons/glyphs/active##glyph}}\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-tick\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-tick\",\"caption\":\"remove-tick\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"created\":\"20200830155036038\",\"description\":\"Remove a \\\"tick\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/tick-minus\",\"modified\":\"20200914083802568\",\"shortcuts\":\"((remove-tick))\",\"tags\":\"$:/tags/EditorToolbarXXX\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-tick\\\"\\n\\tcharacter=\\\"´\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-glyph\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-glyph\",\"caption\":\"toggle-glyph\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]] [<targetTiddler>type[application/x-tiddler-dictionary]]\",\"description\":\"Toggle the \\\"glyph\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-toggle\",\"shortcuts\":\"((toggle-glyph))\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\"\\n\\tcharacter={{{ [{$:/config/wikilabs/custom-markup/icons/glyphs/active##glyph}] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}]  ~[[no]] }}}\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-inline\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-inline\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/inline-toggle\",\"caption\":\"inline\",\"description\":\"wrap selection\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]] [<targetTiddler>type[application/x-tiddler-dictionary]]\",\"shortcuts\":\"((toggle-inline))\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [{$:/config/wikilabs/custom-markup/icons/inline/active##prefix}addsuffix[ ]] ~[[/° ]] }}}\\n\\tsuffix={{{ [{$:/config/wikilabs/custom-markup/icons/inline/active##suffix}] ~[[°/]]}}}\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick\":{\"title\":\"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick\",\"caption\":\"toggle-ID\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"Toggle the \\\"ID\\\" at the start of the selected line(s)\",\"icon\":\"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\",\"shortcuts\":\"((toggle-tick))\",\"tags\":\"$:/tags/EditorToolbarXXX\",\"text\":\"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\"\\n\\tcharacter={{{ [{$:/config/edit/linePrefix!!id}addsuffix{$:/config/edit/linePrefix!!text}] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix/force}] ~[[no]] }}}\\n/>\\n\"},\"$:/plugins/wikilabs/custom-markup/history-full\":{\"title\":\"$:/plugins/wikilabs/custom-markup/history-full\",\"text\":\"\\n{{$:/plugins/wikilabs/custom-markup/history}}\\n\\nV 0.21.2 - 2021-10-14\\n\\n* Fix \\\"approx\\\" glyph shown in button\\n* Adjust default stylesheet class names\\n* Improve keyboard handling for both snippet configuration dialogs\\n\\nV 0.21.1 - 2021-10-14\\n\\n* Code cleaning\\n* Improve documentation\\n* Add Presentation examples\\n* Add global .clip and .example pragmas\\n* Add bundler plugins\\n** Create some bundles to export line and inline snippets\\n\\n! Breaking Changes in V0.20.0 and V0.21.0\\n\\nV 0.21.0 - 2021-09-17\\n\\n* renamed pragma: `\\\\customize` to `\\\\custom`\\n* renamed pragma: `\\\\debugcustomize` to `\\\\debugcustom`\\n\\nV 0.20.0 - 2021-09-16\\n\\n* Rebuild the _params to be more generic\\n* Removed `_1, _2, _3, _4` ... there is _no_ limit anymore\\n\\n------\\n\\nV 0.11.7 - 2021-09-16\\n\\n* Add inline snippet dropdown\\n* Add support for inline snippets\\n\\nV 0.11.6 - 2021-07-22\\n\\n* Fixes issue #98 [[Custom Markup \\\"in text\\\" Parameters overwrite defaults when empty|https://github.com/wikilabs/plugins/issues/98]]\\n* Changed `\\\\\\\\ pragma comment` to `<!-- pragma comment -->`, since the later is part of the TW core now\\n\\nV 0.11.5 - 2021-04-10\\n\\n* Add a bit more docs\\n* Remove old comments from code\\n\\nV 0.11.4 - 2021-03-29\\n\\n* remove some inline html elements, that can be directly created\\n* move the block html elements, into the project, to be more flexible\\n* fix [ext[_use RSOD #86|https://github.com/wikilabs/plugins/issues/86]]\\n* add _3 and _4\\n\\nV 0.11.3 - 2021-03-20\\n\\n* add a class `wltc-snippet-inline` and `wltc-snippet-block` to snippet dropdowns\\n* Let all glyphs accept all html tags\\n* fix some missing `approx` definitions\\n* document the `_useGlobal` pragma attribute\\n* `_use` allows us to overwrite predefined attributes\\n\\nV 0.11.2 - 2021-03-20\\n\\n* allow html tags in inline text eg: `some /°mark marked°/ text`\\n** creates: `<p>some <mark class=\\\"wltc-inline wltc\\\">marked</mark> text</p>`\\n\\nV 0.11.1 - 2021-03-20\\n\\n* custom dropdown - \\\"snippets\\\" got new functionality\\n\\nV 0.11.0 - 2021-03-18\\n\\n''Breaking changes''\\n\\n* Rename Glyph: `about` ''to'' `approx (≈)`, which is the official name of the char\\n* Change the `_params` formatting to `_params=\\\":::p1:::p2\\\"`\\n\\nV 0.10.1 - 2021-02-22\\n\\n* fix class definition with missing pragma _classes\\n\\nV 0.10.0 - 2021-02-18\\n\\n* fix RSOD accessing cache without a check\\n* Added the `corner ❮ ❯` glyphs for inline markers\\n** \\\"little was removed\\\"\\n* Added `CTRL-0` as shortcut for \\\"toggle inline selection\\\"\\n* Added dynamic icon for inline selection\\n* Added dropdown to configure inline selection\\n* fixed problem with class definition applied twice\\n* local params allow spaces now. eg:`XX:\\\"a_b_c\\\":\\\"param with spaces\\\"`\\n* `tc-editor-toolber` is `display: flex;` now. Style setting comes with the plugin\\n\\n''Breaking change''\\n\\n* local `XX:\\\"p1\\\":\\\"p2\\\"` ''have to be covered with double qutes'' now.\\n* did ''remove'' the ''little'' glyp from inline markers\\n\\nV 0.9.0 - 2020-12-11\\n\\n* Changed all keyboard shortcuts, to avoid overlapping\\n\\n* All toolbar buttons are visible atm. This will change in the future!\\n\\n* Add dynamic button \\\"disabled\\\" state to: $:/core/ui/EditTemplate/body/toolbar/button\\n** Added button disabled CSS\\n\\n* There are 3 \\\"inline\\\" elements\\n** `﹙ little﹚`, `⠒ braille⠶`, `/° slash°/`\\n\\n* There are 6 \\\"block\\\" elements\\n** `pilcrow: ¶`, `about: ≈`, `angle: »`, `degree: °`, `tick: ´`, `single: ›`\\n\\nSee [[full history|$:/plugins/wikilabs/custom-markup/history-full]]\\n\\nV 0.8.1 - 2020-10-30\\n\\n* fix `/°slash /°slash nesting°/ nesting°/`\\n\\nV 0.8.0 - 2020-10-29\\n\\n* There are 4 \\\"inline\\\" elements\\n** `__ underscore__`, `﹙ little﹚`, `⠒ braille⠶`, `/° slash°/`\\n* There are 6 \\\"block\\\" elements\\n** `pilcrow: ¶`, `about: ≈`, `angle: »`, `degree: °`, `tick: ´`, `single: ›`\\n\\nV 0.7.0 - 2020-10-23\\n\\n* New Inline functions\\n** `_symbol.class.clsss:param:param some text__`\\n** `.class` and `:param` work the same way as \\\"block\\\" definitions\\n* Removed underscore from \\\"block\\\" definitions, because it's used by \\\"inline\\\"\\n* Added: `#\\n pragma comments`\\n** It's faster than HTML comments `<!-- comments -->`, since it can be used outside macro `\\\\define x()` blocks\\n\\nV 0.6.0 - 2020-10-03\\n\\n* ''New Functionality''\\n** $:/config/custom-markup/pragma/PageTemplate tagged: `$:/tags/Macro`\\n*** content: `\\\\importcustom [tag[$:/tags/Pragma]]`\\n** contains global pragma definitions .. and macro definitions\\n\\n* ''Incompatible changes''\\n** `_params` renamed to -> `_classes`\\n** `_maps` renamed to -> `_params` !!\\n** Adjusted the docs accordingly\\n* Improved debug modes\\n** `\\\\debugcustom` new parameters: `no`, `list`, `global`, `global list`, `global ID`\\n** `_debug` new parameter: `no`,\\n* `angel` renamed to: `angle` + docs\\n\\nV 0.5.3 - 2020-09-29\\n\\n* new parameters: `_1, _2, _maps`\\n** allows `°:param1Text:param2Text` \\n** new format `°.i.x.y:a:b`\\n* [[Examples + Reference|https://wikilabs.github.io/editions/custom-markup/#test-checkbox-widget-maps-transclusion:test-checkbox-widget-maps-transclusion test-checkbox-widget-maps-variable \\\"Custom Markup Definition\\\"]]\\n\\nV 0.5.2 - 2020-09-23\\n\\n* fixed \\\\importcustom\\n* new parameter _srcName\\n* \\\\customize or \\\\customise can be used\\n* \\\\debugcustomize or \\\\debugcustomise can be used\\n\\nV 0.5.0 - 2020.09.20\\n\\n* New Plugin Name: custom-markup\\n* New directory structure\\n\\nV 0.4.2 - 2020-09-18\\n\\n* docs is on the way\\n* approx feature complete\\n** \\\\custominline needs to be improved\\n\\nV 0.4.0 2020.09.16\\n\\n* added IDs: single \\\"›\\\" and approx \\\"≈\\\"\\n* ID comma removed \\n* new toolbar buttons\\n* new keyboard shortcuts\\n\\nV 0.3.0 2020.09.10\\n\\n* pragma parameters renamed to _element, _use, _mode, ... \\n** because there was a naming problem with widget parameters\\n* tick-inline uses `°°` now\\n\\nV 0.2.1 2020-09.12\\n\\n* add more IDs comma, degree, underline\\n* \\\\ticktect becomes \\\\custom\\n* \\\\tickdebug becomes \\\\debugcustom\\n\\nV 0.0.1 - 2020-08-28\\n\\n* initial release\\n\"},\"$:/plugins/wikilabs/custom-markup/history\":{\"title\":\"$:/plugins/wikilabs/custom-markup/history\",\"text\":\"V 0.22.1-beta - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\n! Breaking Changes in V0.22.0\\n\\nV 0.22.0 - 2023-05-03\\n\\n* Use `❮ ❯` corner instead of `『 』`, becuase they had \\\"strange white-spacing\\\" as can be seen here\\n* update license dates\\n\\n------\\n\\nV 0.21.3 - 2021-10-18\\n\\n* Fix \\\"force glyph in empty line\\\" for add-glyph button\\n\\nSee [[full history|$:/plugins/wikilabs/custom-markup/history-full]]\"},\"$:/plugins/wikilabs/custom-markup/icons/add-newline\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/add-newline\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n <path d=\\\"m0.242 22.8h85.3v11.6h-85.3zm0 34.9h85.3v11.6h-85.3v-11.6zm0 34.9h85.3v11.6h-85.3z\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\".957\\\"/>\\n <path d=\\\"m111 47.7-21.2-8.94 21.2-9.35v5.15l9.98 3e-6 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n <path d=\\\"m111 82.3-21.2-8.94 21.2-9.35v5.15l9.98 3e-6 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n <path d=\\\"m111 117-21.2-8.94 21.2-9.35v5.15l9.98 1e-5 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n </svg>\"},\"$:/plugins/wikilabs/custom-markup/icons/angle-minus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/angle-minus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\n <path d=\\\"m76.4 57.4h51.4v12.6h-51.4v-12.6z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n <path d=\\\"m6.78 99.1-6.32-6.22 30.1-30.2-29.5-29.6 6.27-6.33 35.9 35.9z\\\" style=\\\"stroke-width:2.41\\\"/>\\n <path d=\\\"m34.4 99.1-6.32-6.22 30.1-30.2-29.5-29.6 6.27-6.33 35.9 35.9z\\\" style=\\\"stroke-width:2.41\\\"/>\\n</svg>\"},\"$:/plugins/wikilabs/custom-markup/icons/angle-plus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/angle-plus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\n <path d=\\\"m76.4 57.3h51.4v12.5h-51.4z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n <path d=\\\"m108 38v51.4h-12.5v-51.4z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n <path d=\\\"m6.8 98.9-6.3-6.21 30-30.2-29.5-29.5 6.25-6.32 35.9 35.9z\\\" style=\\\"stroke-width:2.41\\\"/>\\n <path d=\\\"m34.4 98.9-6.3-6.21 30-30.2-29.5-29.5 6.25-6.32 35.9 35.9z\\\" style=\\\"stroke-width:2.41\\\"/>\\n</svg>\"},\"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n <g fill-rule=\\\"evenodd\\\">\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\n </g>\\n <g>\\n  <path d=\\\"m62.307 8.9688-9.3409 25.33h18.716zm-3.8864-6.7841h7.8068l19.398 50.898h-7.1591l-4.6364-13.057h-22.943l-4.6364 13.057h-7.2614z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\n  <path d=\\\"m92.751 0.036991h6.2727v53.045h-6.2727z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\n  <path d=\\\"m121.38 0.036991h6.2727v53.045h-6.2727z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\n </g>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/glyph-minus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-minus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\" > \\n\\t<defs>\\n\\t\\t<g id=\\\"element\\\">\\n\\t\\t\\t{{$:/config/wikilabs/custom-markup/icons/glyphs/active##element}}\\n\\t\\t</g>\\n\\t</defs>\\n\\t<path d=\\\"m76.4 57.4h51.4v12.6h-51.4v-12.6z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n\\t<use href=\\\"#element\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/glyph-plus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-plus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\" > \\n\\t<defs>\\n\\t\\t<g id=\\\"element\\\">\\n\\t\\t\\t{{$:/config/wikilabs/custom-markup/icons/glyphs/active##element}}\\n\\t\\t</g>\\n\\t</defs>\\n\\t<path d=\\\"m76.4 57.3h51.4v12.5h-51.4z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n\\t<path d=\\\"m108 38v51.4h-12.5v-51.4z\\\" style=\\\"fill-rule:evenodd;stroke-width:1.08\\\"/>\\n\\t<use href=\\\"#element\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/glyph-toggle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyph-toggle\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n\\t<defs>\\n\\t\\t<g id=\\\"element\\\">\\n\\t\\t\\t{{$:/config/wikilabs/custom-markup/icons/glyphs/active##element}}\\n\\t\\t</g>\\n\\t</defs>\\n\\t<path d=\\\"m80.9 77.8h47.6v11.6h-47.6v-11.6z\\\" fill-rule=\\\"evenodd\\\"/>\\n\\t<path d=\\\"m110 59.6v47.6h-11.6v-47.6h11.6z\\\" fill-rule=\\\"evenodd\\\"/>\\n\\t<path d=\\\"m80.5 27.5h47.6v11.6h-47.6v-11.6z\\\" fill-rule=\\\"evenodd\\\"/>\\n\\t<use href=\\\"#element\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/angle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/angle\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"»\\\",\\n\\\"disabled\\\": \\\"no\\\",\\n\\\"element\\\": \\\"<path d='m6.8 98.9-6.3-6.21 30-30.2-29.5-29.5 6.25-6.32 35.9 35.9z' style='stroke-width:2.41'/><path d='m34.4 98.9-6.3-6.21 30-30.2-29.5-29.5 6.25-6.32 35.9 35.9z' style='stroke-width:2.41'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/approx\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/approx\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"≈\\\",\\n\\\"disabled\\\": \\\"no\\\",\\n\\\"element\\\": \\\"<path d='m70.1 65.6v13.2q-5.74 5.75-10.7 8.34-4.87 2.51-10.2 2.51-6.02 0-14-4.35-0.547-0.295-0.93-0.516-0.328-0.148-1.15-0.59-8.48-4.5-13.6-4.5-4.81 0-9.52 2.8-4.7 2.8-10.1 9v-13.2q5.74-5.75 10.6-8.26 4.92-2.58 10.2-2.58 6.02 0 14.1 4.35 0.602 0.369 0.875 0.516 0.328 0.148 1.15 0.59 8.48 4.5 13.6 4.5 4.7 0 9.3-2.73 4.65-2.8 10.3-9.08zm0-28.7v13.1q-5.74 5.83-10.7 8.41-4.87 2.51-10.2 2.51-6.02 0-14-4.35-0.547-0.295-0.93-0.516-0.328-0.148-1.15-0.59-8.48-4.5-13.6-4.5-4.81 0-9.52 2.8-4.7 2.8-10.1 8.93v-13.1q5.74-5.75 10.6-8.26 4.92-2.58 10.2-2.58 6.02 0 14.1 4.35 0.547 0.295 0.82 0.443 0.383 0.221 1.2 0.664 8.48 4.5 13.6 4.5 4.7 0 9.3-2.73 4.65-2.8 10.3-9.08z'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/degree\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/degree\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"°\\\",\\n\\\"element\\\": \\\"<path d='m33.3 42.9q-8.31 0-14 5.82-5.72 5.72-5.72 14 0 8.21 5.72 13.9 5.72 5.61 14 5.61t14-5.61q5.72-5.72 5.72-13.9 0-8.21-5.82-14-5.72-5.82-13.9-5.82zm0-13.4q6.65 0 12.8 2.6 6.13 2.49 10.6 7.27 4.78 4.68 7.17 10.6t2.39 12.8q0 13.7-9.66 23.3-9.56 9.46-23.5 9.46-14 0-23.4-9.35-9.35-9.35-9.35-23.4 0-13.9 9.56-23.6 9.56-9.66 23.4-9.66z' style='stroke-width:5.32'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/pilcrow\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/pilcrow\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"¶\\\",\\n\\\"element\\\": \\\"<path d='m27.6 20.5h25.5v96.2h-8.02v-89.2h-10.8v89.2h-8.08v-48.1q-12.2-0.967-18.9-7.23-6.66-6.32-6.66-16.8 0-10.8 7.4-17.4 7.4-6.6 19.6-6.6z' style='stroke-width:2.91'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/single\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/single\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"›\\\",\\n\\\"element\\\": \\\"<path d='m20.4 98.9-6.3-6.21 30-30.2-29.5-29.5 6.25-6.32 35.9 35.9z' style='stroke-width:2.41'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/glyphs/tick\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/glyphs/tick\",\"type\":\"application/json\",\"text\":\"{\\n\\\"glyph\\\": \\\"´\\\",\\n\\\"element\\\": \\\"<path d='m18.3 93.6 47.8-46.6-37.3-17.7-28.1 51.8z' fill-rule='evenodd' style='stroke-width:2.73'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/inline/braille\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/inline/braille\",\"type\":\"application/json\",\"text\":\"{\\n\\\"prefix\\\": \\\"⠒\\\",\\n\\\"suffix\\\": \\\"⠶\\\",\\n\\\"element\\\": \\\"<path d='m23.4 34.2h29.5v29.5h-29.5zm44.2 0h29.5v29.5h-29.5z' style='stroke-width:4.36'/>\\\"\\n}\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/inline/corner\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/inline/corner\",\"type\":\"application/json\",\"text\":\"{\\n\\\"prefix\\\": \\\"❮\\\",\\n\\\"suffix\\\": \\\"❯\\\",\\n\\\"element\\\": \\\"<path d='M99.069 64.173c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196l50.382-50.382-50.382-50.382a7.92 7.92 0 010-11.195c3.086-3.085 8.104-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.316 5.595z' style='stroke-width:4.36'/>\\\"\\n}\"},\"$:/plugins/wikilabs/custom-markup/icons/inline/slash\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/inline/slash\",\"type\":\"application/json\",\"text\":\"{\\n\\\"prefix\\\": \\\"/°\\\",\\n\\\"suffix\\\": \\\"°/\\\",\\n\\\"element\\\": \\\"<path d='m43.1 5.08h16l-37.9 121h-15.9z' style='stroke-width:4.36'/><path d='m95.9 13.8q-5.18 0-8.78 3.6t-3.6 8.78 3.52 8.7q3.6 3.52 8.85 3.52 5.18 0 8.78-3.52 3.6-3.6 3.6-8.7 0-5.18-3.67-8.78-3.6-3.6-8.7-3.6zm0-11.7q4.75 0 9.14 1.87 4.39 1.8 7.84 5.18 3.38 3.45 5.11 7.77 1.8 4.32 1.8 9.21 0 4.82-1.8 9.21-1.73 4.32-4.96 7.55-3.45 3.45-7.91 5.32-4.46 1.8-9.35 1.8-10.1 0-17-6.83-6.83-6.91-6.83-17t6.91-17q6.98-6.98 17.1-6.98z' style='stroke-width:4.36'/>\\\"\\n}\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/inline-toggle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/inline-toggle\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n\\t<defs>\\n\\t\\t<g id=\\\"inline-element\\\">\\n\\t\\t\\t{{$:/config/wikilabs/custom-markup/icons/inline/active##element}}\\n\\t\\t</g>\\n\\t</defs>\\n\\t<use href=\\\"#inline-element\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/tick-minus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/tick-minus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159zm27.539-15.48h93.09v11.637h-93.09z\\\"/>\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/tick-plus\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/tick-plus\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159zm27.539-15.48h93.09v11.637h-93.09zm41.682 34.833h12.391v46.476h-12.391z\\\"/>\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n <g transform=\\\"translate(0 16.058)\\\" fill-rule=\\\"evenodd\\\">\\n  <path d=\\\"m61.715 61.724h47.566v11.636h-47.566v-11.637z\\\"/>\\n  <path d=\\\"m91.149 43.583v47.566h-11.636v-47.566h11.637z\\\"/>\\n </g>\\n <g fill-rule=\\\"evenodd\\\">\\n  <path d=\\\"m11.228 56.264 30.441-24.231-23.75-9.1806-17.927 26.919z\\\" stroke-width=\\\"1.5688\\\"/>\\n  <path d=\\\"m11.35 106.77 30.441-24.231-23.75-9.1806-17.927 26.919z\\\" stroke-width=\\\"1.5688\\\"/>\\n  <path d=\\\"m61.296 27.452h47.566v11.636h-47.566v-11.637z\\\"/>\\n </g>\\n</svg>\\n\"},\"$:/plugins/wikilabs/custom-markup/icons/angle-toggle\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/angle-toggle\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\n <g transform=\\\"translate(5.9262 6.1069)\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"1.08\\\">\\n  <path d=\\\"m64.778 72.157h51.374v12.567h-51.374v-12.569z\\\"/>\\n  <path d=\\\"m96.748 52.753v51.374h-12.567v-51.374h12.569z\\\"/>\\n </g>\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 -51.918)\\\" stroke-width=\\\"1.02\\\">\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\n </g>\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 9.7276)\\\" stroke-width=\\\"1.02\\\">\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\n </g>\\n <path d=\\\"m71.827 34.16h51.374v12.567h-51.374v-12.569z\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"1.08\\\"/>\\n</svg>\"},\"$:/plugins/wikilabs/custom-markup/icons/toggle-dot\":{\"title\":\"$:/plugins/wikilabs/custom-markup/icons/toggle-dot\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n <path d=\\\"m34.91 22.818h93.09v11.637h-93.09zm0 34.91h93.09v11.636h-93.09v-11.637zm0 34.908h93.09v11.637h-93.09z\\\" fill-rule=\\\"evenodd\\\"/>\\n  <path d=\\\"m12.19 28.635a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048z\\\"/>\\n  <path d=\\\"m12.063 63.175a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048\\\"/>\\n  <path d=\\\"m12 98.286a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048\\\"/>\\n </svg>\\n  \\n\"},\"$:/plugins/wikilabs/custom-markup/license\":{\"title\":\"$:/plugins/wikilabs/custom-markup/license\",\"text\":\"[[Custom Markup-Plugin|https://wikilabs.github.io/#custom-markup]] (c) Mario Pietsch - 2020-<<now YYYY>>\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"},\"$:/plugins/wikilabs/custom-markup/readme\":{\"title\":\"$:/plugins/wikilabs/custom-markup/readme\",\"text\":\"Adds a possibilty to style text content with wikitext syntax\\n\\nIt's possible to manipulate the rules behaviour with: \\n\\n`\\\\rules only ticktext`\\n`\\\\rules excpet ticktext`\\n\"},\"$:/plugins/wikilabs/custom-markup/cmHtmlElements.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/cmHtmlElements.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/cmHtmlElements.js\\ntype: application/javascript\\nmodule-type: config\\n\\nConfiguration constants ... This list is plugin specific!\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.cmInlineElements = \\\"a,abbr,audio,b,bdi,bdo,br,canvas,cite,code,data,datalist,del,dfn,em,embed,i,iframe,img,ins,kbd,label,map,mark,meter,noscript,object,output,picture,progress,q,ruby,s,samp,select,slot,small,span,strong,sub,sup,svg,template,time,u,var,video,wbr,summary\\\".split(\\\",\\\");\\n\\n\\nexports.cmBlockElements = \\\"address,article,aside,audio,blockquote,canvas,dd,details,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,li,nav,ol,p,pre,section,table,tfoot,ul,video\\\".split(\\\",\\\");\\n\\n})()\",\"type\":\"application/javascript\",\"module-type\":\"config\"},\"$:/core/ui/EditTemplate/body/toolbar/button\":{\"title\":\"$:/core/ui/EditTemplate/body/toolbar/button\",\"created\":\"20201214134842220\",\"modified\":\"20210320104840347\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define toolbar-button-icon()\\n<$list\\n\\n  filter=\\\"[all[current]!has[custom-icon]]\\\"\\n  variable=\\\"no-custom-icon\\\"\\n\\n><$transclude\\n\\n  tiddler={{!!icon}}\\n\\n/></$list>\\n\\\\end\\n\\n\\\\define toolbar-button-tooltip()\\n{{!!description}}<$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/plain\\\" shortcuts={{!!shortcuts}} prefix=\\\"` - [\\\" separator=\\\"] [\\\" suffix=\\\"]`\\\"/>\\n\\\\end\\n\\n\\\\define toolbar-button()\\n<$list\\n\\n  filter={{!!condition}}\\n  variable=\\\"list-condition\\\"\\n\\n><$wikify\\n\\n  name=\\\"tooltip-text\\\"\\n  text=<<toolbar-button-tooltip>>\\n  mode=\\\"inline\\\"\\n  output=\\\"text\\\"\\n\\n><$list\\n\\n  filter=\\\"[all[current]!has[dropdown]]\\\"\\n  variable=\\\"no-dropdown\\\"\\n\\n><$set name=disabled filter={{!!condition-disabled}}><$button\\n\\n  class=\\\"tc-btn-invisible $(buttonClasses)$\\\"\\n  tooltip=<<tooltip-text>>\\n  actions={{!!actions}}\\n  disabled=<<disabled>>\\n\\n><span\\n\\n  data-tw-keyboard-shortcut={{!!shortcuts}}\\n\\n/><<toolbar-button-icon>><$transclude\\n\\n  tiddler=<<currentTiddler>>\\n  field=\\\"text\\\"\\n\\n/></$button></$set></$list><$list\\n\\n  filter=\\\"[all[current]has[dropdown]]\\\"\\n  variable=\\\"dropdown\\\"\\n\\n><$set\\n\\n  name=\\\"dropdown-state\\\"\\n  value=<<qualify \\\"$:/state/EditorToolbarDropdown\\\">>\\n\\n><$button\\n\\n  popup=<<dropdown-state>>\\n  class=\\\"tc-popup-keep tc-btn-invisible $(buttonClasses)$\\\"\\n  selectedClass=\\\"tc-selected\\\"\\n  tooltip=<<tooltip-text>>\\n  actions={{!!actions}}\\n\\n><span\\n\\n  data-tw-keyboard-shortcut={{!!shortcuts}}\\n\\n/><<toolbar-button-icon>><$transclude\\n\\n  tiddler=<<currentTiddler>>\\n  field=\\\"text\\\"\\n\\n/></$button><$reveal\\n\\n  state=<<dropdown-state>>\\n  type=\\\"popup\\\"\\n  position=\\\"below\\\"\\n  animate=\\\"yes\\\"\\n  tag=\\\"span\\\"\\n\\n><div\\n\\n  class=\\\"tc-drop-down tc-popup-keep\\\"\\n\\n><$transclude\\n\\n  tiddler={{!!dropdown}}\\n  mode=\\\"block\\\"\\n\\n/></div></$reveal></$set></$list></$wikify></$list>\\n\\\\end\\n\\n\\\\define toolbar-button-outer()\\n<$set\\n\\n  name=\\\"buttonClasses\\\"\\n  value={{!!button-classes}}\\n\\n><<toolbar-button>></$set>\\n\\\\end\\n\\n<<toolbar-button-outer>>\"},\"$:/plugins/wikilabs/custom-markup/styles\":{\"title\":\"$:/plugins/wikilabs/custom-markup/styles\",\"text\":\"/* Make the toolbar more flexible */\\n.tc-editor-toolbar {\\n  display: flex;\\n}\\n\\n/* WikiLabs tiddler classes defined by js code */\\n\\n.wltc {\\n  margin-top: 1rem;\\n  margin-bottom: 1rem;\\n}\\n\\n/*------------------------------------------*/\\n/* Indent by level adjusted to bullet lists */\\n\\n.i, .indent, .wltc-l2 {\\n  margin-left: 2.65rem;\\n}\\n\\n.ii, .wltc-l3, .indent2 {\\n  margin-left: 5.3rem;\\n}\\n\\n.iii, .wltc-l4, .indent3 {\\n  margin-left: 7.95rem;\\n}\\n\\n/*------------------------------------------*/\\n/* Outdent elements */\\n\\n\\n.-i {\\n  margin-left: -2.65rem;\\n}\\n\\n.-ii {\\n  margin-left: -5.3rem;\\n}\\n\\n.-iii {\\n  margin-left: -7.95rem;\\n}\\n\\n/*------------------------------------------*/\\n/* Right margin elements */\\n\\n.r, .right-dedent {\\n  margin-right: 2.65rem;\\n}\\n\\n.rr, .right-dedent2 {\\n  margin-right: 5.3rem;\\n}\\n\\n.-rrr, .right-dedent3 {\\n  margin-right: 7.95rem;\\n}\\n\\n/*------------------------------------------*/\\n/* Text formatting                          */\\n\\n.btitle, book-title {\\n  font-size: 200%;\\n}\\n\\n.bchapter, book-chapter {\\n  font-size: 150%;\\n}\\n\\ndiv.cap::first-letter,\\np.cap::first-letter {\\n  font-size: 250%;\\n  text-indent: initial;\\n  float: left;\\n}\\n\\n.ti, .text-indent {\\n  text-indent: 2.65em;\\n}\\n\\n.to, .text-outdent {\\n  text-indent: -2.65rem;\\n}\\n\\n.j, .justify {\\n  text-align: justify;\\n}\\n\\n.center {\\n  text-align: center;\\n}\\n\\n.b, bold {\\n  font-weight: bold;\\n}\\n\\n.serif {\\n  font-family: serif;\\n  font-size: 110%;\\n}\\n\\n\\n/*------------------------------------------*/\\n/* Simple custom list bullet                */\\nul .star{\\n  list-style-type: \\\"★ \\\"\\n}\\n\\n/*------------------------------------------*/\\n/* Margin double, margin half               */\\n\\n.md, .margin-double {\\n  margin-top: 2rem;\\n  margin-bottom: 2rem;\\n}\\n\\n.mtd, .margin-top-double {\\n  margin-top: 2rem;\\n}\\n\\n.-mh, .margin-half {\\n  margin-top: -.5rem;\\n  margin-bottom: -.5rem;\\n}\\n\\n.-mbh, .-margin-bottom-half {\\n  margin-bottom: -.5rem;\\n}\\n\\n/*------------------------------------------------------*/\\n/* Undo some default definitions to get more variations */\\n\\n.-m, .margin-init {\\n  margin: initial;\\n}\\n\\n.-mt, .margin-top-init {\\n  margin-top: initial;\\n}\\n\\n.-mb, .margion-bottom-init {\\n  margin-bottom: initial;\\n}\\n\\n/*-----------------------------------------------*/\\n/* Remove margin-top for headings in color-boxes */\\n.c h1, .c h2, .c h3, .c h4, .c h5, .c h6  {\\n  margin-top: initial;\\n}\\n\\n/*------------------------------------------*/\\n/* Float and .clearfixes                    */\\n\\n.fl, .float-left {\\n  float: left;\\n}\\n\\n.fr, float-right {\\n  float: right;\\n}\\n\\n.clearfix:after {\\n  content: \\\"\\\";\\n  clear: both;\\n  display: table;\\n}\\n\\n/*------------------------------------------*/\\n/* ASIDE needs float and .clearfixes        */\\n\\n.aside-class {\\n    width: 40%;\\n    padding: .5rem 1rem;\\n    margin-left: .5rem;\\n    float: right;\\n    box-shadow: inset 5px 0 5px -5px #29627e;\\n    font-style: italic;\\n    color: #29627e;\\n}\\n\\n/*------------------------------------------*/\\n/* UL, OL and P inside a table              */\\n\\ntd p {\\n  margin: .5rem 0;\\n}\\n\\ntd ul, td ol {\\n  margin:  .5rem 0;\\n  padding-left: 2rem;\\n}\\n\",\"created\":\"20200827100914489\",\"modified\":\"20211012170334474\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\"},\"$:/plugins/wikilabs/custom-markup/styles/dropdown\":{\"title\":\"$:/plugins/wikilabs/custom-markup/styles/dropdown\",\"created\":\"20210419153215096\",\"modified\":\"20211012171550636\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\".wltc-tiny-push-down {\\n  margin-bottom: 5px;\\n}\\n\\n.wltc-small-push-right {\\n  margin-left: 5px;\\n}\\n\\n.wltc-push-right {\\n  margin-left: 1em;\\n}\\n\\n.wltc-gap-right {\\n  margin: 0 3px 0 0;\\n}\\n\\n.tc-tiddler-frame .wltc-snippet-block {\\n  display: block;\\n}\\n\\n.wltc-snippet button:hover,\\n.wltc-snippet-block:hover {\\n\\tcolor: <<colour tiddler-link-background>>;\\n\\tbackground-color: <<colour tiddler-link-foreground>>;\\n\\ttext-decoration: none;\\n}\\n\\n.wltc-snippet button {\\n  display: inline-block;\\n  width: 85%;\\n  background: none;\\n  text-align: left;\\n  padding: 0 .3em;\\n}\\n\\n.wltc-font-mono {\\n font-family: {{$:/themes/tiddlywiki/vanilla/settings/codefontfamily}};\\n}\\n\\n.wltc-selector {\\n  min-width: 40%;\\n}\\n\\n.wltc-selector-big {\\n  min-width: 30%;\\n  font-size: x-large;\\n}\\n\\nbutton.wltc-btn-big svg {\\n  width: 1.7em;\\n  height: 1.7em;\\n}\"},\"$:/plugins/wikilabs/custom-markup/wl-keyboard.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wl-keyboard.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wl-keyboard.js\\ntype: application/javascript\\nmodule-type: widget-subclass\\n\\nKeyboard shortcut widget\\n\\n\\\\*/\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.baseClass = \\\"keyboard\\\";\\nexports.name = \\\"wl-keyboard\\\";\\n\\nexports.constructor = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n}\\n\\nexports.prototype = {};\\n\\nexports.prototype.handleChangeEvent = function(event) {\\n\\tif($tw.keyboardManager.checkKeyDescriptors(event,this.keyInfoArray)) {\\n\\t\\tvar variables = Object.create(null),\\n\\t\\t\\ttemp;\\n\\t\\tvar handled = this.invokeActions(this,event);\\n\\t\\tif(this.actions) {\\n\\t\\t\\t$tw.utils.each(this.attributes,function(val,key) {\\n\\t\\t\\t\\tif (key.substring(0,4) === \\\"usr-\\\") {\\n\\t\\t\\t\\t\\tvariables[key] = \\\"\\\" + val;\\n\\t\\t\\t\\t// } else {\\n\\t\\t\\t\\t// \\tvariables[\\\"__\\\" + key + \\\"__\\\"] = \\\"\\\" + val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tvariables = $tw.utils.extend(variables, \\n\\t\\t\\t\\t{ \\\"key\\\": event.key, \\n\\t\\t\\t\\t\\tmodifierKey: $tw.keyboardManager.getEventModifierKeyDescriptor(event),\\n\\t\\t\\t\\t});\\n\\t\\t\\tthis.invokeActionString(this.actions,this,event,variables);\\n\\t\\t}\\n\\t\\tthis.dispatchMessage(event);\\n\\t\\tif(handled || this.actions || this.message) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget-subclass\"},\"$:/plugins/wikilabs/custom-markup/wl-radio-widget.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wl-radio-widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wl-radio-widget.js\\ntype: application/javascript\\nmodule-type: widget-subclass\\n\\\\*/\\n\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.baseClass = \\\"radio\\\";\\nexports.name = \\\"wl-radio\\\";\\n\\nexports.constructor = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n}\\nexports.prototype = {};\\n\\nexports.prototype.handleChangeEvent = function(event) {\\n\\tvar variables = Object.create(null);\\n\\tif(this.inputDomNode.checked) {\\n\\t\\tthis.setValue();\\n\\t}\\n\\t// Trigger actions. Use variables = {key:value, key:value ...}\\n\\tif(this.radioActions) {\\n\\t\\t$tw.utils.each(this.attributes,function(val,key) {\\n\\t\\t\\tif (key.substring(0,4) === \\\"usr-\\\") {\\n\\t\\t\\t\\tvariables[key] = \\\"\\\" + val;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvariables[\\\"__\\\" + key + \\\"__\\\"] = \\\"\\\" + val;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// \\\"tiddler\\\" and/or \\\"field\\\" parameter may be missing in the widget call. See radio widget .execute() \\n\\t\\tvariables = $tw.utils.extend(variables, {\\\"__tiddler__\\\": this.radioTitle,\\\"__field__\\\": this.radioField});\\n\\t\\tthis.invokeActionString(this.radioActions,this,event,variables);\\n\\t}\\n}\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget-subclass\"},\"$:/plugins/wikilabs/custom-markup/wikirules/glyphinline.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wikirules/glyphinline.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/glyphinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for ticktext and angletext\\n\\nDetect\\n\\n´asdf.my.Class This is some text with a name and class\\n´.a.b.c.d This is some text with class\\n\\n»»»asdf.my.Class This is some text with a name and class\\n».a.b.c.d This is some text with class\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false exports:false */\\n\\\"use strict\\\";\\n\\nvar CLASS_GROUP = \\\"wltc\\\";\\nvar CLASS_LEVEL = CLASS_GROUP + \\\"-inline\\\"; \\n\\nexports.name = \\\"tickinline\\\";\\nexports.types = {inline: true};\\n\\nvar idTypes = [\\\"corner\\\", \\\"braille\\\", \\\"slash\\\"];\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\n\\tvar self = this;\\n\\n\\t// Regexp to match \\n\\t// match[1] ... all symbols 1-4 ´ or » or ° or , or _\\n\\t// match[2] ... htmlTag ... default DIV\\n\\t// match[3] ... classString\\n\\tthis.matchRegExp = /((?=❮[^❮])❮|(?=⠒[^⠒])⠒|(?=\\\\/°[^\\\\/°])\\\\/°)((?:[^\\\\.:\\\\r\\\\n\\\\s]+))?(\\\\.(?:[^:\\\\r\\\\n\\\\s]+))?((:\\\".*?\\\")*)/mg; // V0.10.0\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText || {};\\n\\n\\tthis.pc = this.p.configTickText;\\n\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})\\n\\n\\tthis.pc.X = {}; // There is a naming problem\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t/*\\n\\tSkip the endstring at the current position. Options are:\\n\\ttreatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n\\t*/\\n\\tfunction skipEndString (endString) {\\n\\t\\tvar endRegExp = (endString instanceof RegExp) ? new RegExp(endString, \\\"mg\\\") : new RegExp(\\\"(\\\" + $tw.utils.escapeRegExp(endString) + \\\")\\\",\\\"mg\\\")\\n\\t\\tendRegExp.lastIndex = self.parser.pos;\\n\\t\\tvar endMatch = endRegExp.exec(self.parser.source);\\n\\t\\tif(endMatch && endMatch.index === self.parser.pos) {\\n\\t\\t\\tself.parser.pos = endRegExp.lastIndex;\\n\\t\\t}\\n\\t}\\n\\n//---------------------\\n\\tvar self = this,\\n\\t\\ttree = [],\\n\\t\\troot = [];\\n\\n\\t// Get all the details of the match\\n\\tvar id,\\n\\t\\tlevel    = (this.match[1]) ? this.match[1].length : 0,\\n\\t\\tsym      = this.match[2], // needs to be undefined if no match\\n\\t\\t_classes = (this.match[3]) ? this.match[3] : \\\"\\\",\\n\\t\\t_params  = (this.match[4]) ? this.match[4] : \\\"\\\";\\n\\n\\tvar useParagraph = false; // use paragraph by default\\n\\n\\t// global custom pragmas\\n\\tvar gPc,\\n\\t\\ttemplate = \\\"$:/config/custom-markup/pragma/PageTemplate\\\";\\n\\n\\tif (!this.parser.wiki.caches[template].blockParseTree) {\\n\\t\\tthis.parser.wiki.parseTiddler(template);\\n\\t}\\n\\tgPc = this.parser.wiki.caches[template].blockParseTree.configTickText;\\n\\n\\t// \\\"_debug\\\" is a binary parameter\\n\\tvar options = {symbol: sym, _mode : \\\"inline\\\", _element : (useParagraph) ? \\\"p\\\" : \\\"span\\\", _classes : _classes,\\n\\t\\t_endString : \\\"\\\", _use: \\\"\\\", _useGlobal: \\\"\\\", _debug: false, _debugString: \\\"\\\", _srcName:\\\"src\\\", _params : (_params !== \\\"\\\") ? _params.split(':\\\"') : [] };\\n\\n\\tswitch (this.match[1][0]) {\\n\\t\\tcase \\\"❮\\\":\\n\\t\\t\\tid = \\\"corner\\\";\\n\\t\\t\\toptions._endString = \\\"❯\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"⠒\\\":\\n\\t\\t\\tid = \\\"braille\\\"\\n\\t\\t\\toptions._endString = \\\"⠶\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"/\\\":\\n\\t\\t\\tid = \\\"slash\\\"\\n\\t\\t\\toptions._endString = \\\"°/\\\"\\n\\t\\tbreak;\\n\\t}\\n\\n\\tvar textEndInner,\\n\\t\\ttextStartInner,\\n\\t\\ttextEnd,\\n\\t\\ttextStart = this.parser.pos; // remember text postions for widget text handling\\n\\n\\t// Move past the start symbol\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\t// remember text postions for macro src handling\\n\\ttextStartInner = this.parser.pos\\n\\t// Parse any classes, whitespace and then the heading itself\\n\\tvar classes = _classes.split(\\\".\\\");\\n\\n\\tvar forceDebug = false,\\n\\t\\t_useError = false,\\n\\t\\ttmpUse = \\\"\\\";\\n\\n\\tvar config = {};\\n\\n\\t// !!! The order of the checks is important!!! TODO make this nicer\\n\\tif (!sym && this.pc[id][\\\"true\\\"]) {\\n\\t// ID is locally defined\\n\\t\\tforceDebug = (this.pc[id][\\\"true\\\"]._debug) ? this.pc[id][\\\"true\\\"]._debug : false;\\n\\t\\tsym = (this.pc[id][\\\"true\\\"]._use) ? this.pc[id][\\\"true\\\"]._use : true;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t} else if (sym && this.pc[id][sym] && this.pc[id][sym]._use)  {\\n\\t\\t// ID and _use are locally defined\\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tif ((sym === this.pc[id][sym]._use) && (this.pc[id][sym].imported !== true)) {\\n\\t\\t\\t// error Can't use itself\\n\\t\\t\\t_useError = \\\"Error - \\\\\\\\custom \\\" + id + \\\"=\\\" + sym + \\\" _use=\\\" + sym + \\\" is not possible!<br>Try: _useGlobal instead\\\";\\n\\t\\t\\tforceDebug = true;\\n\\t\\t}\\n\\t\\ttmpUse = this.pc[id][sym]._use;\\n\\t\\tconfig = this.pc[id][tmpUse];\\n\\t\\tif (config) {\\n\\t\\t\\t$tw.utils.extend(config, this.pc[id][sym])\\n\\t\\t} else {\\n\\t\\t\\t// error no pragma with that name\\n\\t\\t\\t_useError = \\\"Error - \\\\\\\\custom \\\" + id + \\\"=\\\" + tmpUse + \\\" is not defined!\\\";\\n\\t\\t\\tforceDebug = true;\\n\\t\\t\\tconfig = {};\\n\\t\\t}\\n\\t} else if (sym && this.pc[id][sym] && this.pc[id][sym]._useGlobal && gPc[id][this.pc[id][sym]._useGlobal] )  {\\n\\t\\t// Use global symbol \\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tsym = this.pc[id][sym]._useGlobal;\\n\\n\\t\\t// Switch to global configuration   TODO duplicated code\\n\\t\\tforceDebug = (forceDebug) ? forceDebug : (gPc[id][sym]._debug) ? gPc[id][sym]._debug : false;\\n\\t\\tconfig = gPc[id][sym];\\n\\t} else if (sym && this.pc[id][sym])  {\\n\\t\\t// Switch to local configuration\\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t} else if (sym && gPc[id][sym])  {\\n\\t\\t// Switch to global configuration\\n\\t\\tforceDebug = (gPc[id][sym]._debug) ? gPc[id][sym]._debug : false;\\n\\t\\tconfig = gPc[id][sym];\\n\\t} else if (sym !== \\\"\\\") {\\n\\t// Check if symbol is a custom-markup  validated HTML element\\n\\t\\toptions._element = (($tw.config.cmInlineElements.indexOf(sym) !== -1) || ($tw.config.cmBlockElements.indexOf(sym) !== -1)) ? sym : options._element;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t}\\n\\n\\tif (config) {\\n\\t\\toptions.symbol = config.symbol || options.symbol;\\n\\t\\toptions._endString = config._endString || options._endString;\\n\\t\\toptions._mode = config._mode || options._mode;\\n\\t\\toptions._element = config._element || options._element;\\n\\t\\toptions._classes = options._classes + ((config._classes) ? config._classes : \\\"\\\");\\n\\n\\t\\tif (forceDebug) options._debug = forceDebug;\\n\\t\\telse options._debug = config._debug || options._debug;\\n\\n\\t\\toptions._debugString = (_useError) ? _useError : config._debugString || options._debugString;\\n\\t\\toptions._srcName = config._srcName || options._srcName;\\n\\n\\t\\tclasses = (options._classes).split(\\\".\\\") // pragma _classes are added to tick _classes\\n\\t}\\n\\n\\tvar oneBlock = false;\\n\\n\\tif ((options._mode === \\\"block\\\") ) { //&& (options._endString !== \\\"\\\")) {\\n\\t\\t// standard rendering\\n\\t\\t// no GROUP in block mode\\n\\t\\tclasses.push(CLASS_LEVEL);\\n\\n\\t\\tif (options._endString === \\\"\\\") {\\n\\t\\t\\toptions._endString = (useParagraph) ? \\\"\\\\\\\\r?\\\\\\\\n\\\\\\\\r?\\\\\\\\n\\\" : \\\"\\\\\\\\r?\\\\\\\\n\\\";\\n\\t\\t\\toneBlock = true;\\n\\t\\t} \\n\\n\\t\\ttree = (oneBlock) ? this.parser.parseBlock(options._endString) : this.parser.parseBlocks(options._endString);\\n\\t} else {\\n\\t\\t// apply CLASS_GROUP only if in inline mode. \\n\\t\\tclasses.push(CLASS_LEVEL + \\\" \\\" + CLASS_GROUP);\\n\\n\\t\\tif (options._endString === \\\"\\\") {\\n\\t\\t\\ttree = this.parser.parseInlineRun((useParagraph) ? /(\\\\r?\\\\n\\\\r?\\\\n)/mg : /(\\\\r?\\\\n)/mg);// OK for single new-line\\n\\t\\t} else {\\n\\t\\t\\ttree = this.parser.parseInlineRun(new RegExp(\\\"(\\\" + $tw.utils.escapeRegExp(options._endString) + \\\")\\\",\\\"mg\\\"));\\n\\t\\t}\\n\\t}\\n\\t// remember text postions for macro src handling\\n\\ttextEndInner = this.parser.pos;\\n\\n\\tskipEndString(options._endString);\\n\\n\\ttextEnd = this.parser.pos;\\n\\n\\tvar attributes = {\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: classes.join(\\\" \\\").trim()}\\n\\t\\t}\\n\\n\\tvar fixAttributes = [\\\"corner\\\", \\\"braille\\\", \\\"slash\\\", \\\"symbol\\\", \\n\\t\\t\\t\\t\\t\\t\\\"_endString\\\", \\\"_mode\\\", \\\"_element\\\", \\\"_classes\\\", \\\"_use\\\", \\\"_useGlobal\\\",\\n\\t\\t\\t\\t\\t\\t\\\"_params\\\", \\\"_srcName\\\", \\\"_debug\\\", \\\"_debugString\\\"];\\n\\n\\t// Callback is invoked with (element,title,object)\\n\\t$tw.utils.each(config, function(val,title,obj) {\\n\\t\\tif (fixAttributes.indexOf(title) === -1) {\\n\\t\\t\\tattributes[title] = obj[title];\\n\\t\\t\\t}\\n\\t});\\n\\n\\t// show tick config and code\\n\\tvar showRendered = true;\\n\\tif (options._debug) {\\n\\t\\tswitch (options._debug) {\\n\\t\\t\\tcase \\\"no\\\":\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"both\\\":\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"textOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t//\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"pragmaOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"pragma\\\": \\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (showRendered) {\\n\\t\\t// check if element is a widget\\n\\t\\tif (options._element[0] === \\\"$\\\") {\\n\\t//\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\tvar type = options._element.slice(1);\\n\\n\\t\\t\\tif (config._params && config._params.length > 0 ) {\\n\\t\\t\\t\\tfor (var i=0; i < config._params.length; i++) {\\n\\t\\t\\t\\t\\tattributes[config._params[i].name] = (options._params[i+1] && options._params[i+1] !== \\\"\\\\\\\"\\\") ? \\n\\t\\t\\t\\t\\t\\t{ type:\\\"string\\\", value: options._params[i+1].slice(0,options._params[i+1].length-1)} : config._params[i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tattributes[options._srcName] = {type: \\\"string\\\", value: textInner}\\n\\t\\t\\troot.push({ type: type,\\n\\t\\t\\t\\t\\t\\ttag: options._element,\\n\\t\\t\\t\\t\\t\\tattributes: attributes,\\n\\t\\t\\t\\t\\t\\tchildren: tree})\\n\\t\\t} else {\\n\\t\\t\\troot.push( { type: \\\"element\\\", tag: options._element, attributes: attributes, children: tree});\\n\\t\\t}\\n\\t}\\n\\t// Return the paragraph\\n\\treturn root;\\n};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/plugins/wikilabs/custom-markup/wikirules/glyphtext.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wikirules/glyphtext.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/glyphtext.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for ticktext and angletext\\n\\nDetect\\n\\n´asdf.my.Class This is some text with a name and class\\n´.a.b.c.d This is some text with class\\n\\n»»»asdf.my.Class This is some text with a name and class\\n».a.b.c.d This is some text with class\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false exports:false */\\n\\\"use strict\\\";\\n\\nvar CLASS_GROUP = \\\"wltc\\\";\\nvar CLASS_LEVEL = CLASS_GROUP + \\\"-l\\\"; // l .. level\\n\\nexports.name = \\\"ticktext\\\";\\nexports.types = {block: true};\\n\\nvar idTypes = \\\"tick,single,degree,angle,approx,pilcrow,glyph\\\".split(\\\",\\\");\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\n\\tvar self = this,\\n\\t\\tglyphs = [],\\n\\t\\tcustomGlyphs = \\\"\\\";\\n\\n\\t// Regexp to match \\n\\t// match[1] ... all symbols 1-4 ´ or » or ° or , or _\\n\\t// match[2] ... htmlTag ... default DIV\\n\\t// match[3] ... classString\\n//\\tthis.matchRegExp = /((?=´[^´])´|[»≈]{1,4}|(?=°[^°])°|(?=›[^›])›|(?=¶[^¶])¶)((?:[^\\\\.:\\\\r\\\\n\\\\s]+))?(\\\\.(?:[^:\\\\r\\\\n\\\\s]+))?((:\\\".*?\\\")*)/mg; // V0.9.1 -> V0.21.2\\n\\n\\tif (glyphs.length > 0) {\\n\\t\\tglyphs.map( function(glyph) {\\n\\t\\t\\tcustomGlyphs += `|(?=${glyph}[^${glyph}])${glyph}`;\\n\\t\\t\\tidTypes.push(glyph); // make sure registered glyphs are known. \\n\\t\\t})\\n\\t\\tcustomGlyphs += `)`;\\n\\t} else {\\n\\t\\tcustomGlyphs = `)`;\\n\\t}\\n\\n\\tthis.matchRegExp = new RegExp( `((?=´[^´])´|[»≈]{1,4}|(?=°[^°])°|(?=›[^›])›|(?=¶[^¶])¶` + customGlyphs + \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t'((?:[^\\\\\\\\.:\\\\\\\\r\\\\\\\\n\\\\\\\\s]+))?(\\\\\\\\.(?:[^:\\\\\\\\r\\\\\\\\n\\\\\\\\s]+))?((:\\\".*?\\\")*)', \\\"mg\\\"); // V0.22.0\\n\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText || {};\\n\\n\\tthis.pc = this.p.configTickText;\\n\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})\\n\\n\\tthis.pc.X = {}; // There is a naming problem  TODO .. X is possible now. \\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t/*\\n\\tSkip the endstring at the current position. Options are:\\n\\ttreatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n\\t*/\\n\\tfunction skipEndString (endString) {\\n\\t\\tvar endRegExp = (endString instanceof RegExp) ? new RegExp(endString, \\\"mg\\\") : new RegExp(\\\"(\\\" + $tw.utils.escapeRegExp(endString) + \\\")\\\",\\\"mg\\\")\\n\\t\\tendRegExp.lastIndex = self.parser.pos;\\n\\t\\tvar endMatch = endRegExp.exec(self.parser.source);\\n\\t\\tif(endMatch && endMatch.index === self.parser.pos) {\\n\\t\\t\\tself.parser.pos = endRegExp.lastIndex;\\n\\t\\t}\\n\\t}\\n\\n//---------------------\\n\\tvar self = this,\\n\\t\\ttree = [],\\n\\t\\troot = [];\\n\\n\\t// Get all the details of the match\\n\\tvar id,\\n\\t\\tlevel    = (this.match[1]) ? this.match[1].length : 0,\\n\\t\\tsym      = this.match[2], // needs to be undefined if no match\\n\\t\\t_classes = (this.match[3]) ? this.match[3] : \\\"\\\",\\n\\t\\t_params  = (this.match[4]) ? this.match[4] : \\\"\\\";\\n\\n\\tvar useParagraph = false; // use paragraph by default\\n\\n\\t// global custom pragmas\\n\\tvar gPc,\\n\\t\\ttemplate = \\\"$:/config/custom-markup/pragma/PageTemplate\\\";\\n\\n\\tif (!this.parser.wiki.caches[template].blockParseTree) {\\n\\t\\tthis.parser.wiki.parseTiddler(template);\\n\\t}\\n\\tgPc = this.parser.wiki.caches[template].blockParseTree.configTickText;\\n\\n\\tswitch (this.match[1][0]) {\\n\\t\\tcase \\\"»\\\":\\n\\t\\t\\tid = \\\"angle\\\";\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t\\tcase \\\"≈\\\":\\n\\t\\t\\tid = \\\"approx\\\";\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t\\tcase \\\"¶\\\":\\n\\t\\t\\tid = \\\"pilcrow\\\";\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t\\tcase \\\"´\\\":\\n\\t\\t\\tid = \\\"tick\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"›\\\":\\n\\t\\t\\tid = \\\"single\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"°\\\":\\n\\t\\t\\tid = \\\"degree\\\"\\n\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tid = this.match[1][0];\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t}\\n\\n\\t// \\\"_debug\\\" is a binary parameter\\n\\tvar options = {symbol: sym, _mode : \\\"inline\\\", _element : (useParagraph) ? \\\"p\\\" : \\\"div\\\", _classes : _classes,\\n\\t\\t_endString : \\\"\\\", _use: \\\"\\\", _useGlobal: \\\"\\\", _debug: false, _debugString: \\\"\\\", _srcName:\\\"src\\\", _params : (_params !== \\\"\\\") ? _params.split(':\\\"') : [] };\\n\\n\\tvar textEndInner,\\n\\t\\ttextStartInner,\\n\\t\\ttextEnd,\\n\\t\\ttextStart = this.parser.pos; // remember text postions for widget text handling\\n\\n\\t// Move past the start symbol\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\t// remember text postions for macro src handling\\n\\ttextStartInner = this.parser.pos\\n\\t// Parse any classes, whitespace and then the heading itself\\n\\tvar classes = _classes.split(\\\".\\\");\\n\\n\\tvar forceDebug = false,\\n\\t\\t_useError = false,\\n\\t\\ttmpUse = \\\"\\\";\\n\\n\\tvar config = {};\\n\\n\\t// !!! The order of the checks is important!!! TODO make this nicer\\n\\tif (!sym && this.pc[id][\\\"true\\\"]) {\\n\\t// ID is locally defined\\n\\t\\tforceDebug = (this.pc[id][\\\"true\\\"]._debug) ? this.pc[id][\\\"true\\\"]._debug : false;\\n\\t\\tsym = (this.pc[id][\\\"true\\\"]._use) ? this.pc[id][\\\"true\\\"]._use : true;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t} else if (sym && this.pc[id][sym] && this.pc[id][sym]._use)  {\\n\\t\\t// ID and _use are locally defined\\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tif ((sym === this.pc[id][sym]._use) && (this.pc[id][sym].imported !== true)) {\\n\\t\\t\\t// error Can't use itself\\n\\t\\t\\t_useError = \\\"Error - \\\\\\\\custom \\\" + id + \\\"=\\\" + sym + \\\" _use=\\\" + sym + \\\" is not possible!<br>Try: _useGlobal instead\\\";\\n\\t\\t\\tforceDebug = true;\\n\\t\\t}\\n\\t\\ttmpUse = this.pc[id][sym]._use;\\n\\t\\tconfig = this.pc[id][tmpUse];\\n\\n\\t\\tif (config) {\\n\\t\\t\\t$tw.utils.extend(config, this.pc[id][sym])\\n\\t\\t} else {\\n\\t\\t\\t// error no pragma with that name\\n\\t\\t\\t_useError = \\\"Error - \\\\\\\\custom \\\" + id + \\\"=\\\" + tmpUse + \\\" is not defined!\\\";\\n\\t\\t\\tforceDebug = true;\\n\\t\\t\\tconfig = {};\\n\\t\\t}\\n\\t} else if (sym && this.pc[id][sym] && this.pc[id][sym]._useGlobal && gPc[id][this.pc[id][sym]._useGlobal] )  {\\n\\t\\t// Use global symbol \\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tsym = this.pc[id][sym]._useGlobal;\\n\\n\\t\\t// Switch to global configuration   TODO duplicated code\\n\\t\\tforceDebug = (forceDebug) ? forceDebug : (gPc[id][sym]._debug) ? gPc[id][sym]._debug : false;\\n\\t\\tconfig = gPc[id][sym];\\n\\t} else if (sym && this.pc[id][sym])  {\\n\\t\\t// Switch to local configuration\\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t} else if (sym && gPc[id][sym])  {\\n\\t\\t// Switch to global configuration\\n\\t\\tforceDebug = (gPc[id][sym]._debug) ? gPc[id][sym]._debug : false;\\n\\t\\tconfig = gPc[id][sym];\\n\\t} else if (sym !== \\\"\\\") {\\n\\t// Check if symbol is an HTML element\\n\\t\\tvar isBlock = ($tw.config.cmBlockElements.indexOf(sym) !== -1);\\n\\t\\tvar isInline = ($tw.config.cmInlineElements.indexOf(sym) !== -1)\\n\\t\\toptions._element = ( isBlock || isInline ) ? sym : options._element;\\n\\t\\toptions._mode = (isBlock) ? \\\"block\\\" : options._mode;\\n\\t\\tconfig = this.pc[id][sym];\\n\\t}\\n\\n\\tif (config) {\\n\\t\\toptions.symbol = config.symbol || options.symbol;\\n\\t\\toptions._endString = config._endString || options._endString;\\n\\t\\toptions._mode = config._mode || options._mode;\\n\\t\\toptions._element = config._element || options._element;\\n\\t\\toptions._classes = options._classes + ((config._classes) ? config._classes : \\\"\\\");\\n\\n\\t\\tif (forceDebug) options._debug = forceDebug;\\n\\t\\telse options._debug = config._debug || options._debug;\\n\\n\\t\\toptions._debugString = (_useError) ? _useError : config._debugString || options._debugString;\\n\\t\\toptions._srcName = config._srcName || options._srcName;\\n\\n\\t\\tclasses = (options._classes).split(\\\".\\\") // pragma _classes are added to tick _classes\\n\\t}\\n\\n\\tvar oneBlock = false;\\n\\n\\tif ((options._mode === \\\"block\\\") ) { //&& (options._endString !== \\\"\\\")) {\\n\\t\\t// standard rendering\\n\\t\\t// no GROUP in block mode\\n\\t\\tclasses.push(CLASS_LEVEL + level + \\\" \\\" + CLASS_GROUP);\\n\\n\\t\\tif (options._endString === \\\"\\\") {\\n\\t\\t\\toptions._endString = (useParagraph) ? \\\"\\\\\\\\r?\\\\\\\\n\\\\\\\\r?\\\\\\\\n\\\" : \\\"\\\\\\\\r?\\\\\\\\n\\\";\\n\\t\\t\\toneBlock = true;\\n\\t\\t} \\n\\n\\t\\ttree = (oneBlock) ? this.parser.parseBlock(options._endString) : this.parser.parseBlocks(options._endString);\\n\\t} else {\\n\\t\\t// apply CLASS_GROUP only if in inline mode. \\n\\t\\tclasses.push(CLASS_LEVEL + level + \\\" \\\" + CLASS_GROUP);\\n\\n\\t\\tif (options._endString === \\\"\\\") {\\n\\t\\t\\ttree = this.parser.parseInlineRun((useParagraph) ? /(\\\\r?\\\\n\\\\r?\\\\n)/mg : /(\\\\r?\\\\n)/mg);// OK for single new-line\\n\\t\\t} else {\\n\\t\\t\\ttree = this.parser.parseInlineRun(new RegExp(\\\"(\\\" + $tw.utils.escapeRegExp(options._endString) + \\\"$)\\\",\\\"mg\\\"));\\n\\t\\t}\\n\\t}\\n\\t// remember text postions for macro src handling\\n\\ttextEndInner = this.parser.pos - options._endString.length;\\n\\n\\tskipEndString(options._endString);\\n\\n\\ttextEnd = this.parser.pos;\\n\\n\\tvar attributes = {\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: classes.join(\\\" \\\").trim()}\\n\\t\\t}\\n\\n\\tvar fixAttributes = [\\\"pilcrow\\\", \\\"tick\\\", \\\"angle\\\", \\\"approx\\\", \\\"single\\\", \\\"degree\\\", \\\"symbol\\\", \\n\\t\\t\\t\\t\\t\\t\\\"_endString\\\", \\\"_mode\\\", \\\"_element\\\", \\\"_classes\\\", \\\"_use\\\", \\\"_useGlobal\\\",\\n\\t\\t\\t\\t\\t\\t\\\"_params\\\", \\\"_srcName\\\", \\\"_debug\\\", \\\"_debugString\\\"];\\n\\n\\t// Add attributes, that are not part of the standard attributes\\n\\t// Callback is invoked with (element,title,object)\\n\\t$tw.utils.each(config, function(val,title,obj) {\\n\\t\\tif (fixAttributes.indexOf(title) === -1) {\\n\\t\\t\\tattributes[title] = obj[title];\\n\\t\\t\\t}\\n\\t});\\n\\n\\t// show tick config and code\\n\\tvar showRendered = true;\\n\\tif (options._debug) {\\n\\t\\tswitch (options._debug) {\\n\\t\\t\\tcase \\\"no\\\":\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"both\\\":\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"textOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t//\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"pragmaOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"pragma\\\": \\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (showRendered) {\\n\\t\\t// check if element is a widget\\n\\t\\tif (options._element[0] === \\\"$\\\") {\\n\\t//\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\tvar type = options._element.slice(1);\\n\\n\\t\\t\\tif (config._params && config._params.length > 0 ) {\\n\\t\\t\\t\\tfor (var i=0; i < config._params.length; i++) {\\n\\t\\t\\t\\t\\tattributes[config._params[i].name] = (options._params[i+1] && options._params[i+1] !== \\\"\\\\\\\"\\\") ? \\n\\t\\t\\t\\t\\t\\t{ type:\\\"string\\\", value: options._params[i+1].slice(0,options._params[i+1].length-1)} : config._params[i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tattributes[options._srcName] = {type: \\\"string\\\", value: textInner}\\n\\t\\t\\troot.push({ type: type,\\n\\t\\t\\t\\t\\t\\ttag: options._element,\\n\\t\\t\\t\\t\\t\\tattributes: attributes,\\n\\t\\t\\t\\t\\t\\tchildren: tree})\\n\\t\\t} else {\\n\\t\\t\\troot.push( { type: \\\"element\\\", tag: options._element, attributes: attributes, children: tree});\\n\\t\\t}\\n\\t}\\n\\t// Return the paragraph\\n\\treturn root;\\n};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/plugins/wikilabs/custom-markup/parse-utils.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/parse-utils.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/parse-utils.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nParse tree utility functions.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.addAttributeToParseTreeNodeXX = function(node,name,value) {\\n\\tnode.attributes = node.attributes || {};\\n\\tnode.attributes[name] = {type: \\\"string\\\", value: value};\\n};\\n\\nexports.getAttributeValueFromParseTreeNodeXX = function(node,name,defaultValue) {\\n\\tif(node.attributes && node.attributes[name] && node.attributes[name].value !== undefined) {\\n\\t\\treturn node.attributes[name].value;\\n\\t}\\n\\treturn defaultValue;\\n};\\n\\nexports.addClassToParseTreeNodeXX = function(node,classString) {\\n\\tvar classes = [];\\n\\tnode.attributes = node.attributes || {};\\n\\tnode.attributes[\\\"class\\\"] = node.attributes[\\\"class\\\"] || {type: \\\"string\\\", value: \\\"\\\"};\\n\\tif(node.attributes[\\\"class\\\"].type === \\\"string\\\") {\\n\\t\\tif(node.attributes[\\\"class\\\"].value !== \\\"\\\") {\\n\\t\\t\\tclasses = node.attributes[\\\"class\\\"].value.split(\\\" \\\");\\n\\t\\t}\\n\\t\\tif(classString !== \\\"\\\") {\\n\\t\\t\\t$tw.utils.pushTop(classes,classString.split(\\\" \\\"));\\n\\t\\t}\\n\\t\\tnode.attributes[\\\"class\\\"].value = classes.join(\\\" \\\");\\n\\t}\\n};\\n\\nexports.addStyleToParseTreeNodeXX = function(node,name,value) {\\n\\t\\tnode.attributes = node.attributes || {};\\n\\t\\tnode.attributes.style = node.attributes.style || {type: \\\"string\\\", value: \\\"\\\"};\\n\\t\\tif(node.attributes.style.type === \\\"string\\\") {\\n\\t\\t\\tnode.attributes.style.value += name + \\\":\\\" + value + \\\";\\\";\\n\\t\\t}\\n};\\n\\nexports.findParseTreeNodeXX = function(nodeArray,search) {\\n\\tfor(var t=0; t<nodeArray.length; t++) {\\n\\t\\tif(nodeArray[t].type === search.type && nodeArray[t].tag === search.tag) {\\n\\t\\t\\treturn nodeArray[t];\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/*\\nHelper to get the text of a parse tree node or array of nodes\\n*/\\nexports.getParseTreeTextXX = function getParseTreeText(tree) {\\n\\tvar output = [];\\n\\tif($tw.utils.isArray(tree)) {\\n\\t\\t$tw.utils.each(tree,function(node) {\\n\\t\\t\\toutput.push(getParseTreeText(node));\\n\\t\\t});\\n\\t} else {\\n\\t\\tif(tree.type === \\\"text\\\") {\\n\\t\\t\\toutput.push(tree.text);\\n\\t\\t}\\n\\t\\tif(tree.children) {\\n\\t\\t\\treturn getParseTreeText(tree.children);\\n\\t\\t}\\n\\t}\\n\\treturn output.join(\\\"\\\");\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/plugins/wikilabs/custom-markup/wikirules/custom.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wikirules/custom.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/custom.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for whitespace specifications\\n\\n```\\n\\\\custom tick=§ _element=div _endString= _mode= _classes= _use=\\n\\n\\\\custom angle=x _element=span _classes=.i.j.c.cp _endString=eee\\n\\n\\\\custom single=det _element=\\\"details\\\" _classes=\\\"\\\" _endString=\\\"—\\\"\\n\\n\\\\custom degree=sum _element=\\\"summary\\\"\\n\\n\\\\custom tick _element=span\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false, exports:false*/\\n\\\"use strict\\\";\\n\\nexports.name = \\\"custom\\\";\\nexports.types = {pragma: true};\\n\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"angle\\\", \\\"approx\\\", \\\"pilcrow\\\", \\\"corner\\\", \\\"braille\\\", \\\"slash\\\"];\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tvar self = this;\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\custom[^\\\\S\\\\n]/mg;\\n\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\n\\t\\n\\tthis.pc = this.p.configTickText;\\n\\t\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})\\n};\\n\\n\\n/* parse attributes\\nvar s = '<option value=\\\"\\\" data-foo=\\\"{{te st}}\\\" readonly>Value 1</option>';\\n\\nvar test_element = document.createElement('div');\\ntest_element.innerHTML = s;\\n\\nvar element = test_element.childNodes[0];\\nvar attributes = element.attributes;\\n\\nfor (var i = 0; i < attributes.length; i++) {\\n    var attribute = attributes[i];\\n\\n    console.log(attribute.name, '=>', attribute.value);\\n}\\n*/\\n\\nfunction parseAttributes(source) {\\n\\tvar pos = 0,\\n\\t\\tattributes= [];\\n\\n\\t// Process attributes\\n\\tvar attribute = $tw.utils.parseAttribute(source,pos);\\n\\twhile(attribute) {\\n\\t\\tattributes.push(attribute);\\n\\t\\tpos = attribute.end;\\n\\t\\t// Get the next attribute\\n\\t\\tattribute = $tw.utils.parseAttribute(source,pos);\\n\\t}\\n\\treturn attributes;\\n}\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse line terminated by a line break\\n\\tvar reMatch = /([^\\\\n]*\\\\S)|(\\\\r?\\\\n)/mg,\\n\\t\\tline = \\\"\\\";\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\twhile(match && match.index === this.parser.pos) {\\n\\t\\tthis.parser.pos = reMatch.lastIndex;\\n\\t\\t// Exit if we've got the line break\\n\\t\\tif(match[2]) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Process the token\\n\\t\\tif(match[1]) {\\n\\t\\t\\tline = (match[1]);\\n\\t\\t}\\n\\t\\t// Match the next token\\n\\t\\tmatch = reMatch.exec(this.parser.source);\\n\\t}\\n\\t\\n\\tvar attributes = parseAttributes(line);\\n\\n\\t// \\\\ticktext tick=x htmlTag=div params=\\\".i.j.c.cp\\\" end=\\\"eee\\\"\\n\\tvar id = \\\"X\\\", // There should be no id X!!\\n//\\t\\tconfigTickText = {_mode:\\\"\\\", _element:\\\"\\\", _classes:\\\"\\\", _endString:\\\"\\\"};\\n\\t\\tconfigTickText = {};\\n\\n\\tvar debugString = \\\"\\\\\\\\custom\\\",\\n\\t\\ttValue = \\\"\\\";\\n\\t\\n\\t$tw.utils.each(attributes,function(token) {\\n\\t\\tif (idTypes.indexOf(token.name) >= 0) {\\n\\t\\t\\tid = token.name;\\n\\t\\t\\tconfigTickText.symbol = token.value;\\n\\t\\t\\tdebugString += \\\" \\\" + id + \\\"='\\\" + token.value + \\\"'\\\";\\n\\t\\t}\\n\\t\\t// switch(token.name) {\\n\\t\\t// \\tcase \\\"tick\\\": // All fall through's are intentional\\n\\t\\t// \\tcase \\\"angle\\\": \\n\\t\\t// \\tcase \\\"approx\\\":\\n\\t\\t// \\tcase \\\"single\\\":\\n\\t\\t// \\tcase \\\"degree\\\":\\n\\t\\t// \\tcase \\\"pilcrow\\\":\\n\\t\\t// \\tcase \\\"corner\\\":\\n\\t\\t// \\tcase \\\"braille\\\":\\n\\t\\t// \\tcase \\\"slash\\\": // fall through\\n\\t\\t// \\t\\tid = token.name;\\n\\t\\t// \\t\\tconfigTickText.symbol = token.value;\\n\\t\\t// \\t\\tdebugString += \\\" \\\" + id + \\\"='\\\" + token.value + \\\"'\\\";\\n\\t\\t// \\tbreak;\\n\\t\\t// \\tdefault: // define the glyph itself\\n\\t\\t// \\t\\tid = attributes[0].name\\n\\t\\t// \\t\\tconfigTickText.symbol = token.value;\\n\\t\\t// \\t\\tdebugString += \\\" \\\" + id + \\\"='\\\" + token.value + \\\"'\\\";\\n\\t\\t// \\tbreak;\\n\\t\\t// }\\n\\t\\tswitch(token.name) {\\n\\t\\t\\tcase \\\"_classes\\\":\\n\\t\\t\\tcase \\\"_debug\\\":\\n\\t\\t\\tcase \\\"_mode\\\":\\n\\t\\t\\tcase \\\"_element\\\":\\n\\t\\t\\tcase \\\"_classes\\\":\\n\\t\\t\\tcase \\\"_endString\\\":\\n\\t\\t\\tcase \\\"_use\\\":\\n\\t\\t\\tcase \\\"_useGlobal\\\":\\n\\t\\t\\tcase \\\"_srcName\\\": // falltrough\\n\\t\\t\\t\\tconfigTickText[token.name] = token.value;\\n\\t\\t\\t\\tdebugString += \\\" \\\" + token.name + \\\"='\\\" + token.value + \\\"'\\\";\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"_params\\\":\\n\\t\\t\\t\\tconfigTickText[token.name] = parseAttributes(token.value);\\n\\t\\t\\t\\tdebugString += \\\" \\\" + token.name + \\\"='\\\" + token.value + \\\"'\\\";\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tconfigTickText[token.name] = token || {};\\n\\t\\t\\t\\ttValue = (token.type === \\\"macro\\\") ? \\\"<<\\\" + token.value.name + \\\">>\\\": \\n\\t\\t\\t\\t\\t\\t(token.type === \\\"indirect\\\") ? \\\"{{\\\" + token.textReference + \\\"}}\\\" : \\\"'\\\" + token.value + \\\"'\\\";\\n\\t\\t\\t\\tdebugString += \\\" \\\" + token.name + \\\"=\\\" + tValue; \\n\\t\\t}\\n\\t});\\n\\n// if _debug is set by _use in an other tiddler, we need the _debugString!\\n// \\tvar debugString = \\\"\\\\\\\\custom\\\";\\n// \\tObject.keys(configTickText).map( function(x) {\\n// \\t\\tif (x == \\\"symbol\\\") debugString += ' ' + id + '=\\\"' + configTickText[x] + '\\\"';\\n// \\t\\telse if (x == \\\"_debug\\\") debugString;\\n// \\t\\telse debugString += ' ' + x + '=\\\"' + \\\"{...}\\\" + '\\\"'; \\n// //\\t\\telse debugString += ' ' + x + '=\\\"' + JSON.stringify(configTickText[x], null, 2) + '\\\"'; \\n// \\t})\\n\\tconfigTickText._debugString = debugString;\\n\\n\\tthis.pc[id][configTickText.symbol] = configTickText;\\n\\t// No parse tree nodes to return\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-custom.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-custom.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-custom.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nReturns a JSON info of parser.configTickText\\n\\n```\\n\\\\debugcustom\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false, exports:false*/\\n\\\"use strict\\\";\\n\\nexports.name = \\\"debugcustom\\\";\\nexports.types = {pragma: true};\\n\\t\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"angle\\\", \\\"approx\\\", \\\"pilcrow\\\", \\\"corner\\\", \\\"braille\\\", \\\"slash\\\"];\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tvar self = this;\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\debugcustom[^\\\\S\\\\n]/mg;\\n\\t\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\n\\t\\n\\tthis.pc = this.p.configTickText;\\n\\t\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar text = \\\"\\\";\\n\\t\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse line terminated by a line break\\n\\tvar reMatch = /(.*)\\\\r?\\\\n?|$/mg;\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\tthis.parser.pos = reMatch.lastIndex;\\n\\n\\tvar config = this.pc,\\n\\t\\tglobal = this.p.wiki.caches[\\\"$:/config/custom-markup/pragma/PageTemplate\\\"].blockParseTree.configTickText,\\n\\t\\tfoundKey = false,\\n\\t\\ttest=[];\\n\\t\\n\\tif (match[0] === \\\"\\\" ) test = [\\\"\\\"]\\n\\telse test = (match[1]) ? match[1].split(/[ \\\\t]+/) : [\\\"\\\"];\\n\\n\\tif (test[0] === \\\"no\\\") {\\n\\t\\treturn [];\\n\\t} else if (test[0] === \\\"global\\\") {\\n\\t\\tif (test[1] === \\\"list\\\") {\\n\\t\\t\\ttext += \\\"global list:\\\\n\\\" \\n\\t\\t\\tObject.keys(global).map( function(el) {\\n\\t\\t\\t\\tvar x = Object.keys(global[el]);\\n\\t\\t\\t\\tif (x.length > 0) {\\n\\t\\t\\t\\t\\ttext += \\\"  - \\\" + el + \\\" {..}\\\\n\\\"\\n\\t\\t\\t\\t\\tfoundKey = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\ttext += (foundKey === false) ? \\\"  - no keys with values found!\\\" : \\\"\\\";\\n\\t\\t} else if (test[1]) {\\n\\t\\t\\ttext += \\\"global \\\" + test[1] + \\\":\\\\n\\\" + \\n\\t\\t\\tJSON.stringify(global[test[1]], null, 2)\\n\\t\\t} else {\\n\\t\\t\\ttext += \\\"global all:\\\\n\\\" + JSON.stringify(global, null, 2)\\n\\t\\t}\\n\\t\\ttext += \\\"\\\\n\\\"\\n\\t} else {\\n\\t\\tif (test[0] === \\\"list\\\") {\\n\\t\\t\\ttext += \\\"local list:\\\\n\\\" \\n\\t\\t\\tObject.keys(config).map( function(el) {\\n\\t\\t\\t\\tvar x = Object.keys(config[el]);\\n\\t\\t\\t\\tif (x.length > 0) {\\n\\t\\t\\t\\t\\tfoundKey = true;\\n\\t\\t\\t\\t\\ttext += \\\"  - \\\" + el + \\\" {..}\\\\n\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\ttext += (foundKey === false) ? \\\"  - no keys with values found!\\\" : \\\"\\\";\\n\\t\\t} else if (test[0] === \\\"all\\\" || test[0] === \\\"\\\") {\\n\\t\\t\\ttext += \\\"local all:\\\\n\\\" + JSON.stringify(config, null, 2)\\n\\t\\t} else {\\n\\t\\t\\ttext += \\\"local \\\" + test[0] + \\\":\\\\n\\\" + JSON.stringify(config[test[0]], null, 2)\\n\\t\\t}\\n\\t}\\n\\n\\treturn [{\\n\\t\\ttype: \\\"codeblock\\\",\\n\\t\\tattributes: {\\n\\t\\t\\t\\tcode: {type: \\\"string\\\", value: text}\\n\\t\\t}\\n\\t}]\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\":{\"title\":\"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule to import pragmas from other tiddlers\\n\\n```\\n\\\\importcustom [[pragma-global]] ... filter\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false, exports:false*/\\n\\\"use strict\\\";\\n\\nexports.name = \\\"importcustom\\\";\\nexports.types = {pragma: true};\\n\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"angle\\\", \\\"approx\\\", \\\"pilcrow\\\", \\\"corner\\\", \\\"braille\\\", \\\"slash\\\"];\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tvar self = this;\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\importcustom[^\\\\S\\\\n]/mg;\\n\\t\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\n\\t\\n\\tthis.pc = this.p.configTickText;\\n\\t\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar self = this,\\n\\t\\tfilter,\\n\\t\\ttiddlerList;\\n\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse line terminated by a line break\\n\\tvar reMatch = /(.*)\\\\r?\\\\n?|$/mg;\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\tthis.parser.pos = reMatch.lastIndex;\\n\\t\\n\\tif (match) {\\n\\t\\tfilter = match[1];\\n\\t\\ttiddlerList = $tw.wiki.filterTiddlers(filter);\\n\\t}\\n\\n\\t$tw.utils.each(tiddlerList,function(title) {\\n\\t\\tvar pragmaInParser = $tw.wiki.parseText(\\\"text/vnd.tiddlywiki\\\", $tw.wiki.getTiddlerText(title));\\n\\t\\t\\n\\t\\tidTypes.map( function(id) {\\n\\t\\t\\tpragmaInParser.configTickText[id];\\n\\t\\t\\tObject.keys(pragmaInParser.configTickText[id]).map(function (key) {\\n\\t\\t\\t\\tpragmaInParser.configTickText[id][key].imported = true;\\n\\t\\t\\t})\\n\\t\\t\\t$tw.utils.extend(self.pc[id], pragmaInParser.configTickText[id]);\\n\\t\\t})\\n\\t});\\n\\n\\t// No parse tree nodes to return\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"}}}","author":"wikilabs"}