{"title":"$:/plugins/oeyoews/markdown-it-abbr","description":"markdown-it-abbr","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"markdown-it-abbr","meat#disabled":"yes","qrcode":"yes","created":"2023-12-28","dependents":"","parent-plugin":"$:/plugins/oeyoews/markdown-extensions-startup","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/markdown-it-abbr/readme\":{\"title\":\"$:/plugins/oeyoews/markdown-it-abbr/readme\",\"text\":\"<!-- plugin template readme -->\\n\\n## Motivation\\n\\n<!-- your plugin motivation, or why you write this plugin -->\\n\",\"type\":\"text/markdown\",\"description\":\"markdown-it-abbr\"},\"$:/plugins/oeyoews/markdown-it-abbr/markdown-it-abbr.js\":{\"title\":\"$:/plugins/oeyoews/markdown-it-abbr/markdown-it-abbr.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/markdown-it-abbr/markdown-it-abbr.js\\ntype: application/javascript\\nmodule-type: markdownit\\nhide-body: yes\\n\\n\\\\*/\\n/*! markdown-it-abbr 1.0.4 https://github.com//markdown-it/markdown-it-abbr @license MIT */\\n!(function (e) {\\n  if ('object' == typeof exports && 'undefined' != typeof module)\\n    module.exports = e();\\n  else if ('function' == typeof define && define.amd) define([], e);\\n  else {\\n    var n;\\n    (n =\\n      'undefined' != typeof window\\n        ? window\\n        : 'undefined' != typeof global\\n          ? global\\n          : 'undefined' != typeof self\\n            ? self\\n            : this),\\n      (n.markdownitAbbr = e());\\n  }\\n})(function () {\\n  return (function e(n, t, r) {\\n    function i(a, s) {\\n      if (!t[a]) {\\n        if (!n[a]) {\\n          var f = 'function' == typeof require && require;\\n          if (!s && f) return f(a, !0);\\n          if (o) return o(a, !0);\\n          var u = new Error(\\\"Cannot find module '\\\" + a + \\\"'\\\");\\n          throw ((u.code = 'MODULE_NOT_FOUND'), u);\\n        }\\n        var c = (t[a] = { exports: {} });\\n        n[a][0].call(\\n          c.exports,\\n          function (e) {\\n            var t = n[a][1][e];\\n            return i(t ? t : e);\\n          },\\n          c,\\n          c.exports,\\n          e,\\n          n,\\n          t,\\n          r\\n        );\\n      }\\n      return t[a].exports;\\n    }\\n    for (\\n      var o = 'function' == typeof require && require, a = 0;\\n      a < r.length;\\n      a++\\n    )\\n      i(r[a]);\\n    return i;\\n  })(\\n    {\\n      1: [\\n        function (e, n, t) {\\n          'use strict';\\n          n.exports = function (e) {\\n            function n(e, n, t, r) {\\n              var i,\\n                o,\\n                a,\\n                s,\\n                f,\\n                u = e.bMarks[n] + e.tShift[n],\\n                c = e.eMarks[n];\\n              if (u + 2 >= c) return !1;\\n              if (42 !== e.src.charCodeAt(u++)) return !1;\\n              if (91 !== e.src.charCodeAt(u++)) return !1;\\n              for (s = u; u < c; u++) {\\n                if (((a = e.src.charCodeAt(u)), 91 === a)) return !1;\\n                if (93 === a) {\\n                  f = u;\\n                  break;\\n                }\\n                92 === a && u++;\\n              }\\n              return (\\n                !(f < 0 || 58 !== e.src.charCodeAt(f + 1)) &&\\n                (!!r ||\\n                  ((i = e.src.slice(s, f).replace(/\\\\\\\\(.)/g, '$1')),\\n                  (o = e.src.slice(f + 2, c).trim()),\\n                  0 !== i.length &&\\n                    0 !== o.length &&\\n                    (e.env.abbreviations || (e.env.abbreviations = {}),\\n                    'undefined' == typeof e.env.abbreviations[':' + i] &&\\n                      (e.env.abbreviations[':' + i] = o),\\n                    (e.line = n + 1),\\n                    !0)))\\n              );\\n            }\\n            function t(e) {\\n              var n,\\n                t,\\n                f,\\n                u,\\n                c,\\n                l,\\n                b,\\n                p,\\n                d,\\n                h,\\n                v,\\n                g,\\n                x,\\n                y = e.tokens;\\n              if (e.env.abbreviations)\\n                for (\\n                  g = new RegExp(\\n                    '(?:' +\\n                      Object.keys(e.env.abbreviations)\\n                        .map(function (e) {\\n                          return e.substr(1);\\n                        })\\n                        .sort(function (e, n) {\\n                          return n.length - e.length;\\n                        })\\n                        .map(r)\\n                        .join('|') +\\n                      ')'\\n                  ),\\n                    v =\\n                      '(^|' +\\n                      a +\\n                      '|' +\\n                      s +\\n                      '|[' +\\n                      o.split('').map(r).join('') +\\n                      '])(' +\\n                      Object.keys(e.env.abbreviations)\\n                        .map(function (e) {\\n                          return e.substr(1);\\n                        })\\n                        .sort(function (e, n) {\\n                          return n.length - e.length;\\n                        })\\n                        .map(r)\\n                        .join('|') +\\n                      ')($|' +\\n                      a +\\n                      '|' +\\n                      s +\\n                      '|[' +\\n                      o.split('').map(r).join('') +\\n                      '])',\\n                    d = new RegExp(v, 'g'),\\n                    t = 0,\\n                    f = y.length;\\n                  t < f;\\n                  t++\\n                )\\n                  if ('inline' === y[t].type)\\n                    for (u = y[t].children, n = u.length - 1; n >= 0; n--)\\n                      if (\\n                        ((x = u[n]),\\n                        'text' === x.type &&\\n                          ((p = 0),\\n                          (l = x.content),\\n                          (d.lastIndex = 0),\\n                          (b = []),\\n                          g.test(l)))\\n                      ) {\\n                        for (; (h = d.exec(l)); )\\n                          (h.index > 0 || h[1].length > 0) &&\\n                            ((c = new e.Token('text', '', 0)),\\n                            (c.content = l.slice(p, h.index + h[1].length)),\\n                            b.push(c)),\\n                            (c = new e.Token('abbr_open', 'abbr', 1)),\\n                            (c.attrs = [\\n                              ['title', e.env.abbreviations[':' + h[2]]]\\n                            ]),\\n                            b.push(c),\\n                            (c = new e.Token('text', '', 0)),\\n                            (c.content = h[2]),\\n                            b.push(c),\\n                            (c = new e.Token('abbr_close', 'abbr', -1)),\\n                            b.push(c),\\n                            (d.lastIndex -= h[3].length),\\n                            (p = d.lastIndex);\\n                        b.length &&\\n                          (p < l.length &&\\n                            ((c = new e.Token('text', '', 0)),\\n                            (c.content = l.slice(p)),\\n                            b.push(c)),\\n                          (y[t].children = u = i(u, n, b)));\\n                        // Set cursor pointer to help for each abbr element\\n                        u.forEach((token) => {\\n                          if (token.type === 'abbr_open') {\\n                            token.attrPush(['style', 'cursor: help']);\\n                          }\\n                        });\\n                      }\\n            }\\n            var r = e.utils.escapeRE,\\n              i = e.utils.arrayReplaceAt,\\n              o = ' \\\\r\\\\n$+<=>^`|~',\\n              a = e.utils.lib.ucmicro.P.source,\\n              s = e.utils.lib.ucmicro.Z.source;\\n            e.block.ruler.before('reference', 'abbr_def', n, {\\n              alt: ['paragraph', 'reference']\\n            }),\\n              e.core.ruler.after('linkify', 'abbr_replace', t);\\n          };\\n        },\\n        {}\\n      ]\\n    },\\n    {},\\n    [1]\\n  )(1);\\n});\\n\",\"type\":\"application/javascript\",\"module-type\":\"markdownit\",\"hide-body\":\"yes\"}}}"}