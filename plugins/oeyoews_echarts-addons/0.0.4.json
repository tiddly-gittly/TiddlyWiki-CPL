{"version":"0.0.4","type":"application/json","title":"$:/plugins/oeyoews/echarts-addons","plugin-type":"plugin","name":"Echarts Addons","description":"Addons","author":"oeyoews","meta#disabled":"yes","parent-plugin":"$:/plugins/Gk0Wk/echarts","list":"readme","dependents":"","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/echarts-addons/readme\":{\"title\":\"$:/plugins/oeyoews/echarts-addons/readme\",\"type\":\"text/markdown\",\"text\":\"<!-- <$badge icon=\\\"echarts\\\" /> -->\\n\\n[img[https://i.imgur.com/9BEZnR3.png]]\\r\\n[img[https://i.imgur.com/myoq7V4.png]]\\r\\n[img[https://i.imgur.com/Zz1Qe8i.png]]\\n\\n> 目前支持 clockc, tagpie, sevenday, 三种 addon\\n\\n* 将 echarts 的 addons 独立出来，使用 js 编写，不依赖外部环境，即使在 tw 里面也能快速修改，方便用户修改\\n\\n## Usage\\n\\n> coming ...\\n\\n## TODO\\n\\n* update tooltip style to fix darkmode\\r\\n* support qrcode field to show current tiddler url qrcode\\n\\n<$qrcode type=url />\"},\"addon/bookprogress.js\":{\"title\":\"addon/bookprogress.js\",\"text\":\"/*\\\\\\ntitle: addon/bookprogress.js\\ntype: application/javascript\\ndescription:\\n\\n// module-type: echarts-component\\n\\n\\\\*/\\nconst getData = (tag) => {\\n  return {\\n    name: tag,\\n    value: $tw.wiki.filterTiddlers(`[tag[${tag}]!has[draft.of]]`).length\\n  };\\n};\\n\\nconst goto = new $tw.Story();\\n\\nconst BookProgress = {\\n  onUpdate(myChart, _, addonAttributes) {\\n    const {\\n      title: text,\\n      filter = '[tags[]!prefix[$:/]]',\\n      sort = 'descend',\\n      width = 2,\\n      radius = 10,\\n      toolbox = 'hide',\\n      doughnut,\\n      focusSelf,\\n      legend\\n    } = addonAttributes;\\n    // NOTE: data 必须在执行 onUpdate 函数的时候获取到最新数据，不要写在 onUpdate 函数外面\\n    const data = [];\\n\\n    // alpha sort default\\n    // 超过 50 不显示\\n    const tags = $tw.wiki.filterTiddlers(filter).slice(0, 50).sort();\\n    tags.forEach((tag) => data.push(getData(tag)));\\n\\n    const borderWidth = data.length > 10 ? 0 : width;\\n    const borderRadius = data.length > 10 ? 5 : radius;\\n\\n    // 如果类型过多，width 自动设置为 0, 此时无视用户的 width 配置\\n    // 配置具体参考 echarts 官方文档\\n    const option = {\\n      title: {\\n        text,\\n        subtext: '',\\n        left: 'left',\\n        top: 'top'\\n      },\\n      toolbox: {\\n        show: toolbox === 'show' ? true : false,\\n        left: 0,\\n        bottom: 0,\\n        feature: {\\n          dataView: { show: true, readOnly: false },\\n          restore: {},\\n          saveAsImage: {}\\n        }\\n      },\\n      tooltip: {\\n        trigger: 'item',\\n        formatter: function (params) {\\n          const { name, value, percent } = params;\\n          if (value) {\\n            return `${name} 标签 有 ${value} 个条目 (${percent}%)`;\\n          } else {\\n            return `${name} 条目`;\\n          }\\n        }\\n      },\\n      legend: {\\n        show: legend === 'yes' ? true : false,\\n        orient: 'vertical',\\n        right: 10,\\n        top: 20,\\n        bottom: 20,\\n        type: 'scroll'\\n      },\\n      series: [\\n        {\\n          name: 'Tag',\\n          type: 'pie',\\n          radius: doughnut === 'yes' ? ['40%', '70%'] : '50%',\\n          center: legend === 'yes' ? ['40%', '50%'] : '50%',\\n          data,\\n          itemStyle: {\\n            borderRadius,\\n            borderWidth,\\n            borderColor: '#fff'\\n          },\\n          emphasis: {\\n            focus: focusSelf === 'yes' ? 'self' : '',\\n            itemStyle: {}\\n          }\\n        }\\n      ]\\n    };\\n\\n    // descend or ascend sort\\n    data.sort(function (a, b) {\\n      return sort === 'descend' ? b.value - a.value : a.value - b.value;\\n    });\\n\\n    myChart.setOption(option);\\n  },\\n\\n  // TODO: need refresh manually here\\n  shouldUpdate(_, changedTiddlers) {\\n    const filteredChangedTiddlers = Object.keys(changedTiddlers).filter(\\n      (tiddler) =>\\n        tiddler === '$:/info/darkmode' ||\\n        (!tiddler.startsWith('$:/') && !tiddler.startsWith('Draft of'))\\n    );\\n    return filteredChangedTiddlers.length ? true : false;\\n  }\\n};\\n\\n// default export\\nmodule.exports = BookProgress;\\n\",\"type\":\"application/javascript\",\"description\":\"\"},\"addon/clock.js\":{\"title\":\"addon/clock.js\",\"text\":\"/*\\\\\\ntitle: addon/clock.js\\nmodule-type: echarts-component\\ntype: application/javascript\\ndescription: clock with echarts\\n\\\\*/\\n\\nconst Clock = {\\n  onUpdate(myChart) {\\n    option = {\\n      title: {\\n        text: '',\\n        top: 'top',\\n        left: 'center'\\n      },\\n      series: [\\n        {\\n          name: 'hour',\\n          type: 'gauge',\\n          startAngle: 90,\\n          endAngle: -270,\\n          min: 0,\\n          max: 12,\\n          splitNumber: 12,\\n          clockwise: true,\\n          axisLine: {\\n            lineStyle: {\\n              width: 8,\\n              color: [[1, 'rgba(0,0,0,0.7)']],\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\n              shadowBlur: 15\\n            }\\n          },\\n          splitLine: {\\n            lineStyle: {\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 3,\\n              shadowOffsetX: 1,\\n              shadowOffsetY: 2\\n            }\\n          },\\n          axisLabel: {\\n            fontSize: 16,\\n            distance: 15,\\n            formatter: function (value) {\\n              if (value === 0) {\\n                return '';\\n              }\\n              return value + '';\\n            }\\n          },\\n          pointer: {\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\n            width: 6,\\n            length: '55%',\\n            offsetCenter: [0, '8%'],\\n            itemStyle: {\\n              color: '#C0911F',\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 8,\\n              shadowOffsetX: 2,\\n              shadowOffsetY: 4\\n            }\\n          },\\n          detail: {\\n            show: false\\n          },\\n          title: {\\n            offsetCenter: [0, '30%']\\n          },\\n          data: [\\n            {\\n              value: 0\\n            }\\n          ]\\n        },\\n        {\\n          name: 'minute',\\n          type: 'gauge',\\n          startAngle: 90,\\n          endAngle: -270,\\n          min: 0,\\n          max: 60,\\n          clockwise: true,\\n          axisLine: {\\n            show: false\\n          },\\n          splitLine: {\\n            show: false\\n          },\\n          axisTick: {\\n            show: false\\n          },\\n          axisLabel: {\\n            show: false\\n          },\\n          pointer: {\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\n            width: 4,\\n            length: '70%',\\n            offsetCenter: [0, '8%'],\\n            itemStyle: {\\n              color: '#C0911F',\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 8,\\n              shadowOffsetX: 2,\\n              shadowOffsetY: 4\\n            }\\n          },\\n          anchor: {\\n            show: true,\\n            size: 20,\\n            showAbove: false,\\n            itemStyle: {\\n              borderWidth: 8,\\n              borderColor: '#C0911F',\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 8,\\n              shadowOffsetX: 2,\\n              shadowOffsetY: 4\\n            }\\n          },\\n          detail: {\\n            show: false\\n          },\\n          title: {\\n            offsetCenter: ['0%', '-40%']\\n          },\\n          data: [\\n            {\\n              value: 0\\n            }\\n          ]\\n        },\\n        {\\n          name: 'second',\\n          type: 'gauge',\\n          startAngle: 90,\\n          endAngle: -270,\\n          min: 0,\\n          max: 60,\\n          animationEasingUpdate: 'bounceOut',\\n          clockwise: true,\\n          axisLine: {\\n            show: false\\n          },\\n          splitLine: {\\n            show: false\\n          },\\n          axisTick: {\\n            show: false\\n          },\\n          axisLabel: {\\n            show: false\\n          },\\n          pointer: {\\n            icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\\n            width: 2,\\n            length: '85%',\\n            offsetCenter: [0, '8%'],\\n            itemStyle: {\\n              color: '#C0911F',\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 8,\\n              shadowOffsetX: 2,\\n              shadowOffsetY: 4\\n            }\\n          },\\n          anchor: {\\n            show: true,\\n            size: 15,\\n            showAbove: true,\\n            itemStyle: {\\n              color: '#C0911F',\\n              shadowColor: 'rgba(0, 0, 0, 0.3)',\\n              shadowBlur: 8,\\n              shadowOffsetX: 2,\\n              shadowOffsetY: 4\\n            }\\n          },\\n          detail: {\\n            show: false\\n          },\\n          title: {\\n            offsetCenter: ['0%', '-40%']\\n          },\\n          data: [\\n            {\\n              value: 0\\n            }\\n          ]\\n        }\\n      ]\\n    };\\n    setInterval(function () {\\n      var date = new Date();\\n      var second = date.getSeconds();\\n      var minute = date.getMinutes() + second / 60;\\n      var hour = (date.getHours() % 12) + minute / 60;\\n      option.animationDurationUpdate = 300;\\n      myChart.setOption({\\n        series: [\\n          {\\n            name: 'hour',\\n            animation: hour !== 0,\\n            data: [{ value: hour }]\\n          },\\n          {\\n            name: 'minute',\\n            animation: minute !== 0,\\n            data: [{ value: minute }]\\n          },\\n          {\\n            animation: second !== 0,\\n            name: 'second',\\n            data: [{ value: second }]\\n          }\\n        ]\\n      });\\n    }, 1000);\\n\\n    myChart.setOption(option);\\n  },\\n\\n  shouldUpdate() {\\n    return false;\\n  }\\n};\\n\\nmodule.exports = Clock;\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"clock with echarts\"},\"addon/sevenday.js\":{\"title\":\"addon/sevenday.js\",\"text\":\"/*\\\\\\ntitle: addon/sevenday.js\\nmodule-type: echarts-component\\ntype: application/javascript\\ndescription: 折线图\\n\\n\\\\*/\\n\\n/** @description: echarts 几乎支持每一处的样式设置，这里仅根据需要设置必要的样式 */\\n\\nconst getData = (date, type = 'created') =>\\n  $tw.wiki.filterTiddlers(`[sameday:${type}[${date}]!is[system]!has[draft.of]]`)\\n    .length;\\n\\nconst parsesixDate = (dateString) =>\\n  new Date(\\n    `${dateString.substr(0, 4)}-${dateString.substr(4, 2)}-${dateString.substr(\\n      6,\\n      2,\\n    )}`,\\n  );\\n\\n/**\\n * @description sevenday echart some config\\n */\\nconst config = {\\n  title: '最近文章动态',\\n  opacity: 0.8,\\n  xLegend: '日期',\\n  yLegend: '文章数量',\\n  lineWidth: 0,\\n  symbolSize: 0,\\n};\\n\\nfunction getSevenDaysBefore(dateString, daysLength = 7) {\\n  const currentDate = dateString ? parsesixDate(dateString) : new Date();\\n\\n  const sevenDays = [];\\n\\n  for (let i = 0; i < daysLength; i++) {\\n    const year = currentDate.getFullYear();\\n    const month = String(currentDate.getMonth() + 1).padStart(2, '0');\\n    const day = String(currentDate.getDate()).padStart(2, '0');\\n\\n    sevenDays.unshift(year + month + day);\\n\\n    // Subtract one day from currentDate\\n    currentDate.setDate(currentDate.getDate() - 1);\\n  }\\n\\n  return sevenDays;\\n}\\n\\nconst Sevendays = {\\n  onUpdate(myChart, _state, addonAttributes) {\\n    const {\\n      days,\\n      date,\\n      title: text = config.title,\\n      subtitle: subtext = '',\\n      disableClick = 'no',\\n      // smooth = 'true',\\n    } = addonAttributes;\\n\\n    const sevendays = getSevenDaysBefore(date, days);\\n\\n    // TODO: 封装成函数 https://echarts.apache.org/examples/en/editor.html?c=bump-chart\\n    const createdData = [];\\n    const modifiedData = [];\\n\\n    sevendays.forEach((date) => createdData.push(getData(date)));\\n    sevendays.forEach((date) => modifiedData.push(getData(date, 'modified')));\\n\\n    const option = {\\n      title: {\\n        text,\\n        subtext,\\n        left: 'center',\\n        top: 'bottom',\\n      },\\n      legend: {\\n        data: ['created', 'modified'],\\n        selected: {\\n          modified: true,\\n          created: false,\\n        },\\n      },\\n      toolbox: {\\n        feature: {\\n          restore: {},\\n        },\\n      },\\n      tooltip: {\\n        // options: item, axis\\n        trigger: 'item',\\n        // axisPointer: {\\n        //   type: 'cross',\\n        //   label: {\\n        //     backgroundColor: '#6a7985',\\n        //   },\\n        // },\\n        formatter: function (params) {\\n          const { name: date, value: count, seriesName } = params;\\n          const realDate = parsesixDate(date).toLocaleDateString();\\n          if (seriesName === 'created') {\\n            return count\\n              ? `${realDate} 新增了 ${count} 篇文章`\\n              : `${realDate} 没有新增文章`;\\n          } else {\\n            return count\\n              ? `${realDate} 更新了 ${count} 篇文章`\\n              : `${realDate} 没有文章更新`;\\n          }\\n        },\\n      },\\n      // color: [''],\\n      xAxis: {\\n        boundaryGap: true, // 是否在数据点两侧留白，\\n        type: 'category',\\n        data: sevendays,\\n        name: config.xLegend,\\n      },\\n      yAxis: {\\n        type: 'value',\\n        name: config.yLegend,\\n      },\\n      animationDuration: 2000,\\n      series: [\\n        {\\n          name: 'created',\\n          data: createdData,\\n          type: 'line',\\n          showSymbol: false,\\n          symbolSize: config.symbolSize,\\n          stack: 'Total',\\n          lineStyle: {\\n            // 折线宽度\\n            width: config.lineWidth,\\n            // color: 'purple'\\n          },\\n          endLabel: {\\n            show: false,\\n            formatter: '{a}',\\n            distance: 20,\\n          },\\n          // 区域颜色渐变\\n          areaStyle: {\\n            opacity: config.opacity,\\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\\n              {\\n                offset: 0,\\n                color: 'rgb(55, 162, 255)',\\n              },\\n              {\\n                offset: 1,\\n                color: 'rgb(116, 21, 219)',\\n              },\\n            ]),\\n          },\\n          emphasis: {\\n            focus: 'series',\\n            itemStyle: {\\n              scale: 1.5,\\n              shadowOffsetX: 0,\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\n            },\\n          },\\n          smooth: true,\\n        },\\n        {\\n          name: 'modified',\\n          data: modifiedData,\\n          lineStyle: {\\n            width: config.lineWidth,\\n          },\\n          symbolSize: config.symbolSize,\\n          stack: 'Total',\\n          type: 'line',\\n          showSymbol: false,\\n          endLabel: {\\n            show: false,\\n            formatter: '{a}',\\n            distance: 20,\\n          },\\n          areaStyle: {\\n            opacity: config.opacity,\\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\\n              {\\n                offset: 0,\\n                color: 'rgb(128, 255, 165)',\\n              },\\n              {\\n                offset: 1,\\n                color: 'rgb(1, 191, 236)',\\n              },\\n            ]),\\n          },\\n          emphasis: {\\n            focus: 'series',\\n            itemStyle: {\\n              // color: '',\\n              scale: 1.25,\\n              shadowOffsetX: 0,\\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\\n            },\\n          },\\n          smooth: true,\\n        },\\n      ],\\n    };\\n\\n    // 更新配置\\n    myChart.setOption(option);\\n\\n    // 监听双击事件\\n    myChart.on('dblclick', 'series', function (params) {\\n      const { name: date, value: count, seriesName } = params;\\n      const goto = new $tw.Story();\\n      const filter = `[sameday:${seriesName}[${date}]!is[system]!has[draft.of]]`;\\n\\n      if (!count) return;\\n      $tw.rootWidget.invokeActionString(\\n        '<$action-setfield $tiddler=\\\"$:/temp/advancedsearch\\\" text=\\\"\\\"\\\"' +\\n          filter +\\n          '\\\"\\\"\\\"/><$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text=\\\"\\\"\\\"' +\\n          filter +\\n          '\\\"\\\"\\\"/><$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/><$action-setfield $tiddler=\\\"$:/state/tab--1498284803\\\" text=\\\"$:/core/ui/AdvancedSearch/Filter\\\"/>',\\n      );\\n      goto.navigateTiddler('$:/AdvancedSearch');\\n    });\\n  },\\n  // 没有频繁更新的需要，禁止刷新\\n  shouldUpdate() {\\n    return false;\\n  },\\n};\\n\\nmodule.exports = Sevendays;\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"折线图\"},\"addon/tagpie.js\":{\"title\":\"addon/tagpie.js\",\"text\":\"/*\\\\\\ntitle: addon/tagpie.js\\nmodule-type: echarts-component\\ntype: application/javascript\\ndescription: tag pie on tiddlywiki\\n\\n\\\\*/\\n\\nconst getData = (tag) => {\\n  return {\\n    name: tag,\\n    value: $tw.wiki.filterTiddlers(`[tag[${tag}]!has[draft.of]]`).length,\\n  };\\n};\\n\\nconst goto = new $tw.Story();\\n\\nconst gotoTagTiddler = (params) => {\\n  const title = params.name;\\n  const existTiddler = $tw.wiki.tiddlerExists(title);\\n  if (!existTiddler) {\\n    console.log(title + ' not found');\\n    return;\\n  }\\n  // parentWidget.dispatchEvent( { type: 'tm-navigate', navigateTo: title } )\\n  goto.navigateTiddler(title);\\n};\\n\\n/**\\n * @description 理论上所有的 option 配置都可以暴露出来，这里仅仅暴露一些常用的配置，echarts 将这些工作交给了 addon, 大概是不同类型的 addon 处理起来比较复杂，但是与此同时，addon 就更具有扩展性\\n * @param filter 默认是用户的所有 tiddler, 但是你也可以使用 filter='[tag[Journal]]' 列出所有的 Journal tiddler\\n * @param title\\n * @param radius\\n * @param sort {descend|ascend}\\n * @param doughnut {'yes'}\\n * @param width {0}\\n * @param legend {'yes'}\\n * @param toolbox {'show'|'hide'}\\n */\\nconst TagPie = {\\n  onUpdate(myChart, _, addonAttributes) {\\n    const {\\n      title: text,\\n      filter = '[tags[]!prefix[$:/]]',\\n      sort = 'descend',\\n      width = 2,\\n      radius = 10,\\n      toolbox = 'hide',\\n      doughnut,\\n      focusSelf,\\n      legend,\\n    } = addonAttributes;\\n    // NOTE: data 必须在执行 onUpdate 函数的时候获取到最新数据，不要写在 onUpdate 函数外面\\n    const data = [];\\n\\n    const getTagsTiddlerLength = (tags) => {\\n      let length = 0;\\n      tags.forEach((tag) => {\\n        length += $tw.wiki.filterTiddlers(`[tag[${tag}]!has[draft.of]]`).length;\\n      });\\n      return length;\\n    };\\n\\n    // alpha sort default\\n    // 超过 20 不显示\\n    const tags = $tw.wiki.filterTiddlers(filter).slice(0, 20).sort();\\n    const totalLength = getTagsTiddlerLength(tags);\\n    tags.forEach((tag) => {\\n      const percent =\\n        $tw.wiki.filterTiddlers(`[tag[${tag}]!has[draft.of]]`).length /\\n        totalLength;\\n      if (percent < 0.01) return;\\n      data.push(getData(tag));\\n    });\\n\\n    const borderWidth = data.length > 10 ? 0 : width;\\n    const borderRadius = data.length > 10 ? 5 : radius;\\n\\n    // 如果类型过多，width 自动设置为 0, 此时无视用户的 width 配置\\n    // 配置具体参考 echarts 官方文档\\n    const option = {\\n      title: {\\n        text,\\n        subtext: '',\\n        left: 'left',\\n        top: 'top',\\n      },\\n      toolbox: {\\n        show: toolbox === 'show' ? true : false,\\n        left: 0,\\n        bottom: 0,\\n        feature: {\\n          dataView: { show: true, readOnly: false },\\n          restore: {},\\n          saveAsImage: {},\\n        },\\n      },\\n      tooltip: {\\n        trigger: 'item',\\n        formatter: function (params) {\\n          const { name, value, percent } = params;\\n          if (value) {\\n            return `${name} 标签 有 ${value} 个条目 (${percent}%)`;\\n          } else {\\n            return `${name} 条目`;\\n          }\\n        },\\n      },\\n      legend: {\\n        show: legend === 'yes' ? true : false,\\n        orient: 'vertical',\\n        right: 10,\\n        top: 20,\\n        bottom: 20,\\n        type: 'scroll',\\n      },\\n      series: [\\n        {\\n          name: 'Tag',\\n          type: 'pie',\\n          radius: doughnut === 'yes' ? ['40%', '70%'] : '50%',\\n          center: legend === 'yes' ? ['40%', '50%'] : '50%',\\n          data,\\n          itemStyle: {\\n            borderRadius,\\n            borderWidth,\\n            borderColor: '#fff',\\n          },\\n          emphasis: {\\n            focus: focusSelf === 'yes' ? 'self' : '',\\n            itemStyle: {},\\n          },\\n        },\\n      ],\\n    };\\n\\n    // descend or ascend sort\\n    data.sort(function (a, b) {\\n      return sort === 'descend' ? b.value - a.value : a.value - b.value;\\n    });\\n\\n    myChart.setOption(option);\\n    myChart.on('click', 'series', gotoTagTiddler);\\n    // 如何在这里监听 change 事件，从而实现自动刷新主题\\n  },\\n\\n  // TODO: need refresh manually here\\n  shouldUpdate(_, changedTiddlers) {\\n    // tw 里面即使是一个 state tiddler 变换都会触发这个函数的调用\\n    // changeTiddlers 会包含一些系统 tiddler 的状态变换 tiddler, 应该去掉\\n    // log 输出不了，但是 alert 却可以\\n    const filteredChangedTiddlers = Object.keys(changedTiddlers).filter(\\n      (tiddler) =>\\n        tiddler === '$:/info/darkmode' ||\\n        (!tiddler.startsWith('$:/') && !tiddler.startsWith('Draft of')),\\n    );\\n    // TODO\\n    return filteredChangedTiddlers.length ? true : false;\\n    // return true;\\n  },\\n};\\n\\n// default export\\nmodule.exports = TagPie;\\n\",\"module-type\":\"echarts-component\",\"type\":\"application/javascript\",\"description\":\"tag pie on tiddlywiki\"}}}"}