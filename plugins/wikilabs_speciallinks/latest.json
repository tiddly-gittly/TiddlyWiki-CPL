{"title":"$:/plugins/wikilabs/speciallinks","name":"Speciallinks","description":"Camel_Case wikilinks are possible","core-version":">=5.1.13","version":"0.1.1","list":"readme license history","stability":"STABILITY_1_EXPERIMENTAL","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/wikilabs/speciallinks/history\":{\"title\":\"$:/plugins/wikilabs/speciallinks/history\",\"text\":\"V 0.1.1 - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\nV 0.1.0 - 2022.03.27\\n\\n* update to TW v5.2.2\\n* ''Important'': Changed license to Attribution-NonCommercial-ShareAlike -- [[CC-BY-NC-SA|$:/plugins/wikilabs/speciallinks/license]]\\n\\nV 0.0.2 - 2020.12.25\\n\\n* update license\\n\\nV 0.0.1 - 2020-02-25\\n\\n* initial release\\n\"},\"$:/plugins/wikilabs/speciallinks/license\":{\"title\":\"$:/plugins/wikilabs/speciallinks/license\",\"license-text\":\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode\",\"text\":\"[[Speciallinks-Plugin|https://wikilabs.github.io/#speciallinks]] (c) Mario Pietsch - 2020<<now YYYY>>\\n\\n[[Creative Commons Attribution-NonCommercial-ShareAlike|https://creativecommons.org/licenses/by-nc-sa/4.0/]]\\n\"},\"$:/plugins/wikilabs/speciallinks/readme\":{\"title\":\"$:/plugins/wikilabs/speciallinks/readme\",\"text\":\"Allow Camel_Case links\\n\"},\"$:/plugins/wikilabs/speciallinks/special.js\":{\"title\":\"$:/plugins/wikilabs/speciallinks/special.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/speciallinks/special.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for wiki links. For example:\\n\\n```\\nAWikiLink\\nAnotherLink\\n~SuppressedLink\\n\\nCamel_Case <- special\\n```\\n\\nPrecede a camel case word with `~` to prevent it from being recognised as a link.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false exports:false */\\n\\\"use strict\\\";\\nvar SEPARATOR = \\\"_?\\\";\\n\\t\\nvar WIKILINK = $tw.config.textPrimitives.upperLetter + \\\"+\\\" +\\n$tw.config.textPrimitives.lowerLetter + \\\"+\\\" + SEPARATOR +\\n$tw.config.textPrimitives.upperLetter +\\n$tw.config.textPrimitives.anyLetter + \\\"*\\\";\\n\\nexports.name = \\\"speciallink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = new RegExp($tw.config.textPrimitives.unWikiLink + \\\"?\\\" + WIKILINK,\\\"mg\\\");\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Get the details of the match\\n\\tvar linkText = this.match[0];\\n\\t// Move past the macro call\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// If the link starts with the unwikilink character then just output it as plain text\\n\\tif(linkText.substr(0,1) === $tw.config.textPrimitives.unWikiLink) {\\n\\t\\treturn [{type: \\\"text\\\", text: linkText.substr(1)}];\\n\\t}\\n\\t// If the link has been preceded with a blocked letter then don't treat it as a link\\n\\tif(this.match.index > 0) {\\n\\t\\tvar preRegExp = new RegExp($tw.config.textPrimitives.blockPrefixLetters,\\\"mg\\\");\\n\\t\\tpreRegExp.lastIndex = this.match.index-1;\\n\\t\\tvar preMatch = preRegExp.exec(this.parser.source);\\n\\t\\tif(preMatch && preMatch.index === this.match.index-1) {\\n\\t\\t\\treturn [{type: \\\"text\\\", text: linkText}];\\n\\t\\t}\\n\\t}\\n\\treturn [{\\n\\t\\ttype: \\\"link\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tto: {type: \\\"string\\\", value: linkText}\\n\\t\\t},\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\ttext: linkText\\n\\t\\t}]\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"}}}","author":"wikilabs"}