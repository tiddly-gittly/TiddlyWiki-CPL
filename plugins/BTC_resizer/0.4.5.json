{"title":"$:/plugins/BTC/resizer","name":"Resizer","description":"General-purpose resizer widget for TiddlyWiki5","author":"Simon Huber","version":"0.4.5","core-version":">=5.3.0","source":"https://github.com/BurningTreeC/resizer","plugin-type":"plugin","list":"readme license","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/BTC/resizer/config/EditTemplateBodyFilter\":{\"title\":\"$:/plugins/BTC/resizer/config/EditTemplateBodyFilter\",\"tags\":\"$:/tags/EditTemplateBodyFilter\",\"list-before\":\"$:/config/EditTemplateBodyFilters/default\",\"text\":\"[[$:/plugins/BTC/resizer/ui/EditTemplate/body/default]]\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth\",\"text\":\"350px\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarmaxwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarmaxwidth\",\"text\":\"1250px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storyminwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storyminwidth\",\"text\":\"450px\"},\"$:/plugins/BTC/resizer/docs/mediaquery-filter\":{\"title\":\"$:/plugins/BTC/resizer/docs/mediaquery-filter\",\"tags\":\"$:/tags/Documentation\",\"text\":\"! MediaQuery Filter Operator\\n\\nThe `mediaquery` filter operator evaluates CSS media queries and filters tiddlers based on whether the media query matches.\\n\\n!! Syntax\\n\\n```\\n[<titles>mediaquery<media-query>]\\n```\\n\\n!! Parameters\\n\\n* `media-query` - A valid CSS media query string\\n\\n!! Examples\\n\\n!!! Check if on mobile device\\n```\\n[[MyTiddler]mediaquery[(max-width: 768px)]]\\n```\\nReturns \\\"MyTiddler\\\" only if the viewport width is 768px or less.\\n\\n!!! Check for touch support\\n```\\n[[TouchUI]mediaquery[(pointer: coarse)]]\\n```\\nReturns \\\"TouchUI\\\" only on devices with coarse pointer (typically touch devices).\\n\\n!!! Check for dark mode preference\\n```\\n[[DarkTheme]mediaquery[(prefers-color-scheme: dark)]]\\n```\\nReturns \\\"DarkTheme\\\" only if the user prefers dark color scheme.\\n\\n!!! Multiple conditions\\n```\\n[[MobilePortrait]mediaquery[(max-width: 768px) and (orientation: portrait)]]\\n```\\nReturns \\\"MobilePortrait\\\" only on mobile devices in portrait orientation.\\n\\n!!! Using with list widget\\n```\\n<$list filter=\\\"[[ShowOnDesktop]mediaquery[(min-width: 1024px)]]\\\">\\n  This content only shows on desktop screens\\n</$list>\\n```\\n\\n!!! Negation\\nThe filter automatically supports negation with the `!` prefix:\\n```\\n[[HideOnMobile]!mediaquery[(max-width: 768px)]]\\n```\\nReturns \\\"HideOnMobile\\\" only when NOT on mobile (viewport wider than 768px).\\n\\n!! Common Media Queries\\n\\n* `(max-width: 768px)` - Mobile devices\\n* `(min-width: 769px) and (max-width: 1024px)` - Tablets\\n* `(min-width: 1025px)` - Desktop\\n* `(pointer: coarse)` - Touch devices\\n* `(pointer: fine)` - Mouse/trackpad devices\\n* `(prefers-reduced-motion: reduce)` - User prefers reduced motion\\n* `(prefers-color-scheme: dark)` - User prefers dark theme\\n* `(orientation: portrait)` - Portrait orientation\\n* `(orientation: landscape)` - Landscape orientation\\n\\n!! Notes\\n\\n* This filter only works in the browser (returns empty results in Node.js)\\n* Invalid media queries return empty results\\n* The filter is reactive - it automatically updates when the media query state changes (e.g., when the user resizes their browser or rotates their device)\\n* Media query listeners are automatically cleaned up when the widget is destroyed\"},\"$:/plugins/BTC/resizer/license\":{\"title\":\"$:/plugins/BTC/resizer/license\",\"text\":\"MIT License\\n\\nCopyright (c) 2025 Simon Huber\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\"},\"$:/plugins/BTC/resizer/modules/filters/mediaquery.js\":{\"title\":\"$:/plugins/BTC/resizer/modules/filters/mediaquery.js\",\"text\":\"\\\"use strict\\\";var mediaQueryListeners={},listenerCounter=0;exports.mediaquery=function(e,r,i){var n=[],t=r.operand,s=i.widget;if($tw.browser&&t&&s){var d=window.matchMedia(t);if(e(function(e,r){d.matches&&n.push(r)}),s&&s.wiki){var a=\\\"mql_\\\"+ ++listenerCounter,m=function(e){s.refreshSelf?s.refreshSelf():s.parentWidget&&s.parentWidget.refreshChildren&&s.parentWidget.refreshChildren()};if(d.addEventListener?d.addEventListener(\\\"change\\\",m):d.addListener&&d.addListener(m),mediaQueryListeners[a]={mql:d,handler:m,widget:s},s){var l=s.removeChildDomNodes;s.removeChildDomNodes=function(){if(mediaQueryListeners[a]){var e=mediaQueryListeners[a];e.mql.removeEventListener?e.mql.removeEventListener(\\\"change\\\",e.handler):e.mql.removeListener&&e.mql.removeListener(e.handler),delete mediaQueryListeners[a]}l&&l.call(this)}}}}return n};\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/plugins/BTC/resizer/readme\":{\"title\":\"$:/plugins/BTC/resizer/readme\",\"text\":\"! TiddlyWiki Resizer Widget\\n\\nA powerful and flexible resizer widget that enables interactive resizing of UI elements with support for multiple tiddlers, various CSS units, and calc() expressions.\\n\\n!! Features\\n\\n* ''Multi-tiddler Support'': Resize multiple tiddlers simultaneously using filter expressions\\n* ''Comprehensive Unit Support'': Works with all CSS units (px, %, em, rem, vh, vw, vmin, vmax)\\n* ''CSS calc() Expressions'': Use complex calculations for min/max values like `calc(100% - 350px)`\\n* ''Unit Preservation'': Maintains each tiddler's original unit type while ensuring consistent resize behavior\\n* ''Smart Unit Conversion'': Automatically converts between units when needed\\n* ''Constraint System'': Enforces min/max limits across all target tiddlers as a group\\n* ''Live Preview'': Optional real-time visual feedback during resizing\\n* ''Touch Support'': Works with both mouse and touch input via pointer events\\n* ''Double-Click Reset'': Double-click any resizer handle to reset to default/min/max values\\n* ''Enhanced Handle Styles'': Choose from multiple handle visual styles (solid, dots, lines, chevron, grip)\\n* ''Haptic Feedback'': Tactile feedback on mobile devices for better user experience\\n\\n!! Basic Usage\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\"\\n  min=\\\"200px\\\"\\n  max=\\\"800px\\\"\\n  default=\\\"350px\\\"\\n/>\\n```\\n\\n!! Widget Attributes\\n\\n!!! Core Attributes\\n\\n|!Attribute |!Description |!Default |\\n|direction |Resize direction: \\\"horizontal\\\" or \\\"vertical\\\" |\\\"horizontal\\\" |\\n|tiddler |Target tiddler |– |\\n|filter |Filter attribute to specify multiple tiddlers (optional alternative to tiddler) |– |\\n|field |Field to update in the target tiddler |\\\"text\\\" |\\n|unit |Unit for the resizer (px, %, em, rem, vh, vw, etc.) |\\\"px\\\" |\\n|default |Default value if tiddler doesn't exist (supports calc() expressions) |\\\"200px\\\" or \\\"50%\\\" |\\n|min |Minimum value (supports calc() expressions) |\\\"50\\\" or \\\"10\\\" |\\n|max |Maximum value (supports calc() expressions) |\\\"800\\\" or \\\"90\\\" |\\n\\n!!! Behavior Attributes\\n\\n|!Attribute |!Description |!Default |\\n|invert |Invert resize direction: \\\"yes\\\" or \\\"no\\\" |\\\"no\\\" |\\n|live |Update target element in real-time: \\\"yes\\\" or \\\"no\\\" |\\\"no\\\" |\\n|position |Position calculation: \\\"absolute\\\" or \\\"relative\\\" |\\\"absolute\\\" |\\n|mode |Resize mode: \\\"single\\\" or \\\"multiple\\\" |\\\"single\\\" |\\n\\n!!! Target Attributes\\n\\n|!Attribute |!Description |!Default |\\n|selector |CSS selector for target DOM element(s) |– |\\n|element |Target relative element: \\\"parent\\\", \\\"parent.parent\\\", \\\"previousSibling\\\", \\\"nextSibling\\\" |– |\\n|property |CSS property to modify |\\\"width\\\" or \\\"height\\\" |\\n|aspectRatio |Maintain aspect ratio for live DOM manipulation only (e.g., \\\"16:9\\\" or \\\"1.5\\\") |– |\\n\\n!!! Event Attributes\\n\\n|!Attribute |!Description |\\n|actions |Action string to execute on value change |\\n|onBeforeResizeStart |Actions to execute before resize starts (useful for setup) |\\n|onResizeStart |Actions to execute when resize starts |\\n|onResize |Actions to execute during resize |\\n|onResizeEnd |Actions to execute when resize ends |\\n|dblClickActions |Custom actions to execute on double-click (overrides reset behavior) |\\n\\n!!!! Available Action Variables\\n\\nThe following variables are available within action strings:\\n\\n|!Variable |!Description |!Available In |\\n|`<<tv-action-value>>` |The numeric value in the widget's unit |All actions |\\n|`<<tv-action-value-pixels>>` |The value in pixels (always pixels regardless of unit) |All actions |\\n|`<<tv-action-formatted-value>>` |The value with unit (e.g., \\\"350px\\\", \\\"50%\\\") |All actions |\\n|`<<tv-action-direction>>` |The resize direction (\\\"horizontal\\\" or \\\"vertical\\\") |All actions |\\n|`<<tv-action-property>>` |The CSS property being modified |All actions |\\n|`<<tv-action-handle-size>>` |The computed size of the resize handle in pixels |All actions |\\n|`<<tv-action-parent-size>>` |The parent container width (horizontal) or height (vertical) in pixels |All actions |\\n|`<<tv-action-delta-x>>` |The horizontal mouse movement delta |`onResize` only |\\n|`<<tv-action-delta-y>>` |The vertical mouse movement delta |`onResize` only |\\n\\n!!! Styling Attributes\\n\\n|!Attribute |!Description |!Default |\\n|class |Additional CSS classes for the resizer |\\\"\\\" |\\n|handlePosition |Position of resize handle: \\\"before\\\", \\\"after\\\", \\\"overlay\\\" |\\\"after\\\" |\\n|handleStyle |Visual style of the handle: \\\"solid\\\", \\\"dots\\\", \\\"lines\\\", \\\"chevron\\\", \\\"grip\\\" |\\\"solid\\\" |\\n|disable |Disable the resizer: \\\"yes\\\" or \\\"no\\\" |\\\"no\\\" |\\n|visiblePortion |Calculate resize based only on visible portion when element is clipped: \\\"yes\\\" or \\\"no\\\" |\\\"no\\\" |\\n\\n!!! Reset Attributes\\n\\n|!Attribute |!Description |!Default |\\n|resetTo |What value to reset to on double-click: \\\"default\\\", \\\"min\\\", \\\"max\\\", \\\"custom\\\" (ignored if `dblClickActions` is set) |\\\"default\\\" |\\n|resetValue |Custom value to reset to when resetTo=\\\"custom\\\" (ignored if `dblClickActions` is set) |– |\\n|smoothReset |Animate the reset transition: \\\"yes\\\" or \\\"no\\\" (ignored if `dblClickActions` is set) |\\\"yes\\\" |\\n|onReset |Action string to execute when resizer is reset (ignored if `dblClickActions` is set) |– |\\n\\n!!! Mobile/Touch Attributes\\n\\n|!Attribute |!Description |!Default |\\n|hapticFeedback |Enable haptic feedback on touch devices: \\\"yes\\\" or \\\"no\\\" |\\\"yes\\\" |\\n\\n!! Advanced Examples\\n\\n!!! Multiple Tiddlers with Filter Expression\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"[tag[layout-metrics]]\\\"\\n  min=\\\"100px\\\"\\n  max=\\\"calc(100% - 200px)\\\"\\n/>\\n```\\n\\n!!! Space-Separated Tiddler List (Filter)\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  filter=\\\"$:/metrics/storyright $:/metrics/storywidth $:/metrics/tiddlerwidth\\\"\\n  min=\\\"300px\\\"\\n  max=\\\"calc(100vw - 350px)\\\"\\n/>\\n```\\n\\n!!! Using Different Units\\n\\n```\\n<!-- Percentage-based resizing -->\\n<$resizer\\n  direction=\\\"vertical\\\"\\n  tiddler=\\\"$:/config/header/height\\\"\\n  unit=\\\"%\\\"\\n  min=\\\"5%\\\"\\n  max=\\\"50%\\\"\\n  default=\\\"20%\\\"\\n/>\\n\\n<!-- Using viewport units -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/config/panel/width\\\"\\n  unit=\\\"vw\\\"\\n  min=\\\"20vw\\\"\\n  max=\\\"80vw\\\"\\n  default=\\\"50vw\\\"\\n/>\\n```\\n\\n!!! With Actions and Events\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/sidebar/width\\\"\\n  actions=\\\"\\\"\\\"\\n    <$action-setfield $tiddler=\\\"$:/state/sidebar/visible\\\" text=\\\"yes\\\"/>\\n  \\\"\\\"\\\"\\n  onResizeEnd=\\\"\\\"\\\"\\n    <$action-log message=\\\"Resize completed\\\" value=<<value>>/>\\n  \\\"\\\"\\\"\\n/>\\n```\\n\\n!!! Live DOM Manipulation\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  selector=\\\".tc-sidebar\\\"\\n  property=\\\"width\\\"\\n  tiddler=\\\"$:/config/sidebar/width\\\"\\n  live=\\\"yes\\\"\\n/>\\n```\\n\\n!!! Disabling the Resizer\\n\\nThe `disable` attribute allows you to temporarily disable the resizer functionality:\\n\\n```\\n<!-- Disable resizer based on condition -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  disable={{{ [{$:/state/edit-mode}match[yes]then[yes]else[no]] }}}\\n/>\\n\\n<!-- Always disabled resizer -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  disable=\\\"yes\\\"\\n/>\\n```\\n\\nWhen disabled:\\n\\n* The resizer handle remains visible but is non-interactive\\n* The class `tc-resizer-disabled` is added for styling\\n* No resize events or actions are triggered\\n* The `data-disabled=\\\"true\\\"` attribute is set on the DOM element\\n\\n!!! Double-Click Reset\\n\\nDouble-click any resizer handle to reset it to a specified value:\\n\\n```\\n<!-- Reset to default value -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  default=\\\"300px\\\"\\n  resetTo=\\\"default\\\"\\n/>\\n\\n<!-- Reset to minimum value -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  min=\\\"200px\\\"\\n  resetTo=\\\"min\\\"\\n/>\\n\\n<!-- Reset to custom value with action -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  resetTo=\\\"custom\\\"\\n  resetValue=\\\"400px\\\"\\n  onReset=\\\"\\\"\\\"\\n    <$action-log message=\\\"Panel reset to 400px\\\"/>\\n  \\\"\\\"\\\"\\n/>\\n\\n<!-- Disable smooth animation on reset -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  smoothReset=\\\"no\\\"\\n/>\\n\\n<!-- Custom double-click actions (overrides reset behavior) -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  dblClickActions=\\\"\\\"\\\"\\n    <$action-sendmessage $message=\\\"tm-modal\\\" $param=\\\"$:/core/ui/ControlPanel/Settings\\\"/>\\n    <$action-log message=\\\"Panel width on double-click\\\" value=<<tv-action-value>>/>\\n  \\\"\\\"\\\"\\n/>\\n```\\n\\nWhen using `dblClickActions`, the following variables are available:\\n\\n* `<<tv-action-value>>` - The current value with unit\\n* `<<tv-action-value-pixels>>` - The current value in pixels\\n* `<<tv-action-direction>>` - The resize direction\\n* `<<tv-action-parent-size>>` - The parent container size in pixels\\n* `<<tv-action-handle-size>>` - The handle size in pixels\\n\\n!!! Handle Styles\\n\\nChoose from different visual styles for the resizer handle:\\n\\n```\\n<!-- Default solid bar -->\\n<$resizer handleStyle=\\\"solid\\\" />\\n\\n<!-- Dots pattern -->\\n<$resizer handleStyle=\\\"dots\\\" />\\n\\n<!-- Dashed lines -->\\n<$resizer handleStyle=\\\"lines\\\" />\\n\\n<!-- Chevron arrows (❯❯ for horizontal, ⌄⌄ for vertical) -->\\n<$resizer handleStyle=\\\"chevron\\\" />\\n\\n<!-- Grip dots (⋮⋮ for horizontal, ⋯⋯ for vertical) -->\\n<$resizer handleStyle=\\\"grip\\\" />\\n```\\n\\n!!! Mobile Experience\\n\\nThe resizer includes enhanced support for touch devices:\\n\\n```\\n<!-- Enable haptic feedback (default) -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  hapticFeedback=\\\"yes\\\"\\n/>\\n\\n<!-- Disable haptic feedback -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  hapticFeedback=\\\"no\\\"\\n/>\\n```\\n\\nHaptic feedback provides:\\n\\n* 5ms vibration on touch start (grab)\\n* 3ms vibration on touch end (release)\\n* Double pulse (10-50-10ms) on double-click reset\\n\\n!! CSS calc() Expression Support\\n\\nThe widget supports CSS calc() expressions in min, max, and default values, including special variables:\\n\\n!!! Special Variables\\n\\nThe following variables can be used within calc() expressions in the `min`, `max`, and `default` attributes:\\n\\n* `handleSize` – The computed width/height of the resize handle\\n* `handleWidth` – Alias for handleSize\\n* `handleHeight` – Alias for handleSize\\n\\nThese variables are automatically replaced with the actual pixel size of the resize handle when the calc() expression is evaluated.\\n\\n```\\n<!-- Leave 350px for sidebar -->\\n<$resizer\\n  max=\\\"calc(100% - 350px)\\\"\\n/>\\n\\n<!-- Use viewport width -->\\n<$resizer\\n  max=\\\"calc(100vw - 400px)\\\"\\n/>\\n\\n<!-- Complex calculations -->\\n<$resizer\\n  min=\\\"calc(20% + 100px)\\\"\\n  max=\\\"calc(80% - 50px)\\\"\\n/>\\n\\n<!-- Dynamic default value based on viewport -->\\n<$resizer\\n  default=\\\"calc(50vw - 100px)\\\"\\n  min=\\\"200px\\\"\\n  max=\\\"800px\\\"\\n/>\\n\\n<!-- Responsive default with fallback -->\\n<$resizer\\n  default=\\\"calc(100% / 3)\\\"\\n  min=\\\"calc(100% / 6)\\\"\\n  max=\\\"calc(100% / 2)\\\"\\n/>\\n\\n<!-- Using handle size in calculations -->\\n<$resizer\\n  min=\\\"calc(handleSize + 20px)\\\"\\n  max=\\\"calc(100% - handleSize)\\\"\\n  default=\\\"calc(50% - handleSize / 2)\\\"\\n/>\\n\\n<!-- Account for handle in panel layouts -->\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  max=\\\"calc(100vw - 400px - handleWidth)\\\"\\n  min=\\\"calc(200px + handleWidth)\\\"\\n/>\\n```\\n\\n!! Unit Conversion Features\\n\\nThe widget intelligently handles mixed units:\\n\\n* Tiddlers can store values in any unit (e.g., \\\"2.5rem\\\", \\\"50vh\\\", \\\"300px\\\")\\n* Internal calculations are performed in pixels for consistency\\n* Values are converted back to the original unit when saved\\n* Maintains precision with appropriate decimal places per unit type\\n\\n!! Constraint Behavior\\n\\nWhen resizing multiple tiddlers:\\n\\n* If ANY tiddler would exceed min/max limits, NO tiddlers are updated\\n* This preserves relative relationships between tiddler values\\n* All tiddlers move together within the defined constraints\\n\\n!! Styling\\n\\nThe widget creates a div element with the class `tc-resizer` plus any additional classes specified:\\n\\n```css\\n.tc-resizer {\\n  cursor: ew-resize; /* or ns-resize for vertical */\\n  width: 5px;\\n  background: #ccc;\\n  position: relative;\\n}\\n\\n.tc-resizer:hover {\\n  background: #999;\\n}\\n\\n.tc-resizer-active {\\n  background: #666;\\n}\\n\\n.tc-resizer-disabled {\\n  opacity: 0.5;\\n  cursor: not-allowed;\\n}\\n```\\n\\nDuring resize operations:\\n\\n* `.tc-resizing` class is added to the body element\\n* `.tc-resizer-active` class is added to the active resizer\\n* `.tc-resize-overlay` overlay captures pointer events\\n\\n!! Visible Portion Mode\\n\\nThe `visiblePortion` attribute enables special handling for elements that are partially clipped outside the viewport:\\n\\n```\\n<$resizer\\n  direction=\\\"horizontal\\\"\\n  tiddler=\\\"$:/state/panel/width\\\"\\n  visiblePortion=\\\"yes\\\"\\n/>\\n```\\n\\nWhen enabled, this mode:\\n\\n* Calculates resize operations based only on the visible portion of the element\\n* Automatically adjusts the resize ratio when elements extend beyond viewport boundaries\\n* Ensures consistent resizing behavior for partially visible elements\\n* Useful for panels that slide off-screen or are clipped by viewport edges\\n\\nThis feature is particularly helpful when working with:\\n\\n* Off-canvas navigation panels\\n* Sliding drawers that extend beyond viewport\\n* Elements with negative margins or transforms\\n* Overflow-hidden containers with content outside bounds\\n\\n!! Vertical Resizer Example\\n\\nFor a comprehensive vertical resizer example with multiple panels and different layouts, see [[$:/plugins/BTC/resizer/examples/vertical]]\\n\\n!! Real-World Example\\n\\nThe resizer is used in TiddlyWiki's sidebar implementation:\\n\\n```\\n<$resizer\\n  class=\\\"tc-sidebar-resizer\\\"\\n  direction=\\\"horizontal\\\"\\n  filter=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright $:/themes/tiddlywiki/vanilla/metrics/storywidth $:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\"\\n  min={{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}}\\n  max={{{ [[calc(100vw - ]addsuffix{$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth}addsuffix[)]] }}}\\n  default=\\\"350px\\\"\\n  invert=\\\"no\\\"\\n/>\\n```\\n\\nThis example demonstrates:\\n\\n* Multiple tiddlers being resized together\\n* Dynamic min/max values from tiddlers\\n* Complex calc() expression for maximum value\\n* Integration with TiddlyWiki's theme system\\n\\n!! MediaQuery Filter\\n\\nThe plugin includes a `mediaquery` filter operator that allows you to evaluate CSS media queries within TiddlyWiki filters. This is particularly useful for creating responsive layouts and conditional content.\\n\\n!!! Syntax\\n\\n```\\n[mediaquery<media-query>]\\n```\\n\\n!!! Examples\\n\\n```\\n<!-- Show content only on mobile devices -->\\n<%if [mediaquery[(max-width: 768px)]] %>\\n  This content only appears on mobile devices\\n<% endif %>\\n\\n<!-- Show different content for touch vs mouse devices -->\\n<%if [mediaquery[(pointer: coarse)]] %>\\n  <div class=\\\"touch-interface\\\">\\n    Touch-optimized interface with larger buttons\\n  </div>\\n<% else %>\\n  <div class=\\\"mouse-interface\\\">\\n    Mouse-optimized interface with hover states\\n  </div>\\n<% endif %>\\n\\n<!-- Responsive layout based on screen size -->\\n<%if [mediaquery[(min-width: 1024px)]] %>\\n  <<three-column-panels\\n    leftContent:\\\"Navigation\\\"\\n    centerContent:\\\"Main Content\\\"\\n    rightContent:\\\"Sidebar\\\"\\n  >>\\n<% else %>\\n  <<vertical-split-panel\\n    topContent:\\\"Navigation\\\"\\n    bottomContent:\\\"Main Content\\\"\\n  >>\\n<% endif %>\\n\\n<!-- Dark mode support -->\\n<%if [mediaquery[(prefers-color-scheme: dark)]] %>\\n  <style>\\n    .my-component { background: #1a1a1a; color: #ffffff; }\\n  </style>\\n<% endif %>\\n\\n<!-- Responsive resizer configuration -->\\n<$let handleWidth={{{ [mediaquery[(pointer: coarse)]then[40px]else[10px]] }}}>\\n  <$resizer\\n    direction=\\\"horizontal\\\"\\n    tiddler=\\\"$:/state/panel-width\\\"\\n    default=<<handleWidth>>\\n  />\\n</$let>\\n\\n<!-- Disable animations for users who prefer reduced motion -->\\n<%if [mediaquery[(prefers-reduced-motion: reduce)]] %>\\n  <style>\\n    * { animation: none !important; transition: none !important; }\\n  </style>\\n<% endif %>\\n```\\n\\n!!! Features\\n\\n* ''Reactive Updates'': Automatically refreshes when media query state changes (e.g., window resize, device rotation)\\n* ''Browser-Only'': Returns empty results when running in Node.js\\n* ''Error Handling'': Invalid media queries return empty results\\n* ''Negation Support'': Use `!mediaquery` to invert the condition\\n\\n!!! Common Media Queries\\n\\n* `(max-width: 768px)` – Mobile devices\\n* `(min-width: 769px)` – Tablets and desktops\\n* `(pointer: coarse)` – Touch devices\\n* `(pointer: fine)` – Mouse/trackpad devices\\n* `(prefers-color-scheme: dark)` – Dark mode preference\\n* `(orientation: portrait)` – Portrait orientation\\n* `(orientation: landscape)` – Landscape orientation\\n* `(prefers-reduced-motion: reduce)` – Reduced motion preference\\n\\n!! Browser Compatibility\\n\\n* Modern browsers with ES5 support\\n* Touch devices via pointer events\\n* MediaQueryList API support for reactive media queries\\n* Fallback handling for older viewport unit implementations\\n* Cross-browser window object detection\\n\\n!! Layout Procedures\\n\\nThe resizer plugin includes several pre-built layout procedures that make it easy to create common split-panel layouts:\\n\\n!!! horizontal-split-panel\\n\\nCreates a horizontally split layout with a resizable divider between left and right panels.\\n\\n```\\n<<horizontal-split-panel\\n  leftContent:\\\"Content for left panel\\\"\\n  rightContent:\\\"Content for right panel\\\"\\n  width:\\\"50%\\\"\\n  minWidth:\\\"100px\\\"\\n  maxWidth:\\\"80%\\\"\\n  stateTiddler:\\\"$:/state/hsplit/width\\\"\\n  class:\\\"my-panel\\\"\\n  leftClass:\\\"left-panel-class\\\"\\n  rightClass:\\\"right-panel-class\\\"\\n  splitterClass:\\\"splitter-class\\\"\\n>>\\n```\\n\\n|!Parameter |!Description |!Default |\\n|leftContent |Content for the left panel (variable or tiddler name) |\\\"\\\" |\\n|rightContent |Content for the right panel (variable or tiddler name) |\\\"\\\" |\\n|width |Initial width of the left panel |\\\"50%\\\" |\\n|minHeight |Minimum height of the panel container |\\\"100%\\\" |\\n|minWidth |Minimum width of the left panel |\\\"100px\\\" |\\n|maxWidth |Maximum width of the left panel |\\\"80%\\\" |\\n|stateTiddler |Tiddler to store the current width |\\\"$:/state/hsplit/width\\\" |\\n|class |Additional CSS classes for the container |\\\"\\\" |\\n|leftClass |Additional CSS classes for the left panel |\\\"\\\" |\\n|rightClass |Additional CSS classes for the right panel |\\\"\\\" |\\n|splitterClass |Additional CSS classes for the splitter |\\\"\\\" |\\n\\n!!! vertical-split-panel\\n\\nCreates a vertically split layout with a resizable divider between top and bottom panels.\\n\\n```\\n<<vertical-split-panel\\n  topContent:\\\"Content for top panel\\\"\\n  bottomContent:\\\"Content for bottom panel\\\"\\n  height:\\\"50%\\\"\\n  panelHeight:\\\"100%\\\"\\n  minHeight:\\\"100px\\\"\\n  maxHeight:\\\"80%\\\"\\n  stateTiddler:\\\"$:/state/vsplit/height\\\"\\n  class:\\\"my-panel\\\"\\n  topClass:\\\"top-panel-class\\\"\\n  bottomClass:\\\"bottom-panel-class\\\"\\n  splitterClass:\\\"splitter-class\\\"\\n>>\\n```\\n\\n|!Parameter |!Description |!Default |\\n|topContent |Content for the top panel (variable or tiddler name) |\\\"\\\" |\\n|bottomContent |Content for the bottom panel (variable or tiddler name) |\\\"\\\" |\\n|panelHeight |Height of the entire panel container |\\\"100%\\\" |\\n|height |Initial height of the top panel |\\\"50%\\\" |\\n|minHeight |Minimum height of the top panel |\\\"100px\\\" |\\n|maxHeight |Maximum height of the top panel |\\\"80%\\\" |\\n|stateTiddler |Tiddler to store the current height |\\\"$:/state/vsplit/height\\\" |\\n|class |Additional CSS classes for the container |\\\"\\\" |\\n|topClass |Additional CSS classes for the top panel |\\\"\\\" |\\n|bottomClass |Additional CSS classes for the bottom panel |\\\"\\\" |\\n|splitterClass |Additional CSS classes for the splitter |\\\"\\\" |\\n\\n!!! three-column-panels\\n\\nCreates a three-column layout with resizable left and right panels, and a flexible center panel.\\n\\n```\\n<<three-column-panels\\n  leftContent:\\\"Left panel content\\\"\\n  centerContent:\\\"Center panel content\\\"\\n  rightContent:\\\"Right panel content\\\"\\n  leftWidth:\\\"200px\\\"\\n  rightWidth:\\\"200px\\\"\\n  minWidth:\\\"150px\\\"\\n  maxWidth:\\\"400px\\\"\\n  minHeight:\\\"100%\\\"\\n  leftStateTiddler:\\\"$:/state/three-col/left\\\"\\n  rightStateTiddler:\\\"$:/state/three-col/right\\\"\\n  class:\\\"my-three-col\\\"\\n>>\\n```\\n\\n|!Parameter |!Description |!Default |\\n|leftContent |Content for the left panel (variable or tiddler name) |\\\"\\\" |\\n|centerContent |Content for the center panel (variable or tiddler name) |\\\"\\\" |\\n|rightContent |Content for the right panel (variable or tiddler name) |\\\"\\\" |\\n|leftWidth |Initial width of the left panel |\\\"200px\\\" |\\n|rightWidth |Initial width of the right panel |\\\"200px\\\" |\\n|minWidth |Minimum width for side panels |\\\"150px\\\" |\\n|maxWidth |Maximum width for side panels |\\\"400px\\\" |\\n|minHeight |Minimum height of the panel container |\\\"100%\\\" |\\n|leftStateTiddler |Tiddler to store the left panel width |\\\"$:/state/three-col/left\\\" |\\n|rightStateTiddler |Tiddler to store the right panel width |\\\"$:/state/three-col/right\\\" |\\n|class |Additional CSS classes for the container |\\\"\\\" |\\n\\nNote: The center panel automatically adjusts its width based on the left and right panel sizes, with constraints to ensure all panels remain visible.\\n\\n!!! collapsible-master-detail-panel\\n\\nCreates a master-detail layout where the master panel can be collapsed to save space.\\n\\n```\\n<<collapsible-master-detail-panel\\n  masterContent:\\\"Master panel content\\\"\\n  detailContent:\\\"Detail panel content\\\"\\n  collapsed:\\\"no\\\"\\n  size:\\\"300px\\\"\\n  minSize:\\\"200px\\\"\\n  maxSize:\\\"500px\\\"\\n  minHeight:\\\"100%\\\"\\n  stateTiddler:\\\"$:/state/cmd/size\\\"\\n  collapseStateTiddler:\\\"$:/state/cmd/collapsed\\\"\\n  class:\\\"my-master-detail\\\"\\n>>\\n```\\n\\n|!Parameter |!Description |!Default |\\n|masterContent |Content for the master panel (variable or tiddler name) |\\\"\\\" |\\n|detailContent |Content for the detail panel (variable or tiddler name) |\\\"\\\" |\\n|collapsed |Initial collapsed state (\\\"yes\\\" or \\\"no\\\") |\\\"no\\\" |\\n|size |Initial width of the master panel |\\\"300px\\\" |\\n|minSize |Minimum width of the master panel |\\\"200px\\\" |\\n|maxSize |Maximum width of the master panel |\\\"500px\\\" |\\n|minHeight |Minimum height of the panel container |\\\"100%\\\" |\\n|stateTiddler |Tiddler to store the master panel width |\\\"$:/state/cmd/size\\\" |\\n|collapseStateTiddler |Tiddler to store the collapsed state |\\\"$:/state/cmd/collapsed\\\" |\\n|class |Additional CSS classes for the container |\\\"\\\" |\\n\\nFeatures:\\n\\n* Collapse/expand buttons integrated into the master panel\\n* Detail panel automatically expands when master panel is collapsed\\n* State persistence for both size and collapse state\\n\\n!! License\\n\\nThis plugin is released under the MIT License.\"},\"$:/plugins/BTC/resizer/styles-compat\":{\"title\":\"$:/plugins/BTC/resizer/styles-compat\",\"tags\":\"$:/tags/flibbles/graph/FullscreenStylesheet\",\"type\":\"text/css\",\"text\":\".tc-resizer{z-index:-1!important}\"},\"$:/plugins/BTC/resizer/styles\":{\"title\":\"$:/plugins/BTC/resizer/styles\",\"tags\":\"$:/tags/Stylesheet\",\"text\":\"/* =================================================================\\n   BASE RESIZER STYLES\\n   Common styles for all resizer components\\n   ================================================================= */\\n\\n/* Global resizer behavior */\\n.tc-resizer {\\n\\ttouch-action: none;\\n\\t-webkit-touch-callout: none;\\n\\t-webkit-user-select: none;\\n\\tuser-select: none;\\n\\t-webkit-tap-highlight-color: transparent;\\n}\\n\\n/* Ensure vertical resizers work on touch devices */\\n.tc-resizer[data-direction=\\\"vertical\\\"] {\\n\\ttouch-action: none !important;\\n\\t-ms-touch-action: none !important;\\n}\\n\\n/* Resize overlay for capturing events during resize */\\n.tc-resize-overlay {\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\twidth: 100%;\\n\\theight: 100%;\\n\\tz-index: 999999;\\n\\tbackground: transparent;\\n\\tcursor: inherit;\\n\\tdisplay: none;\\n\\ttouch-action: none;\\n}\\n\\nbody.tc-resizing .tc-resize-overlay {\\n\\tdisplay: block;\\n\\tcursor: inherit;\\n\\tpointer-events: auto !important;\\n}\\n\\n/* Prevent interaction during resize */\\nbody.tc-resizing {\\n\\t-webkit-user-select: none;\\n\\t-moz-user-select: none;\\n\\t-ms-user-select: none;\\n\\tuser-select: none;\\n}\\n\\nbody.tc-resizing * {\\n\\tpointer-events: none !important;\\n}\\n\\n/* Allow pointer events on resizer elements even during resize for multi-touch support */\\nbody.tc-resizing .tc-resizer {\\n\\tpointer-events: auto !important;\\n}\\n\\n/* CRITICAL: Keep iframe editors interactive during resize */\\nbody.tc-resizing .tc-edit-texteditor iframe {\\n\\tpointer-events: auto !important;\\n}\\n\\n/* Ensure the editor wrapper remains interactive */\\nbody.tc-resizing .tc-edit-texteditor {\\n\\tpointer-events: auto !important;\\n}\\n\\n/* Also keep codemirror editors interactive if present */\\nbody.tc-resizing .CodeMirror {\\n\\tpointer-events: auto !important;\\n}\\n\\n/* Keep simple textareas interactive during resize */\\nbody.tc-resizing .tc-edit-texteditor textarea {\\n\\tpointer-events: auto !important;\\n}\\n\\n/* Disabled resizer state */\\n.tc-resizer-disabled {\\n\\topacity: 0.3;\\n\\tcursor: not-allowed !important;\\n}\\n\\n.tc-resizer-disabled:hover {\\n\\tbackground-color: <<colour muted-foreground>> !important;\\n\\topacity: 0.3 !important;\\n}\\n\\n/* =================================================================\\n   SIDEBAR RESIZER\\n   Styles for the main sidebar resizer\\n   ================================================================= */\\n\\n/* Sidebar wrapper positioning */\\n@media (min-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\\n\\t.tc-sidebar-scrollable-wrapper {\\n\\t\\tposition: fixed;\\n\\t\\ttop: 0;\\n\\t\\tright: 0;\\n\\t\\tbottom: 0;\\n\\t\\tleft: {{{ [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fixed-fluid]then{$:/themes/tiddlywiki/vanilla/metrics/storyright}] :else[[auto]] }}};\\n\\t\\twidth: {{{ [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fluid-fixed]then{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}] :else[[auto]] }}};\\n\\t\\tmax-width: calc(100vw - {{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}} - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t\\tz-index: 100;\\n\\t}\\n\\n\\t<%if [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fluid-fixed]] %>\\n\\n\\t\\t.tc-sidebar-scrollable {\\n\\t\\t\\tmax-width: calc(100vw - {{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}} - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t\\t}\\n\\n\\t\\t.tc-story-river {\\n\\t\\t\\tmargin-right: clamp({{$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth}},{{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}},calc(100vw - {{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}} - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}}));\\n\\t\\t}\\n\\n\\t<%elseif [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fixed-fluid]] %>\\n\\n\\t\\t.tc-sidebar-scrollable {\\n\\t\\t\\tmax-width: calc(100vw - {{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}} - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t\\t}\\n\\n\\t\\t.tc-story-river {\\n\\t\\t\\tmax-width: calc(100% - {{$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth}} + {{$:/themes/tiddlywiki/vanilla/metrics/storywidth}} - {{$:/$:/themes/tiddlywiki/vanilla/metrics/storyright}} + {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t\\t}\\n\\n\\t<% endif %>\\n}\\n\\n<%if [{$:/state/sidebar}match[no]] %>\\n.tc-sidebar-scrollable-wrapper {\\n\\tz-index: initial;\\n}\\n<% endif %>\\n\\n/* Sidebar resizer bar */\\n.tc-sidebar-resizer {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: {{{ [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fluid-fixed]then[18px]] :else[[-24px]] }}};\\n\\twidth: 6px;\\n\\tcursor: ew-resize;\\n\\tbackground-color: <<colour muted-foreground>>;\\n\\topacity: 0.75;\\n\\ttransition: opacity 0.2s ease, background-color 0.2s ease;\\n\\tz-index: 1;\\n}\\n\\n.tc-sidebar-resizer:hover,\\n.tc-sidebar-resizer.tc-resizer-active {\\n\\tbackground-color: <<colour primary>>;\\n\\topacity: 0.75;\\n}\\n\\n/* Sidebar resizer grip indicator */\\n.tc-sidebar-resizer::before,\\n.tc-tiddler-editor-resizer::before {\\n\\tcontent: \\\"\\\";\\n\\tposition: absolute;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%);\\n\\twidth: 3px;\\n\\theight: 40px;\\n\\tbackground: <<colour primary>>;\\n\\tborder-radius: 1.5px;\\n\\topacity: 1;\\n}\\n\\n.tc-sidebar-resizer:hover::before,\\n.tc-sidebar-resizer.tc-resizer-active::before,\\n.tc-tiddler-editor-resizer:hover::before,\\n.tc-tiddler-editor-resizer.tc-resizer-active::before {\\n\\tbackground: <<colour muted-foreground>>;\\n}\\n\\n/* Hide sidebar resizer on mobile */\\n@media (max-width: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}) {\\n\\t.tc-sidebar-resizer {\\n\\t\\tdisplay: none;\\n\\t}\\n}\\n\\n@media (pointer: coarse) {\\n\\t.tc-sidebar-resizer {\\n\\t\\tleft: {{{ [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fluid-fixed]then[6px]] :else[[-36px]] }}};\\n\\t}\\n}\\n\\n/* =================================================================\\n   EDITOR RESIZER\\n   Styles for the tiddler editor preview pane resizer\\n   ================================================================= */\\n\\n.tc-tiddler-editor-resizer {\\n\\tgrid-area: resizer;\\n\\twidth: 5px;\\n\\tcursor: ew-resize;\\n\\tbackground-color: <<colour muted-foreground>>;\\n\\topacity: 0.75;\\n\\ttransition: opacity 0.2s ease, background-color 0.2s ease;\\n\\tmargin: 4px 0 3px 0;\\n\\tposition: relative;\\n}\\n\\n.tc-tiddler-editor-resizer:hover,\\n.tc-tiddler-editor-resizer.tc-resizer-active {\\n\\tbackground-color: <<colour primary>>;\\n\\topacity: 1;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview .tc-tiddler-preview-preview {\\n\\tmargin-left: 0;\\n}\\n\\n@media (pointer: coarse) {\\n\\t.tc-tiddler-editor-resizer {\\n\\t\\twidth: 15px;\\n\\t}\\n}\\n\\n/* =================================================================\\n   PANEL LAYOUTS\\n   Base styles for various panel layout components\\n   ================================================================= */\\n\\n/* Base panel containers */\\n.tc-horizontal-split-panel,\\n.tc-vertical-split-panel,\\n.tc-three-column-panels,\\n.tc-three-row-panels,\\n.tc-master-detail-layout,\\n.tc-collapsible-master-detail {\\n\\tposition: relative;\\n\\tdisplay: flex;\\n\\twidth: 100%;\\n\\theight: 100%;\\n\\tbox-sizing: border-box;\\n\\toverflow: hidden;\\n}\\n\\n.tc-horizontal-split-panel,\\n.tc-three-column-panels {\\n\\tflex-direction: row;\\n}\\n\\n.tc-vertical-split-panel,\\n.tc-three-row-panels {\\n\\tflex-direction: column;\\n}\\n\\n/* Panel flex behavior */\\n.tc-panel-left,\\n.tc-panel-top,\\n.tc-master-panel,\\n.tc-three-column-panels > .tc-panel-right {\\n\\tflex-shrink: 0;\\n}\\n\\n.tc-panel-right:not(.tc-three-column-panels > .tc-panel-right),\\n.tc-panel-bottom:not(.tc-three-row-panels > .tc-panel-bottom),\\n.tc-panel-center,\\n.tc-panel-center-vertical,\\n.tc-detail-panel {\\n\\tflex: 1;\\n}\\n\\n/* Ensure center-vertical panel fills remaining height */\\n.tc-panel-center-vertical {\\n\\theight: 100%;\\n\\toverflow: auto;\\n}\\n\\n/* Ensure text wrapping in panels */\\n.tc-panel-left,\\n.tc-panel-right,\\n.tc-panel-top,\\n.tc-panel-bottom,\\n.tc-panel-center,\\n.tc-master-panel,\\n.tc-detail-panel {\\n\\tword-wrap: break-word;\\n\\toverflow-wrap: break-word;\\n}\\n\\n/* =================================================================\\n   PANEL SPLITTERS\\n   Resizer bars between panels\\n   ================================================================= */\\n\\n.tc-panel-splitter-vertical,\\n.tc-panel-splitter-horizontal {\\n\\tflex-shrink: 0;\\n\\tposition: relative;\\n\\tbackground: <<colour muted-foreground>>;\\n\\ttransition: background 0.2s ease;\\n}\\n\\n.tc-panel-splitter-vertical {\\n\\twidth: 5px;\\n\\tcursor: ew-resize;\\n}\\n\\n.tc-panel-splitter-horizontal {\\n\\theight: 5px;\\n\\tcursor: ns-resize;\\n}\\n\\n.tc-panel-splitter-vertical:hover,\\n.tc-panel-splitter-horizontal:hover,\\n.tc-panel-splitter-vertical.tc-resizer-active,\\n.tc-panel-splitter-horizontal.tc-resizer-active {\\n\\tbackground: <<colour primary>>;\\n}\\n\\n.tc-panel-splitter-vertical.tc-resizer-active,\\n.tc-panel-splitter-horizontal.tc-resizer-active {\\n\\topacity: 0.8;\\n}\\n\\n/* Splitter grip indicators */\\n.tc-panel-splitter-vertical::before,\\n.tc-panel-splitter-horizontal::before {\\n\\tcontent: \\\"\\\";\\n\\tposition: absolute;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%);\\n}\\n\\n.tc-panel-splitter-vertical::before {\\n\\twidth: 3px;\\n\\theight: 40px;\\n\\tbackground: <<colour primary>>;\\n\\tborder-radius: 1.5px;\\n\\topacity: 1;\\n}\\n\\n.tc-panel-splitter-horizontal::before {\\n\\twidth: 40px;\\n\\theight: 3px;\\n\\tbackground: <<colour primary>>;\\n\\tborder-radius: 1.5px;\\n\\topacity: 1;\\n}\\n\\n.tc-panel-splitter-vertical:hover::before,\\n.tc-panel-splitter-vertical.tc-resizer-active::before,\\n.tc-panel-splitter-horizontal:hover::before,\\n.tc-panel-splitter-horizontal.tc-resizer-active::before {\\n\\tbackground: <<colour muted-foreground>>;\\n}\\n\\n/* =================================================================\\n   MASTER-DETAIL LAYOUTS\\n   Specific styles for master-detail panel arrangements\\n   ================================================================= */\\n\\n.tc-master-detail-layout .tc-master-panel {\\n\\tbackground: <<colour tiddler-background>>;\\n\\tborder-right: 1px solid <<colour tiddler-border>>;\\n}\\n\\n.tc-master-detail-layout.tc-vertical-split-panel .tc-master-panel {\\n\\tborder-right: none;\\n\\tborder-bottom: 1px solid <<colour tiddler-border>>;\\n}\\n\\n/* Collapsible master-detail */\\n.tc-collapsible-master-detail {\\n\\tposition: relative;\\n}\\n\\n.tc-collapsible-master-detail .tc-master-panel {\\n\\tposition: relative;\\n}\\n\\n.tc-collapsible-master-detail .tc-master-panel {\\n\\ttransition: margin-left 0.3s ease;\\n}\\n\\n.tc-collapsible-three-column-panels .tc-panel-left {\\n\\ttransition: margin-left 0.3s ease;\\n}\\n\\n.tc-collapsible-three-column-panels .tc-panel-right {\\n\\ttransition: margin-right 0.3s ease;\\n}\\n\\n.tc-collapsible-three-row-panels .tc-panel-top {\\n\\ttransition: margin-top 0.3s ease;\\n}\\n\\n.tc-collapsible-three-row-panels .tc-panel-bottom {\\n\\ttransition: margin-bottom 0.3s ease;\\n}\\n\\n.tc-collapsible-master-detail .tc-master-panel.tc-collapsed {\\n\\tflex-shrink: 0;\\n}\\n\\n/* Collapse/expand buttons */\\n.tc-panel-collapse-btn,\\n.tc-panel-expand-btn {\\n\\tposition: absolute;\\n\\ttop: 10px;\\n\\tleft: 10px;\\n\\tpadding: 5px;\\n\\tborder: 1px solid <<colour tiddler-border>>;\\n\\tborder-radius: 3px;\\n\\tz-index: 1;\\n}\\n\\n.tc-panel-collapse-btn.tc-panel-btn-right,\\n.tc-panel-expand-btn.tc-panel-btn-right {\\n\\tleft: auto;\\n\\tright: 10px;\\n}\\n\\n.tc-panel-collapse-btn.tc-panel-btn-top,\\n.tc-panel-expand-btn.tc-panel-btn-top,\\n.tc-panel-collapse-btn.tc-panel-btn-bottom,\\n.tc-panel-expand-btn.tc-panel-btn-bottom {\\n\\ttransform: rotate(90deg);\\n}\\n\\n.tc-panel-collapse-btn.tc-panel-btn-bottom,\\n.tc-panel-expand-btn.tc-panel-btn-bottom {\\n\\ttop: auto;\\n\\tbottom: 10px;\\n}\\n\\n/* =================================================================\\n   HANDLE STYLE VARIATIONS\\n   Different visual styles for resizer handles\\n   ================================================================= */\\n\\n/* Dots pattern */\\n.tc-resizer[data-handle-style=\\\"dots\\\"]::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"dots\\\"]::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"dots\\\"]::before {\\n\\twidth: 5px;\\n\\theight: 5px;\\n\\tborder-radius: 50%;\\n\\tbackground: <<colour primary>>;\\n\\tbox-shadow: 0 10px 0 <<colour primary>>, 0 20px 0 <<colour primary>>, 0 -10px 0 <<colour primary>>, 0 -20px 0 <<colour primary>>;\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"dots\\\"]::before {\\n\\twidth: 5px;\\n\\theight: 5px;\\n\\tborder-radius: 50%;\\n\\tbackground: <<colour primary>>;\\n\\tbox-shadow: 10px 0 0 <<colour primary>>, 20px 0 0 <<colour primary>>, -10px 0 0 <<colour primary>>, -20px 0 0 <<colour primary>>;\\n}\\n\\n/* Lines pattern */\\n.tc-resizer[data-handle-style=\\\"lines\\\"]::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"lines\\\"]::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"lines\\\"]::before {\\n\\twidth: 1px;\\n\\theight: 40px;\\n\\tbackground: repeating-linear-gradient(\\n\\t\\tto bottom,\\n\\t\\t<<colour primary>> 0,\\n\\t\\t<<colour primary>> 3px,\\n\\t\\ttransparent 3px,\\n\\t\\ttransparent 6px\\n\\t);\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"lines\\\"]::before {\\n\\twidth: 40px;\\n\\theight: 1px;\\n\\tbackground: repeating-linear-gradient(\\n\\t\\tto right,\\n\\t\\t<<colour primary>> 0,\\n\\t\\t<<colour primary>> 3px,\\n\\t\\ttransparent 3px,\\n\\t\\ttransparent 6px\\n\\t);\\n}\\n\\n/* Chevron pattern */\\n.tc-resizer[data-handle-style=\\\"chevron\\\"]::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"chevron\\\"]::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"chevron\\\"]::before {\\n\\tcontent: \\\"❯\\\";\\n\\twidth: auto;\\n\\theight: auto;\\n\\tbackground: none;\\n\\tfont-size: 12px;\\n\\tcolor: <<colour primary>>;\\n\\tletter-spacing: -3px;\\n\\tfont-weight: bold;\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"chevron\\\"]::before {\\n\\tcontent: \\\"⌄\\\";\\n\\twidth: auto;\\n\\theight: auto;\\n\\tbackground: none;\\n\\tfont-size: 12px;\\n\\tcolor: <<colour primary>>;\\n\\tletter-spacing: -3px;\\n\\tfont-weight: bold;\\n}\\n\\n/* Grip pattern (dots grid) */\\n.tc-resizer[data-handle-style=\\\"grip\\\"]::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"grip\\\"]::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"grip\\\"]::before {\\n\\tcontent: \\\"⋮\\\";\\n\\twidth: auto;\\n\\theight: auto;\\n\\tbackground: none;\\n\\tfont-size: 14px;\\n\\tcolor: <<colour primary>>;\\n\\tletter-spacing: -2px;\\n\\tline-height: 1;\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"grip\\\"]::before {\\n\\tcontent: \\\"⋯⋯\\\";\\n\\twidth: auto;\\n\\theight: auto;\\n\\tbackground: none;\\n\\tfont-size: 14px;\\n\\tcolor: <<colour primary>>;\\n\\tletter-spacing: -2px;\\n\\tline-height: 1;\\n}\\n\\n/* Hover states for all handle styles */\\n.tc-resizer[data-handle-style]:hover::before,\\n.tc-sidebar-resizer[data-handle-style]:hover::before,\\n.tc-panel-splitter-vertical[data-handle-style]:hover::before,\\n.tc-panel-splitter-horizontal[data-handle-style]:hover::before,\\n.tc-resizer[data-handle-style].tc-resizer-active::before,\\n.tc-sidebar-resizer[data-handle-style].tc-resizer-active::before,\\n.tc-panel-splitter-vertical[data-handle-style].tc-resizer-active::before,\\n.tc-panel-splitter-horizontal[data-handle-style].tc-resizer-active::before {\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\n.tc-resizer[data-handle-style=\\\"dots\\\"]:hover::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"dots\\\"]:hover::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"dots\\\"]:hover::before,\\n.tc-resizer[data-handle-style=\\\"dots\\\"].tc-resizer-active::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"dots\\\"].tc-resizer-active::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"dots\\\"].tc-resizer-active::before {\\n\\tbackground: <<colour muted-foreground>>;\\n\\tbox-shadow: 0 10px 0 <<colour muted-foreground>>, 0 20px 0 <<colour muted-foreground>>, 0 -10px 0 <<colour muted-foreground>>, 0 -20px 0 <<colour muted-foreground>>;\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"dots\\\"]:hover::before,\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"dots\\\"].tc-resizer-active::before {\\n\\tbackground: <<colour muted-foreground>>;\\n\\tbox-shadow: 10px 0 0 <<colour muted-foreground>>, 20px 0 0 <<colour muted-foreground>>, -10px 0 0 <<colour muted-foreground>>, -20px 0 0 <<colour muted-foreground>>;\\n}\\n\\n.tc-resizer[data-handle-style=\\\"lines\\\"]:hover::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"lines\\\"]:hover::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"lines\\\"]:hover::before,\\n.tc-resizer[data-handle-style=\\\"lines\\\"].tc-resizer-active::before,\\n.tc-sidebar-resizer[data-handle-style=\\\"lines\\\"].tc-resizer-active::before,\\n.tc-panel-splitter-vertical[data-handle-style=\\\"lines\\\"].tc-resizer-active::before {\\n\\tbackground: repeating-linear-gradient(\\n\\t\\tto bottom,\\n\\t\\t<<colour muted-foreground>> 0,\\n\\t\\t<<colour muted-foreground>> 3px,\\n\\t\\ttransparent 3px,\\n\\t\\ttransparent 6px\\n\\t);\\n}\\n\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"lines\\\"]:hover::before,\\n.tc-panel-splitter-horizontal[data-handle-style=\\\"lines\\\"].tc-resizer-active::before {\\n\\tbackground: repeating-linear-gradient(\\n\\t\\tto right,\\n\\t\\t<<colour muted-foreground>> 0,\\n\\t\\t<<colour muted-foreground>> 3px,\\n\\t\\ttransparent 3px,\\n\\t\\ttransparent 6px\\n\\t);\\n}\\n\\n/* Double-click visual feedback */\\n@keyframes resizer-reset-pulse {\\n\\t0% { opacity: 1; }\\n\\t50% { opacity: 0.3; }\\n\\t100% { opacity: 1; }\\n}\\n\\n.tc-resizer:active {\\n\\tanimation: resizer-reset-pulse 0.2s ease-out;\\n}\\n\\n/* =================================================================\\n   TOUCH DEVICE ENHANCEMENTS\\n   Improved usability for mobile and touch interfaces\\n   ================================================================= */\\n\\n@media (pointer: coarse) {\\n\\t/* Add gaps between panels for easier touch */\\n\\t.tc-horizontal-split-panel,\\n\\t.tc-three-column-panels,\\n\\t.tc-collapsible-master-detail {\\n\\t\\tgap: 10px;\\n\\t}\\n\\t\\n\\t.tc-vertical-split-panel {\\n\\t\\tgap: 10px;\\n\\t\\t/* Prevent vertical scroll interference on touch */\\n\\t\\t/*touch-action: pan-x pinch-zoom;*/\\n\\t}\\n\\t\\n\\t/* Center resizers in gap space */\\n\\t.tc-horizontal-split-panel .tc-panel-splitter-vertical,\\n\\t.tc-three-column-panels .tc-panel-splitter-vertical,\\n\\t.tc-collapsible-master-detail .tc-panel-splitter-vertical {\\n\\t\\tmargin-left: -10px;\\n\\t\\tmargin-right: -10px;\\n\\t}\\n\\t\\n\\t.tc-vertical-split-panel .tc-panel-splitter-horizontal {\\n\\t\\tmargin-top: -10px;\\n\\t\\tmargin-bottom: -10px;\\n\\t\\t/* Ensure touch target is properly positioned */\\n\\t\\tposition: relative;\\n\\t\\tz-index: 10;\\n\\t}\\n\\t\\n\\t/* Enhanced splitters for touch */\\n\\t.tc-panel-splitter-vertical,\\n\\t.tc-panel-splitter-horizontal {\\n\\t\\topacity: 0.3;\\n\\t}\\n\\t\\n\\t.tc-panel-splitter-vertical {\\n\\t\\twidth: 20px;\\n\\t\\tflex-shrink: 0;\\n\\t}\\n\\t\\n\\t.tc-panel-splitter-horizontal {\\n\\t\\theight: 20px;\\n\\t\\tflex-shrink: 0;\\n\\t}\\n\\t\\n\\t.tc-panel-splitter-vertical::before {\\n\\t\\twidth: 3px;\\n\\t\\theight: 40px;\\n\\t\\tbackground: <<colour muted-foreground>>;\\n\\t\\tborder-radius: 1.5px;\\n\\t\\topacity: 1;\\n\\t}\\n\\t\\n\\t.tc-panel-splitter-horizontal::before {\\n\\t\\twidth: 40px;\\n\\t\\theight: 3px;\\n\\t\\tbackground: <<colour muted-foreground>>;\\n\\t\\tborder-radius: 1.5px;\\n\\t\\topacity: 1;\\n\\t}\\n\\t\\n\\t.tc-panel-splitter-vertical:hover,\\n\\t.tc-panel-splitter-horizontal:hover,\\n\\t.tc-panel-splitter-vertical.tc-resizer-active,\\n\\t.tc-panel-splitter-horizontal.tc-resizer-active {\\n\\t\\topacity: 1;\\n\\t}\\n\\t\\n\\t/* Enhanced touch targets for all resizers */\\n\\t.tc-resizer:not(.tc-sidebar-resizer) {\\n\\t\\tposition: relative;\\n\\t}\\n\\t\\n\\t.tc-resizer[data-direction=\\\"horizontal\\\"]:not(.tc-tiddler-editor-resizer) {\\n\\t\\tmin-width: 20px;\\n\\t}\\n\\t\\n\\t.tc-resizer[data-direction=\\\"vertical\\\"]:not(.tc-tiddler-editor-resizer) {\\n\\t\\tmin-height: 20px;\\n\\t}\\n\\t\\n\\t/* Editor resizer enhancement for touch */\\n\\t.tc-tiddler-editor-resizer {\\n\\t\\twidth: 15px;\\n\\t\\topacity: 0.3;\\n\\t\\tpadding: 0 5px;\\n\\t}\\n\\t\\n\\t/*.tc-tiddler-editor-resizer::after {\\n\\t\\tcontent: \\\"⋮\\\";\\n\\t\\tposition: absolute;\\n\\t\\ttop: 50%;\\n\\t\\tleft: 50%;\\n\\t\\ttransform: translate(-50%, -50%);\\n\\t\\tfont-size: 12px;\\n\\t\\tcolor: <<colour muted-foreground>>;\\n\\t\\topacity: 0.7;\\n\\t}*/\\n\\t\\n\\t/* Active state for touch */\\n\\t.tc-resizer.tc-resizer-active {\\n\\t\\topacity: 1 !important;\\n\\t\\tbackground-color: <<colour primary>>;\\n\\t}\\n\\t\\n\\t.tc-tiddler-editor-resizer.tc-resizer-active::after {\\n\\t\\tcolor: <<colour background>>;\\n\\t\\topacity: 1;\\n\\t}\\n}\\n\\n/* =================================================================\\n   RESIZABLE TABLE\\n   Styles for resizable table components\\n   ================================================================= */\\n\\n.tc-resizable-table {\\n\\ttable-layout: fixed;\\n\\tborder-collapse: collapse;\\n\\twidth: 100%;\\n}\\n\\n.tc-resizable-table th,\\n.tc-resizable-table td {\\n\\tword-wrap: break-word;\\n\\toverflow-wrap: break-word;\\n\\tword-break: break-word;\\n\\twhite-space: normal;\\n\\toverflow: hidden;\\n}\\n\\n.tc-resizable-table-cell {\\n\\tword-wrap: break-word;\\n\\toverflow-wrap: break-word;\\n\\tword-break: break-word;\\n\\twhite-space: normal;\\n}\\n\\n.tc-table-column-resizer {\\n\\tposition: absolute;\\n\\tright: -4px;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\twidth: 8px;\\n\\tcursor: col-resize;\\n\\tz-index: 10;\\n}\\n\\n/* =================================================================\\n   RESIZABLE TABLE FLEXBOX\\n   Styles for flexbox-based resizable table\\n   ================================================================= */\\n\\n.tc-resizable-table-flexbox-wrapper {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\twidth: 100%;\\n\\tborder: 1px solid <<colour table-border>>;\\n}\\n\\n.tc-resizable-table-flexbox-header {\\n\\tborder-bottom: 2px solid <<colour table-border>>;\\n}\\n\\n.tc-resizable-table-flexbox-header > div:not(:last-child) {\\n\\tborder-right: 1px solid <<colour table-border>>;\\n}\\n\\n.tc-resizable-table-flexbox-row {\\n\\tborder-bottom: 1px solid <<colour table-border>>;\\n}\\n\\n.tc-resizable-table-flexbox-row:last-child {\\n\\tborder-bottom: none;\\n}\\n\\n.tc-resizable-table-flexbox-row > div:not(:last-child) {\\n\\tborder-right: 1px solid <<colour table-border>>;\\n}\\n\\n.tc-table-column-resizer-flexbox {\\n\\tposition: absolute;\\n\\tright: -4px;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\twidth: 8px;\\n\\tcursor: col-resize;\\n\\tz-index: 100;\\n\\tbackground: transparent;\\n}\\n\\n.tc-width-100 {\\n\\twidth: 100%;\\n}\"},\"$:/plugins/BTC/resizer/ui/EditTemplate/body/default\":{\"title\":\"$:/plugins/BTC/resizer/ui/EditTemplate/body/default\",\"code-body\":\"yes\",\"text\":\"\\\\function edit-preview-state()\\n[{$:/config/ShowEditPreview/PerTiddler}!match[yes]then[$:/state/showeditpreview]] :else[<qualified-preview-state>] +[get[text]] :else[[no]]\\n\\\\end\\n\\n\\\\define config-visibility-title()\\n$:/config/EditorToolbarButtons/Visibility/$(currentTiddler)$\\n\\\\end\\n\\n\\\\define importFileActions()\\n<$action-popup $state=<<importState>> $coords=\\\"(0,0,0,0)\\\" $floating=\\\"yes\\\"/>\\n\\\\end\\n\\n\\\\whitespace trim\\n<$let\\n\\tqualified-preview-state=<<qualify \\\"$:/state/showeditpreview\\\">>\\n\\teditPreviewStateTiddler={{{ [{$:/config/ShowEditPreview/PerTiddler}!match[yes]then[$:/state/showeditpreview]] :else[<qualified-preview-state>] }}}\\n\\timportTitle=<<qualify $:/ImportImage>>\\n\\timportState=<<qualify $:/state/ImportImage>>\\n\\thandleWidth={{{ [[15px]mediaquery[(pointer: coarse)]] :else[[5px]] }}} >\\n<$dropzone importTitle=<<importTitle>> autoOpenOnImport=\\\"no\\\" contentTypesFilter={{$:/config/Editor/ImportContentTypesFilter}} class=\\\"tc-dropzone-editor\\\" enable={{{ [{$:/config/DragAndDrop/Enable}match[no]] :else[subfilter{$:/config/Editor/EnableImportFilter}then[yes]else[no]] }}} filesOnly=\\\"yes\\\" actions=<<importFileActions>> >\\n<div>\\n<div class={{{ [<edit-preview-state>match[yes]then[tc-tiddler-preview]else[tc-tiddler-preview-hidden]] [[tc-tiddler-editor]] +[join[ ]] }}} style.grid-template-areas={{{ [<edit-preview-state>match[yes]then[\\\"toolbar toolbar toolbar\\\" \\\"editor resizer preview\\\"]else[\\\"toolbar toolbar toolbar\\\" \\\"editor editor editor\\\"]] }}} style.grid-template-columns={{{ [<edit-preview-state>match[yes]then<editPreviewStateTiddler>has[width]get[width]addsuffix[ ]addsuffix<handleWidth>addsuffix[ 1fr]] :else[<edit-preview-state>match[yes]then<editPreviewStateTiddler>!has[width]then[50% ]addsuffix<handleWidth>addsuffix[ 1fr]] :else[<edit-preview-state>!match[yes]then[1fr]] }}}>\\n\\n<$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n\\n<$list filter=\\\"[<editPreviewStateTiddler>get[text]match[yes]]\\\" variable=\\\"ignore\\\">\\n\\n<$resizer\\n\\tclass=\\\"tc-tiddler-editor-resizer\\\"\\n\\tdirection=\\\"horizontal\\\"\\n\\ttiddler=<<editPreviewStateTiddler>>\\n\\tfield=\\\"width\\\"\\n\\tmin=\\\"20%\\\"\\n\\tmax=\\\"80%\\\"\\n\\tdefault=\\\"50%\\\"\\n\\tunit=\\\"%\\\"\\n\\tsmoothReset=\\\"yes\\\"\\n\\thandleStyle=\\\"solid\\\"\\n/>\\n\\n<div class=\\\"tc-tiddler-preview-preview\\\" data-tiddler-title={{!!draft.title}} data-tags={{!!tags}}>\\n\\n<$transclude tiddler={{$:/state/editpreviewtype}} mode=\\\"inline\\\">\\n\\n<$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/preview/output\\\" mode=\\\"inline\\\"/>\\n\\n</$transclude>\\n\\n</div>\\n\\n</$list>\\n\\n</div>\\n\\n</div>\\n\\n</$dropzone>\\n\\n</$let>\\n\"},\"$:/plugins/BTC/resizer/procedures/panels\":{\"title\":\"$:/plugins/BTC/resizer/procedures/panels\",\"tags\":\"$:/tags/Global\",\"code-body\":\"yes\",\"text\":\"\\\\function tf.get.value.metric(value)\\n[<value>suffix[px]then[px]]\\n:else[<value>suffix[%]then[%]]\\n:else[<value>suffix[rem]then[rem]]\\n:else[<value>suffix[em]then[em]]\\n:else[<value>suffix[vh]then[vh]]\\n:else[<value>suffix[vw]then[vw]]\\n:else[<value>suffix[vmin]then[vmin]]\\n:else[<value>suffix[vmax]then[vmax]]\\n\\\\end\\n\\n\\\\function tf.convert.px.to.percentage(parentWidth,width) [<width>multiply[100]divide<parentWidth>]\\n\\n\\\\procedure horizontal-split-panel(leftContent:\\\"\\\", rightContent:\\\"\\\", width:\\\"50%\\\", minHeight:\\\"100%\\\", minWidth:\\\"5%\\\", maxWidth:\\\"80%\\\", stateTiddler:\\\"$:/state/hsplit/width\\\", class:\\\"\\\", leftClass:\\\"\\\", rightClass:\\\"\\\", splitterClass:\\\"\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-horizontal-split-panel [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width=\\\"100%\\\">\\n\\t<div class={{{ tc-panel-left [<leftClass>] +[join[ ]] }}} style.width={{{ [<stateTiddler>get[text]else<width>] }}} style.max-width=<<maxWidth>>>\\n\\t\\t<%if [<leftContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<$resizer\\n\\t\\tclass={{{ tc-panel-splitter-vertical [<splitterClass>] +[join[ ]] }}}\\n\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\ttiddler=<<stateTiddler>>\\n\\t\\tmin=<<minWidth>>\\n\\t\\tmax=<<maxWidth>>\\n\\t\\tdefault=<<width>>\\n\\t\\tunit={{{ [tf.get.value.metric<width>] :else[[px]] }}}\\n\\t/>\\n\\t<div class={{{ tc-panel-right [<rightClass>] +[join[ ]] }}}>\\n\\t\\t<%if [<rightContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\procedure vertical-split-panel(topContent:\\\"\\\", bottomContent:\\\"\\\", panelHeight:\\\"75vh\\\", height:\\\"50%\\\", minHeight:\\\"10%\\\", maxHeight:\\\"80%\\\", stateTiddler:\\\"$:/state/vsplit/height\\\", class:\\\"\\\", topClass:\\\"\\\", bottomClass:\\\"\\\", splitterClass:\\\"\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-vertical-split-panel [<class>] +[join[ ]] }}} style.height=<<panelHeight>> style.max-width=\\\"100%\\\">\\n\\t<div class={{{ tc-panel-top [<topClass>] +[join[ ]] }}} style.height={{{ [<stateTiddler>get[text]else<height>] }}} style.max-height=<<maxHeight>>>\\n\\t\\t<%if [<topContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<topContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<topContent>is[tiddler]] [<topContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<topContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<$resizer\\n\\t\\tclass={{{ tc-panel-splitter-horizontal [<splitterClass>] +[join[ ]] }}}\\n\\t\\tdirection=\\\"vertical\\\"\\n\\t\\ttiddler=<<stateTiddler>>\\n\\t\\tmin=<<minHeight>>\\n\\t\\tmax=<<maxHeight>>\\n\\t\\tdefault=<<height>>\\n\\t\\tunit={{{ [tf.get.value.metric<height>] :else[[px]] }}}\\n\\t/>\\n\\t<div class={{{ tc-panel-bottom [<bottomClass>] +[join[ ]] }}}>\\n\\t\\t<%if [<bottomContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<bottomContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<bottomContent>is[tiddler]] [<bottomContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<bottomContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\function tf.get-three-column-panels-left-max-width() [<rightStateTiddler>get[text]addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]] :else[<rightWidth>addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]]\\n\\\\function tf.get-three-column-panels-right-max-width() [<leftStateTiddler>get[text]addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]] :else[<leftWidth>addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]]\\n\\n\\\\procedure three-column-panels(leftContent:\\\"\\\", centerContent:\\\"\\\", rightContent:\\\"\\\", leftWidth:\\\"10%\\\", rightWidth:\\\"10%\\\", minWidth:\\\"5%\\\", maxWidth:\\\"80%\\\", minHeight:\\\"100%\\\", leftStateTiddler:\\\"$:/state/three-col/left\\\", rightStateTiddler:\\\"$:/state/three-col/right\\\", class:\\\"\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-three-column-panels [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width=\\\"100%\\\">\\n\\t<div class=\\\"tc-panel-left\\\" style.width={{{ [<leftStateTiddler>get[text]else<leftWidth>] }}} style.max-height=\\\"100%\\\">\\n\\t\\t<%if [<leftContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<$resizer\\n\\t\\tclass=\\\"tc-panel-splitter-vertical\\\"\\n\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\ttiddler=<<leftStateTiddler>>\\n\\t\\tmin=<<minWidth>>\\n\\t\\tmax=<<tf.get-three-column-panels-left-max-width>>\\n\\t\\tdefault=<<leftWidth>>\\n\\t\\tunit={{{ [tf.get.value.metric<leftWidth>] :else[[px]] }}}\\n\\t/>\\n\\t<div class=\\\"tc-panel-center\\\" style.min-width=<<minWidth>> style.max-height=\\\"100%\\\">\\n\\t\\t<%if [<centerContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<$resizer\\n\\t\\tclass=\\\"tc-panel-splitter-vertical\\\"\\n\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\ttiddler=<<rightStateTiddler>>\\n\\t\\tmin=<<minWidth>>\\n\\t\\tmax=<<tf.get-three-column-panels-right-max-width>>\\n\\t\\tdefault=<<rightWidth>>\\n\\t\\tunit={{{ [tf.get.value.metric<rightWidth>] :else[[px]] }}}\\n\\t\\tinvert=\\\"yes\\\"\\n\\t\\telement=\\\"nextSibling\\\"\\n\\t/>\\n\\t<div class=\\\"tc-panel-right\\\" style.width={{{ [<rightStateTiddler>get[text]else<rightWidth>] }}} style.max-height=\\\"100%\\\">\\n\\t\\t<%if [<rightContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\procedure collapsible-master-detail-panel(masterContent:\\\"\\\", detailContent:\\\"\\\", collapsed:\\\"no\\\", size:\\\"25%\\\", minSize:\\\"10%\\\", maxSize:\\\"40%\\\", minHeight:\\\"100%\\\" stateTiddler:\\\"$:/state/cmdp/size\\\", collapseStateTiddler:\\\"$:/state/cmdp/collapsed\\\", class:\\\"\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-collapsible-master-detail [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width=\\\"100%\\\">\\n\\t<%if [<collapseStateTiddler>get[text]else<collapsed>match[no]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-collapse-btn\\\" set=<<collapseStateTiddler>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-left}}\\n\\t\\t</$button>\\n\\t<%elseif [<collapseStateTiddler>get[text]else<collapsed>match[yes]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-expand-btn\\\" set=<<collapseStateTiddler>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t</$button>\\n\\t<% endif %>\\n\\t<div class={{{ [<collapseStateTiddler>get[text]else<collapsed>match[no]then[tc-master-panel]] :else[[tc-master-panel tc-collapsed]] }}} style.width={{{ [<stateTiddler>get[text]else<size>] }}} style.max-width=<<maxSize>> style.margin-left={{{ [<collapseStateTiddler>get[text]else<collapsed>match[yes]then<stateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddler>get[text]else<collapsed>match[yes]then<size>addprefix[-]] :else[[0]] }}}>\\n\\t\\t<%if [<masterContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<masterContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<masterContent>is[tiddler]] [<masterContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<masterContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<%if [<collapseStateTiddler>get[text]else<collapsed>match[no]] %>\\n\\t\\t<$resizer\\n\\t\\t\\tclass=\\\"tc-panel-splitter-vertical\\\"\\n\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\ttiddler=<<stateTiddler>>\\n\\t\\t\\tmin=<<minSize>>\\n\\t\\t\\tmax=<<maxSize>>\\n\\t\\t\\tdefault=<<size>>\\n\\t\\t\\tunit={{{ [tf.get.value.metric<size>] :else[[px]] }}}\\n\\t\\t/>\\n\\t<% endif %>\\n\\t<div class={{{ [<collapseStateTiddler>get[text]else<collapsed>match[no]then[tc-detail-panel]] :else[[tc-detail-panel tc-expanded]] }}}>\\n\\t\\t<%if [<detailContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<detailContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<detailContent>is[tiddler]] [<detailContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<detailContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\procedure collapsible-three-column-panels(leftContent:\\\"\\\", centerContent:\\\"\\\", rightContent:\\\"\\\", leftWidth:\\\"10%\\\", rightWidth:\\\"10%\\\", minWidth:\\\"5%\\\", maxWidth:\\\"80%\\\", minHeight:\\\"100%\\\", leftStateTiddler:\\\"$:/state/three-col-collapsible/left\\\", rightStateTiddler:\\\"$:/state/three-col-collapsible/right\\\", class:\\\"\\\", collapsedLeft:\\\"no\\\", collapsedRight:\\\"no\\\", collapseStateTiddlerLeft:\\\"$:/state/ctcp/left\\\", collapseStateTiddlerRight:\\\"$:/state/ctcp/right\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-three-column-panels tc-collapsible-three-column-panels [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width=\\\"100%\\\">\\n\\t<%if [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[no]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-left\\\" set=<<collapseStateTiddlerLeft>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-left}}\\n\\t\\t</$button>\\n\\t<%elseif [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-expand-btn tc-panel-btn-left\\\" set=<<collapseStateTiddlerLeft>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t</$button>\\n\\t<% endif %>\\n\\t<%if [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[no]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-right\\\" set=<<collapseStateTiddlerRight>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t</$button>\\n\\t<%elseif [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-expand-btn tc-panel-btn-right\\\" set=<<collapseStateTiddlerRight>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-left}}\\n\\t\\t</$button>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-left\\\" style.width={{{ [<leftStateTiddler>get[text]else<leftWidth>] }}} style.max-height=\\\"100%\\\" style.margin-left={{{ [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]then<leftStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]then<leftWidth>addprefix[-]] :else[[0]] }}}>\\n\\t\\t<%if [<leftContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<leftContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<%if [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[no]] %>\\n\\t\\t<$resizer\\n\\t\\t\\tclass=\\\"tc-panel-splitter-vertical\\\"\\n\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\ttiddler=<<leftStateTiddler>>\\n\\t\\t\\tmin=<<minWidth>>\\n\\t\\t\\tmax=<<tf.get-three-column-panels-left-max-width>>\\n\\t\\t\\tdefault=<<leftWidth>>\\n\\t\\t\\tunit={{{ [tf.get.value.metric<leftWidth>] :else[[px]] }}}\\n\\t\\t/>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-center\\\" style.min-width=<<minWidth>> style.max-height=\\\"100%\\\">\\n\\t\\t<%if [<centerContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<%if [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[no]] %>\\n\\t\\t<$resizer\\n\\t\\t\\tclass=\\\"tc-panel-splitter-vertical\\\"\\n\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\ttiddler=<<rightStateTiddler>>\\n\\t\\t\\tmin=<<minWidth>>\\n\\t\\t\\tmax=<<tf.get-three-column-panels-right-max-width>>\\n\\t\\t\\tdefault=<<rightWidth>>\\n\\t\\t\\tunit={{{ [tf.get.value.metric<rightWidth>] :else[[px]] }}}\\n\\t\\t\\tinvert=\\\"yes\\\"\\n\\t\\t\\telement=\\\"nextSibling\\\"\\n\\t\\t/>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-right\\\" style.width={{{ [<rightStateTiddler>get[text]else<rightWidth>] }}} style.max-height=\\\"100%\\\" style.margin-right={{{ [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]then<rightStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]then<rightWidth>addprefix[-]] :else[[0]] }}}>\\n\\t\\t<%if [<rightContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<rightContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\function tf.get-three-column-panels-top-max-height() [<bottomStateTiddler>get[text]addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]] :else[<bottomHeight>addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]]\\n\\\\function tf.get-three-column-panels-bottom-max-height() [<topStateTiddler>get[text]addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]] :else[<topHeight>addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]]\\n\\n\\\\procedure collapsible-three-row-panels(topContent:\\\"\\\", centerContent:\\\"\\\", bottomContent:\\\"\\\", topHeight:\\\"10vh\\\", bottomHeight:\\\"10vh\\\", minHeight:\\\"5vh\\\", maxHeight:\\\"55vh\\\", width:\\\"100%\\\", overallHeight:\\\"75vh\\\", topStateTiddler:\\\"$:/state/three-col-collapsible-vertical/top\\\", bottomStateTiddler:\\\"$:/state/three-col-collapsible-vertical/bottom\\\", class:\\\"\\\", collapsedTop:\\\"no\\\", collapsedBottom:\\\"no\\\", collapseStateTiddlerTop:\\\"$:/state/ctcpv/top\\\", collapseStateTiddlerBottom:\\\"$:/state/ctcpv/bottom\\\")\\n\\\\whitespace trim\\n<div class={{{ tc-three-row-panels tc-collapsible-three-row-panels [<class>] +[join[ ]] }}} style.min-width=<<width>> style.max-width=<<width>> style.height=<<overallHeight>> style.max-height=<<overallHeight>>>\\n\\t<%if [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[no]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-top\\\" set=<<collapseStateTiddlerTop>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-left}}\\n\\t\\t</$button>\\n\\t<%elseif [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-expand-btn tc-panel-btn-top\\\" set=<<collapseStateTiddlerTop>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t</$button>\\n\\t<% endif %>\\n\\t<%if [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[no]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-bottom\\\" set=<<collapseStateTiddlerBottom>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t</$button>\\n\\t<%elseif [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]] %>\\n\\t\\t<$button class=\\\"tc-btn-invisible tc-panel-expand-btn tc-panel-btn-bottom\\\" set=<<collapseStateTiddlerBottom>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-left}}\\n\\t\\t</$button>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-top\\\" style.min-height=<<minHeight>> style.height={{{ [<topStateTiddler>get[text]else<topHeight>] }}} style.max-width=\\\"100%\\\" style.margin-top={{{ [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]then<topStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]then<topHeight>addprefix[-]] :else[[0]] }}}>\\n\\t\\t<%if [<topContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<topContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<topContent>is[tiddler]] [<topContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<topContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n\\t<%if [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[no]] %>\\n\\t\\t<$resizer\\n\\t\\t\\tclass=\\\"tc-panel-splitter-horizontal\\\"\\n\\t\\t\\tdirection=\\\"vertical\\\"\\n\\t\\t\\ttiddler=<<topStateTiddler>>\\n\\t\\t\\tmin=<<minHeight>>\\n\\t\\t\\tmax=<<tf.get-three-column-panels-top-max-height>>\\n\\t\\t\\tdefault=<<topHeight>>\\n\\t\\t\\tunit={{{ [tf.get.value.metric<topHeight>] :else[[px]] }}}\\n\\t\\t/>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-center-vertical\\\" style.min-height=<<minHeight>> style.max-width=\\\"100%\\\">\\n\\t\\t<div style.height=\\\"100%\\\" style.display=\\\"flex\\\" style.justify-content=\\\"center\\\">\\n\\t\\t\\t<%if [<centerContent>is[variable]] %>\\n\\t\\t\\t\\t<$transclude $variable=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t\\t<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>\\n\\t\\t\\t\\t<$transclude $tiddler=<<centerContent>> $mode=\\\"block\\\"/>\\n\\t\\t\\t<% endif %>\\n\\t\\t</div>\\n\\t</div>\\n\\t<%if [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[no]] %>\\n\\t\\t<$resizer\\n\\t\\t\\tclass=\\\"tc-panel-splitter-horizontal\\\"\\n\\t\\t\\tdirection=\\\"vertical\\\"\\n\\t\\t\\ttiddler=<<bottomStateTiddler>>\\n\\t\\t\\tmin=<<minHeight>>\\n\\t\\t\\tmax=<<tf.get-three-column-panels-bottom-max-height>>\\n\\t\\t\\tdefault=<<bottomHeight>>\\n\\t\\t\\tunit={{{ [tf.get.value.metric<bottomHeight>] :else[[px]] }}}\\n\\t\\t\\tinvert=\\\"yes\\\"\\n\\t\\t\\telement=\\\"nextSibling\\\"\\n\\t\\t/>\\n\\t<% endif %>\\n\\t<div class=\\\"tc-panel-bottom\\\" style.min-height=<<minHeight>> style.height={{{ [<bottomStateTiddler>get[text]else<bottomHeight>] }}} style.max-width=\\\"100%\\\" style.margin-bottom={{{ [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]then<bottomStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]then<bottomHeight>addprefix[-]] :else[[0]] }}}>\\n\\t\\t<%if [<bottomContent>is[variable]] %>\\n\\t\\t\\t<$transclude $variable=<<bottomContent>> $mode=\\\"block\\\"/>\\n\\t\\t<%elseif [<bottomContent>is[tiddler]] [<bottomContent>is[shadow]] %>\\n\\t\\t\\t<$transclude $tiddler=<<bottomContent>> $mode=\\\"block\\\"/>\\n\\t\\t<% endif %>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\function tf.get.table.width() [<stateTiddlerPrefix>addsuffix[parent-size]get[text]addsuffix[px]]\\n\\n\\\\function tf.get.max.column.width()\\n\\t[range<columns>!match<colIndex>!match<nextColIndex>]\\n\\t:reduce[addprefix<stateTiddlerPrefix>get[text]!prefix[Infinity]else<cellWidth>add<accumulator>]\\n\\t:and[subtract[100]]\\n\\t:map[abs<currentTiddler>subtract<tf.get.min.column.width.percentage>addsuffix[%]]\\n\\\\end\\n\\n\\\\function tf.get.min.column.width.percentage() [tf.convert.px.to.percentage<tf.get.table.width>,[50px]addsuffix[%]]\\n\\\\function tf.get.max.column.width.percentage() [<colIndex>!match<columns>then<tf.get.table.width>!is[blank]then<tf.get.max.column.width>]\\n\\n\\\\procedure resizable-table-on-before-resize-start-actions()\\n<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix[parent-size]] }}} text=<<tv-action-parent-size>>/>\\n<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix<colIndex>] }}} width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}/>\\n<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>] }}} width={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}/>\\n\\\\end\\n\\n\\\\procedure resizable-table-on-resize-actions()\\n<$let tv-action-delta-x-converted={{{ [tf.convert.px.to.percentage<tf.get.table.width>,<tv-action-delta-x>] }}}>\\n\\t<$action-setfield\\n\\t\\t$tiddler={{{ [<stateTiddlerPrefix>addsuffix<colIndex>] }}}\\n\\t\\ttext={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[width]] :else[<cellWidth>] +[add<tv-action-delta-x-converted>compare:number:gteq<tf.get.min.column.width.percentage>compare:number:lteq<tf.get.max.column.width.percentage>addsuffix[%]] :else[<stateTiddlerPrefix>addsuffix<colIndex>get[width]else<cellWidth>add<tv-action-delta-x-converted>compare:number:lteq<tf.get.min.column.width.percentage>then<tf.get.min.column.width.percentage>else<tf.get.max.column.width.percentage>] +[!prefix[Infinity]else<cellWidth>] }}}\\n\\t/>\\n\\t<$action-setfield\\n\\t\\t$tiddler={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>] }}}\\n\\t\\ttext={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>get[width]] :else[<cellWidth>] +[subtract<tv-action-delta-x-converted>compare:number:gteq<tf.get.min.column.width.percentage>compare:number:lteq<tf.get.max.column.width.percentage>addsuffix[%]] :else[<stateTiddlerPrefix>addsuffix<nextColIndex>get[width]else<cellWidth>subtract<tv-action-delta-x-converted>compare:number:lteq<tf.get.min.column.width.percentage>then<tf.get.min.column.width.percentage>else<tf.get.max.column.width.percentage>] +[!prefix[Infinity]else<cellWidth>] }}}\\n\\t/>\\n</$let>\\n\\\\end\\n\\n\\\\procedure resizable-table-content-inner(filter)\\n\\\\whitespace trim\\n<%if [<editable>match[yes]] %>\\n\\t<$let state={{{ [[$:/state/edit-cell-]addsuffix<colIndex>addsuffix[-]addsuffix<row>addsuffix[-]addsuffix<qualify>] }}}>\\n\\t\\t<%if [<state>get[text]!match[yes]] [<state>is[missing]] %>\\n\\t\\t\\t<div style.display=\\\"flex\\\">\\n\\t\\t\\t\\t<div style.flex=\\\"1\\\">\\n\\t\\t\\t\\t\\t<$wikify name=\\\"content\\\" text=\\\"\\\"\\\"<$text text={{{ [subfilter<filter>get<field>] }}}/>\\\"\\\"\\\">\\n\\t\\t\\t\\t\\t\\t<<content>>\\n\\t\\t\\t\\t\\t</$wikify>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t<$button class=\\\"tc-btn-invisible\\\" set=<<state>> setTo=\\\"yes\\\" actions=<<resizable-table-content-create-tiddler-actions>>>\\n\\t\\t\\t\\t\\t\\t{{$:/core/images/edit-button}}\\n\\t\\t\\t\\t\\t</$button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t<% else %>\\n\\t\\t\\t<div style.display=\\\"flex\\\">\\n\\t\\t\\t\\t<div style.flex=\\\"1\\\">\\n\\t\\t\\t\\t\\t<$edit-text tag=\\\"input\\\" tiddler={{{ [subfilter<filter>] }}} focus=\\\"yes\\\" class=\\\"tc-width-100\\\"/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t<$button class=\\\"tc-btn-invisible\\\" set=<<state>> setTo=\\\"no\\\">\\n\\t\\t\\t\\t\\t\\t{{$:/core/images/done-button}}\\n\\t\\t\\t\\t\\t</$button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t<% endif %>\\n\\t</$let>\\n<% else %>\\n\\t<$wikify name=\\\"content\\\" text=\\\"\\\"\\\"<$text text={{{ [subfilter<filter>get<field>] }}}/>\\\"\\\"\\\">\\n\\t\\t<<content>>\\n\\t</$wikify>\\n<% endif %>\\n\\\\end\\n\\n\\\\procedure resizable-table-content(filter,tableArea)\\n<%if [<wikitextTable>is[blank]] %>\\n\\t<$transclude $variable=\\\"resizable-table-content-inner\\\" filter=<<filter>>/>\\n<%elseif [<tableArea>match[header]] %>\\n\\t<$let tableHeader={{{ [<wikitextTable>splitregexp[\\\\n]suffix[|h]] }}} tableHeaderCell={{{ [<tableHeader>split[|]butfirst[]butlast[]nth<colIndex>] }}}>\\n\\t\\t<$wikify name=\\\"content\\\" text=<<tableHeaderCell>>>\\n\\t\\t\\t<<content>>\\n\\t\\t</$wikify>\\n\\t</$let>\\n<%elseif [<tableArea>match[rows]] %>\\n\\t<$let tableRow={{{ [<wikitextTable>splitregexp[\\\\n]!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]nth<rowIndex>] }}} tableRowCell={{{ [<tableRow>split[|]butfirst[]butlast[]nth<colIndex>] }}}>\\n\\t\\t<$wikify name=\\\"content\\\" text=<<tableRowCell>>>\\n\\t\\t\\t<<content>>\\n\\t\\t</$wikify>\\n\\t</$let>\\n<%elseif [<tableArea>match[footer]] %>\\n\\t<$let tableFooter={{{ [<wikitextTable>splitregexp[\\\\n]suffix[|f]] }}} tableFooterCell={{{ [<tableFooter>split[|]butfirst[]butlast[]nth<colIndex>] }}}>\\n\\t\\t<$wikify name=\\\"content\\\" text=<<tableFooterCell>>>\\n\\t\\t\\t<<content>>\\n\\t\\t</$wikify>\\n\\t</$let>\\n<% endif %>\\n\\\\end\\n\\n\\n<!-- Replace every cell value except \\\">\\\" or \\\"<\\\" by \\\"1\\\" -->\\n\\\\function fn.row.value-to-1()\\n\\t[all[]]\\n\\t:map[<currentTiddler>!regexp[>|<]then[1]else<currentTiddler>]\\n\\t:map[<currentTiddler>match[<]then<index>match[0]then[1]else<currentTiddler>]\\n\\t:map[<currentTiddler>match[>]then<index>match<columnsMinusOne>then[1]else<currentTiddler>]\\n\\t+[join[ ]]\\n\\\\end\\n\\n\\n<!-- Replace every cell value except \\\"~\\\" by \\\"1\\\" -->\\n\\\\function fn.col.value-to-1()\\n\\t[all[]]\\n\\t:map[<currentTiddler>!match[~]then[1]else<currentTiddler>]\\n\\t:map[<currentTiddler>match[~]then<index>match[0]then[1]else<currentTiddler>]\\n\\t+[join[ ]]\\n\\\\end\\n\\n\\n<!-- Counts the occurrences of \\\"c\\\" in string \\\"s\\\" -->\\n\\\\function fn.nb(c,s)\\n\\t[<s>split<c>count[]subtract[1]]\\n\\\\end\\n\\n\\n<!-- Replaces sequences of \\\"from\\\" characters by \\\"to\\\" characters -->\\n\\\\function fn.expand.cell(from,to)\\n\\t[fn.nb<from>,<cell>!match[0]]\\n\\t:map:flat[range<currentTiddler>]\\n\\t:map[<to>]\\n\\t+[join[]]\\n\\\\end\\n\\n\\n<!-- Returns <<cell>> length -->\\n\\\\function fn.cell.ln() [<cell>split[]count[]]\\n\\n\\n<!-- Computes current <<cell>> weight -->\\n\\\\function fn.compute.row.cell(cell)\\n\\t=[fn.expand.cell[>],[0 ]]\\n\\t=[fn.cell.ln[]]\\n\\t=[fn.expand.cell[<],[ 0]]\\n\\t+[join[]]\\n\\\\end\\n\\n\\n<!-- Computes current <<cell>> weight -->\\n\\\\function fn.compute.col.cell(cell)\\n\\t=[fn.cell.ln[]]\\n\\t=[fn.expand.cell[~],[ 0]]\\n\\t+[join[]]\\n\\\\end\\n\\n\\n<!-- Computes current <<row>> weights -->\\n\\\\function fn.compute.row(row)\\n\\t=[<row>split[|]]\\n\\t:map:flat[fn.compute.row.cell<currentTiddler>]\\n\\t+[join[ ]]\\n\\\\end\\n\\n\\n<!-- Computes current <<col>> weights -->\\n\\\\function fn.compute.col(col)\\n\\t=[<col>split[|]]\\n\\t:map:flat[fn.compute.col.cell<currentTiddler>]\\n\\t+[join[ ]]\\n\\\\end\\n\\n\\n<!-- Sanitizes input (not perfect, but you get the idea... -->\\n\\\\function fn.sanitize()\\n\\t[all[]]\\n\\t:map[<currentTiddler>search-replace:g[||],[|x|]search-replace:g:regexp[\\\\|\\\\s+\\\\|],[|x|]]\\n\\\\end\\n\\n\\n<!-- Replaces actual cell values by \\\"1\\\"s -->\\n\\\\function fn.get.row.ones()\\n\\t[all[]]\\n\\t:map[<currentTiddler>split[|]butfirst[]butlast[]trim[]fn.row.value-to-1[]enlist-input:raw[]join[|]]\\n\\\\end\\n\\n\\n<!-- Replaces actual cell values by \\\"1\\\"s -->\\n\\\\function fn.get.col.ones()\\n\\t[all[]]\\n\\t:map[<currentTiddler>split[|]trim[]butfirst[]butlast[]fn.col.value-to-1[]enlist-input:raw[]join[|]]\\n\\\\end\\n\\n\\n<!-- Collapse cells (\\\">|1\\\" becomes \\\">1\\\" -->\\n\\\\function fn.row.collapse()\\n\\t[all[]]\\n\\t:map[<currentTiddler>search-replace:g[>|],[>]search-replace:g[|<],[<]]\\n\\\\end\\n\\n\\n<!-- Collapse cells (\\\"1|~\\\" becomes \\\"1~\\\" -->\\n\\\\function fn.col.collapse()\\n\\t[all[]]\\n\\t:map[<currentTiddler>search-replace:g[|~],[~]]\\n\\\\end\\n\\n\\n\\\\function tf.exclude.header.caption.classes.footer() [!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]]\\n\\\\function tf.is.header() [suffix[|h]]\\n\\n\\n<!-- Maps a table to its colspans -->\\n\\\\function row.map(table,fn)\\n\\t[<table>splitregexp[\\\\n]function<fn>] :and[nth<rowIndex>]\\n\\t:map[<currentTiddler>fn.sanitize[]]\\n\\t:map[<currentTiddler>fn.get.row.ones[>|<]]\\n\\t:map[<currentTiddler>fn.row.collapse[]]\\n\\t:map[fn.compute.row<currentTiddler>]\\n\\\\end\\n\\n\\n<!-- Maps a table to its rowspans -->\\n\\\\function col.map(table,fn)\\n\\t[<table>splitregexp[\\\\n]function<fn>split[|]butfirst[]butlast[]join[ ]enlist-input:raw[]]\\n\\t:map:flat[<index>remainder<columns>match<previousColIndex>then<currentTiddler>]\\n\\t:and[!match[]join[|]] :and[addprefix[|]addsuffix[|]]\\n\\t:map[<currentTiddler>fn.sanitize[]]\\n\\t:map[<currentTiddler>fn.get.col.ones[]]\\n\\t:map[<currentTiddler>fn.col.collapse[]]\\n\\t:map[fn.compute.col<currentTiddler>]\\n\\\\end\\n\\n\\n\\\\function tf.get.colspan() [row.map<wikitextTable>,[tf.exclude.header.caption.classes.footer]split[ ]!match[]nth<colIndex>]\\n\\\\function tf.get.rowspan() [col.map<wikitextTable>,[tf.exclude.header.caption.classes.footer]split[ ]!match[]nth<rowIndex>]\\n\\n\\n\\\\function tf.row.split.regexp() [<wikitextTable>splitregexp[\\\\n]!is[blank]]\\n\\\\function tf.row.split.regexp.count.columns() [function[tf.row.split.regexp]!suffix[|c]!suffix[|k]nth[1]split[|]butfirst[]butlast[]count[]]\\n\\\\function tf.row.split.regexp.count.rows() [function[tf.row.split.regexp]!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]count[]]\\n\\\\function tf.row.split.regexp.has.header() [function[tf.row.split.regexp]suffix[|h]then[yes]]\\n\\\\function tf.row.split.regexp.has.footer() [function[tf.row.split.regexp]suffix[|f]then[yes]]\\n\\\\function tf.row.split.regexp.get.caption() [function[tf.row.split.regexp]suffix[|c]split[|]butfirst[]butlast[]first[]]\\n\\n\\n\\\\procedure resizable-table(columns:\\\"\\\", rows:\\\"\\\", columnFilter:\\\"\\\", rowFilter:\\\"\\\", footerFilter:\\\"\\\", field:\\\"text\\\", editable:\\\"no\\\", tableHeight:\\\"auto\\\", class:\\\"\\\", headerClass:\\\"\\\", cellClass:\\\"\\\", stateTiddlerPrefix:\\\"$:/state/resizable-table/\\\", caption:\\\"\\\", wikitextTable:\\\"\\\")\\n\\\\whitespace trim\\n<$let\\n\\tcolumns={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.count.columns>] :else[<wikitextTable>is[blank]then<columns>] :else[[0]] }}}\\n\\trows={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.count.rows>] :else[<wikitextTable>is[blank]then<rows>] :else[[0]] }}}\\n\\tcellWidth={{{ [[100]divide<columns>addsuffix[%]] }}}\\n\\tstateTiddlerPrefix={{{ [<stateTiddlerPrefix>addsuffix<columns>addsuffix<qualify>addsuffix[/]addsuffix[col-]] }}}\\n\\thasHeader={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.has.header>] :else[[no]] }}}\\n\\thasFooter={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.has.footer>] :else[[no]] }}}\\n\\tcaption={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.get.caption>] :else[<caption>!is[blank]] :else[[]] }}}\\n\\twikitextClasses={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp>suffix[|k]split[|]butfirst[]butlast[]first[]] }}}\\n\\tcolumnsMinusOne={{{ [<columns>subtract[1]] }}}\\n>\\n\\t<div class={{{ tc-resizable-table-wrapper [<class>] +[join[ ]] }}} style.height=<<tableHeight>> style.width=\\\"100%\\\">\\n\\t\\t<table class={{{ tc-resizable-table evenRow [<wikitextClasses>] +[join[ ]] }}} style.width=\\\"100%\\\">\\n\\t\\t\\t<%if [<caption>!is[blank]] %>\\n\\t\\t\\t\\t<caption>\\n\\t\\t\\t\\t\\t<<caption>>\\n\\t\\t\\t\\t</caption>\\n\\t\\t\\t<% endif %>\\n\\t\\t\\t<%if [<wikitextTable>is[blank]then<columns>!is[blank]then<columnFilter>!is[blank]] [<wikitextTable>!is[blank]then<hasHeader>match[yes]] %>\\n\\t\\t\\t\\t<thead>\\n\\t\\t\\t\\t\\t<tr class={{{ tc-resizable-table-header [<headerClass>] +[join[ ]] }}}>\\n\\t\\t\\t\\t\\t\\t<$list filter=\\\"[range<columns>]\\\" variable=\\\"column\\\" counter=\\\"colIndex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$let nextColIndex={{{ [<colIndex>add[1]] }}} row=\\\"0\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<th style.position=\\\"relative\\\" style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tc-resizable-table-cell\\\" style.width=\\\"100%\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$transclude $variable=\\\"resizable-table-content\\\" filter=<<columnFilter>> tableArea=\\\"header\\\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<%if [<colIndex>!match<columns>] %>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$resizer\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"tc-table-column-resizer\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmin=<<tf.get.min.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmax=<<tf.get.max.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdefault=<<cellWidth>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tunit=\\\"px\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\telement=\\\"parent.parent\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonResize=<<resizable-table-on-resize-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<% endif %>\\n\\t\\t\\t\\t\\t\\t\\t\\t</th>\\n\\t\\t\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</thead>\\n\\t\\t\\t<% endif %>\\n\\t\\t\\t<%if [<wikitextTable>is[blank]then<rows>!is[blank]then<rowFilter>!is[blank]] [<wikitextTable>!is[blank]] %>\\n\\t\\t\\t\\t<tbody>\\n\\t\\t\\t\\t\\t<$list filter=\\\"[range<rows>]\\\" variable=\\\"row\\\" counter=\\\"rowIndex\\\">\\n\\t\\t\\t\\t\\t\\t<tr class={{{ tc-resizable-table-row [<rowIndex>remainder[2]match[1]then[evenRow]else[oddRow]] [<cellClass>] +[join[ ]] }}}>\\n\\t\\t\\t\\t\\t\\t\\t<$list filter=\\\"[range<columns>]\\\" variable=\\\"column\\\" counter=\\\"colIndex\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<$let\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpreviousColIndex={{{ [<colIndex>subtract[1]] }}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnextColIndex={{{ [<colIndex>add[1]] }}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolspan={{{ [<wikitextTable>!is[blank]then<tf.get.colspan>] :else[[1]] }}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trowspan={{{ [<wikitextTable>!is[blank]then<tf.get.rowspan>] :else[[1]] }}}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<%if [<colspan>!match[0]then<rowspan>!match[0]] %>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<td style.position=\\\"relative\\\" style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}} colspan=<<colspan>> rowspan=<<rowspan>>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tc-resizable-table-cell\\\" style.width=\\\"100%\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$transclude $variable=\\\"resizable-table-content\\\" filter=<<rowFilter>> tableArea=\\\"rows\\\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<%if [<colIndex>!match<columns>] %>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$resizer\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"tc-table-column-resizer\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmin=<<tf.get.min.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmax=<<tf.get.max.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdefault=<<cellWidth>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tunit=\\\"px\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\telement=\\\"parent.parent\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonResize=<<resizable-table-on-resize-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<% endif %>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<% endif %>\\n\\t\\t\\t\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t</tbody>\\n\\t\\t\\t<% endif %>\\n\\t\\t\\t<%if [<wikitextTable>is[blank]then<footerFilter>!is[blank]] [<wikitextTable>!is[blank]then<hasFooter>match[yes]] %>\\n\\t\\t\\t\\t<tfoot>\\n\\t\\t\\t\\t\\t<tr class=\\\"evenRow\\\">\\n\\t\\t\\t\\t\\t\\t<$list filter=\\\"[range<columns>]\\\" variable=\\\"column\\\" counter=\\\"colIndex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$let nextColIndex={{{ [<colIndex>add[1]] }}} row={{{ [<rows>add[1]] }}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<td style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"tc-resizable-table-cell\\\" style.width=\\\"100%\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<$transclude $variable=\\\"resizable-table-content\\\" filter=<<footerFilter>> tableArea=\\\"footer\\\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</tfoot>\\n\\t\\t\\t<% endif %>\\n\\t\\t</table>\\n\\t</div>\\n</$let>\\n\\\\end\\n\\n\\\\procedure resizable-table-flexbox(columns:\\\"\\\", rows:\\\"\\\", columnFilter:\\\"\\\", rowFilter:\\\"\\\", editable:\\\"no\\\", tableHeight:\\\"auto\\\", class:\\\"\\\", headerClass:\\\"\\\", cellClass:\\\"\\\", stateTiddlerPrefix:\\\"$:/state/resizable-table-flex/\\\", wikitextTable:\\\"\\\")\\n\\\\whitespace trim\\n<$let cellWidth={{{ [[100]divide<columns>addsuffix[%]] }}} stateTiddlerPrefix={{{ [<stateTiddlerPrefix>addsuffix<columns>addsuffix<qualify>addsuffix[/]addsuffix[col-]] }}}>\\n\\t<div class={{{ tc-resizable-table-flexbox-wrapper [<class>] +[join[ ]] }}} style.height=<<tableHeight>> style.width=\\\"100%\\\" style.display=\\\"flex\\\" style.flex-direction=\\\"column\\\">\\n\\t\\t<%if [<columns>!is[blank]then<columnFilter>!is[blank]] %>\\n\\t\\t\\t<div class={{{ tc-resizable-table-flexbox-header [<headerClass>] +[join[ ]] }}} style.display=\\\"flex\\\">\\n\\t\\t\\t\\t<$list filter=\\\"[range<columns>]\\\" variable=\\\"column\\\" counter=\\\"colIndex\\\">\\n\\t\\t\\t\\t\\t<$let\\n\\t\\t\\t\\t\\t\\tnextColIndex={{{ [<colIndex>add[1]] }}}\\n\\t\\t\\t\\t\\t\\tcolumnZIndex={{{ [<columns>subtract<colIndex>add[1]] }}}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<div style.position=\\\"relative\\\" style.z-index=<<columnZIndex>> style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}} style.padding=\\\"8px\\\" style.font-weight=\\\"bold\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$transclude $variable=\\\"resizable-table-content\\\" filter=<<columnFilter>>/>\\n\\t\\t\\t\\t\\t\\t\\t<%if [<colIndex>!match<columns>] %>\\n\\t\\t\\t\\t\\t\\t\\t\\t<$resizer\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"tc-table-column-resizer-flexbox\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdirection=\\\"horizontal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmin=<<tf.get.min.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmax=<<tf.get.max.column.width.percentage>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdefault=<<cellWidth>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tunit=\\\"px\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telement=\\\"parent\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tonBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tonResize=<<resizable-table-on-resize-actions>>\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t<% endif %>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t</div>\\n\\t\\t<% endif %>\\n\\t\\t<%if [<rows>!is[blank]] %>\\n\\t\\t\\t<div class=\\\"tc-resizable-table-flexbox-body\\\" style.flex=\\\"1\\\" style.overflow=\\\"auto\\\">\\n\\t\\t\\t\\t<$list filter=\\\"[range<rows>]\\\" variable=\\\"row\\\" counter=\\\"rowIndex\\\">\\n\\t\\t\\t\\t\\t<div class={{{ tc-resizable-table-flexbox-row [<cellClass>] +[join[ ]] }}} style.display=\\\"flex\\\">\\n\\t\\t\\t\\t\\t\\t<$list filter=\\\"[range<columns>]\\\" variable=\\\"column\\\" counter=\\\"colIndex\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$let \\n\\t\\t\\t\\t\\t\\t\\t\\tnextColIndex={{{ [<colIndex>add[1]] }}}\\n\\t\\t\\t\\t\\t\\t\\t\\tcolumnZIndex={{{ [<columns>subtract<colIndex>add[1]] }}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div style.position=\\\"relative\\\" style.z-index=<<columnZIndex>> style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}} style.padding=\\\"8px\\\" style.word-wrap=\\\"break-word\\\" style.overflow-wrap=\\\"break-word\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<$transclude $variable=\\\"resizable-table-content\\\" filter=<<rowFilter>>/>\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</$let>\\n\\t\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t</div>\\n\\t\\t<% endif %>\\n\\t</div>\\n</$let>\\n\\\\end\\n\"},\"$:/core/ui/PageTemplate/sidebar\":{\"title\":\"$:/core/ui/PageTemplate/sidebar\",\"tags\":\"$:/tags/PageTemplate\",\"code-body\":\"yes\",\"text\":\"\\\\whitespace trim\\n\\\\define config-title()\\n$:/config/SideBarSegments/Visibility/$(listItem)$\\n\\\\end\\n\\n\\\\procedure on-resize-start-action-fluid-fixed() <$action-setfield $tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\" throttle.refresh=\\\"yes\\\"/>\\n\\n\\\\procedure on-resize-start-action-fixed-fluid()\\n<$list filter=\\\"storyright storywidth tiddlerwidth\\\" variable=\\\"suffix\\\">\\n<$action-setfield $tiddler={{{ [[$:/themes/tiddlywiki/vanilla/metrics/]addsuffix<suffix>] }}} throttle.refresh=\\\"yes\\\"/>\\n</$list>\\n\\\\end\\n\\n\\\\procedure fluid-fixed-dblclick-actions()\\n<$action-deletetiddler $tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\"/>\\n\\\\end\\n\\n\\\\procedure fixed-fluid-dblclick-actions()\\n<$action-deletetiddler $filter=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright $:/themes/tiddlywiki/vanilla/metrics/storywidth $:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\"/>\\n\\\\end\\n\\n<div class=\\\"tc-sidebar-scrollable-wrapper\\\">\\n\\n<%if [{$:/state/sidebar}!match[no]] %>\\n<%if [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fluid-fixed]] %>\\n<$resizer\\n\\tclass=\\\"tc-sidebar-resizer\\\"\\n\\tdirection=\\\"horizontal\\\"\\n\\ttiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\"\\n\\tmin={{$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth}}\\n\\tmax={{{ [[calc(100vw - ]addsuffix{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}addsuffix[)]] }}}\\n\\tdefault=\\\"350px\\\"\\n\\tinvert=\\\"yes\\\"\\n\\tdblClickActions=<<fluid-fixed-dblclick-actions>>\\n\\tonResizeStart=<<on-resize-start-action-fluid-fixed>>\\n/>\\n<%elseif [{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fixed-fluid]] %>\\n<$resizer\\n\\tclass=\\\"tc-sidebar-resizer\\\"\\n\\tdirection=\\\"horizontal\\\"\\n\\tfilter=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright $:/themes/tiddlywiki/vanilla/metrics/storywidth $:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\"\\n\\tmin={{$:/themes/tiddlywiki/vanilla/metrics/storyminwidth}}\\n\\tmax={{{ [[calc(100vw - ]addsuffix{$:/themes/tiddlywiki/vanilla/metrics/sidebarminwidth}addsuffix[ - ]addsuffix{$:/themes/tiddlywiki/vanilla/metrics/storyleft}addsuffix[)]] }}}\\n\\tdefault=\\\"770px\\\"\\n\\tinvert=\\\"no\\\"\\n\\tdblClickActions=<<fixed-fluid-dblclick-actions>>\\n\\tonResizeStart=<<on-resize-start-action-fixed-fluid>>\\n/>\\n<% endif %>\\n<% endif %>\\n\\n<$scrollable fallthrough=\\\"no\\\" class=\\\"tc-sidebar-scrollable\\\">\\n\\n<div class=\\\"tc-sidebar-header\\\">\\n\\n<$reveal state=\\\"$:/state/sidebar\\\" type=\\\"match\\\" text=\\\"yes\\\" default=\\\"yes\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SideBarSegment]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n<$reveal type=\\\"nomatch\\\" state=<<config-title>> text=\\\"hide\\\"  tag=\\\"div\\\">\\n\\n<$transclude tiddler=<<listItem>> mode=\\\"block\\\"/>\\n\\n</$reveal>\\n\\n</$list>\\n\\n</$reveal>\\n\\n</div>\\n\\n</$scrollable>\\n\\n</div>\\n\"},\"$:/plugins/BTC/resizer/modules/widgets/resizer.js\":{\"title\":\"$:/plugins/BTC/resizer/modules/widgets/resizer.js\",\"text\":\"\\\"use strict\\\";var Widget=require(\\\"$:/core/modules/widgets/widget.js\\\").widget,GlobalResizerManager={documentListenersAdded:!1,activeWidgets:[],handlePointerMove:null,handlePointerUp:null,referenceCount:0,addWidget:function(e){-1===this.activeWidgets.indexOf(e)&&(this.activeWidgets.push(e),this.referenceCount++),this.ensureDocumentListeners()},removeWidget:function(e){var t=this.activeWidgets.indexOf(e);t>-1&&(this.activeWidgets.splice(t,1),this.referenceCount--),this.referenceCount<=0&&(this.referenceCount=0,this.activeWidgets=[],this.removeDocumentListeners())},ensureDocumentListeners:function(){if(!this.documentListenersAdded&&\\\"undefined\\\"!=typeof document){var e=this;this.handlePointerMove=function(t){for(var i=0;i<e.activeWidgets.length;i++){var r=e.activeWidgets[i];r.handlePointerMoveGlobal&&r.handlePointerMoveGlobal(t)}},this.handlePointerUp=function(t){for(var i=0;i<e.activeWidgets.length;i++){var r=e.activeWidgets[i];r.handlePointerUpGlobal&&r.handlePointerUpGlobal(t)}},document.addEventListener(\\\"pointermove\\\",this.handlePointerMove,{passive:!1}),document.addEventListener(\\\"pointerup\\\",this.handlePointerUp,{passive:!1}),document.addEventListener(\\\"pointercancel\\\",this.handlePointerUp,{passive:!1}),this.documentListenersAdded=!0}},removeDocumentListeners:function(){this.documentListenersAdded&&\\\"undefined\\\"!=typeof document&&(this.handlePointerMove&&document.removeEventListener(\\\"pointermove\\\",this.handlePointerMove),this.handlePointerUp&&(document.removeEventListener(\\\"pointerup\\\",this.handlePointerUp),document.removeEventListener(\\\"pointercancel\\\",this.handlePointerUp)),this.documentListenersAdded=!1,this.handlePointerMove=null,this.handlePointerUp=null)}},ResizerWidget=function(e,t){this.initialise(e,t)};ResizerWidget.prototype=new Widget,ResizerWidget.prototype.getViewportDimensions=function(){var e,t,i=this.document.defaultView||this.document.parentWindow||{},r=i.visualViewport||null;return r?(e=r.width,t=r.height):(e=i.innerWidth||this.document.documentElement.clientWidth,t=i.innerHeight||this.document.documentElement.clientHeight),{width:e,height:t,get vmin(){return Math.min(this.width,this.height)},get vmax(){return Math.max(this.width,this.height)}}},ResizerWidget.prototype.getComputedFontSize=function(e,t){try{var i=t?this.document.documentElement:e||this.domNodes[0];if(i){var r=this.document.defaultView.getComputedStyle(i).fontSize;return r.endsWith(\\\"px\\\")?parseFloat(r):r.endsWith(\\\"pt\\\")?parseFloat(r)*(96/72):parseFloat(r)||16}}catch(n){}return 16},ResizerWidget.prototype.convertToPixels=function(e,t,i,r){var n=parseFloat(e);if(isNaN(n))return 0;var a=null;switch(\\\"vh\\\"!==t&&\\\"vw\\\"!==t&&\\\"vmin\\\"!==t&&\\\"vmax\\\"!==t||(a=this.getViewportDimensions()),t){case\\\"px\\\":return n;case\\\"%\\\":return n*i/100;case\\\"em\\\":return n*this.getComputedFontSize(r,!1);case\\\"rem\\\":return n*this.getComputedFontSize(r,!0);case\\\"vh\\\":return n*a.height/100;case\\\"vw\\\":return n*a.width/100;case\\\"vmin\\\":return n*a.vmin/100;case\\\"vmax\\\":return n*a.vmax/100;default:return n}},ResizerWidget.prototype.convertFromPixels=function(e,t,i,r){var n=null;switch(\\\"vh\\\"!==t&&\\\"vw\\\"!==t&&\\\"vmin\\\"!==t&&\\\"vmax\\\"!==t||(n=this.getViewportDimensions()),t){case\\\"px\\\":return e;case\\\"%\\\":return i>0?Math.max(100*e/i,0):0;case\\\"em\\\":var a=this.getComputedFontSize(r,!1);return a>0?e/a:0;case\\\"rem\\\":var s=this.getComputedFontSize(r,!0);return s>0?e/s:0;case\\\"vh\\\":return n.height>0?100*e/n.height:0;case\\\"vw\\\":return n.width>0?100*e/n.width:0;case\\\"vmin\\\":return n.vmin>0?100*e/n.vmin:0;case\\\"vmax\\\":return n.vmax>0?100*e/n.vmax:0;default:return e}},ResizerWidget.prototype.getUnit=function(e){if(\\\"string\\\"!=typeof e)return\\\"px\\\";if(e.startsWith(\\\"calc(\\\")&&e.endsWith(\\\")\\\"))return\\\"px\\\";for(var t=[\\\"px\\\",\\\"%\\\",\\\"em\\\",\\\"rem\\\",\\\"vh\\\",\\\"vw\\\",\\\"vmin\\\",\\\"vmax\\\"],i=0;i<t.length;i++)if(e.endsWith(t[i]))return t[i];return\\\"px\\\"},ResizerWidget.prototype.evaluateCalcExpression=function(e,t,i,r){var n=this;if((r=r||0)>10)return console.warn(\\\"calc() expression too deeply nested, limiting depth\\\"),0;for(var a=[],s=\\\"\\\",o=0;o<e.length;){var l=e[o];if(/\\\\s/.test(l))s&&(a.push(s),s=\\\"\\\"),o++;else if(-1===\\\"+-*/()\\\".indexOf(l))if(\\\"calc(\\\"!==e.substr(o,5))s+=l,o++;else{s&&(a.push(s),s=\\\"\\\");for(var u=1,d=o+5;d<e.length&&u>0;)\\\"(\\\"===e[d]?u++:\\\")\\\"===e[d]&&u--,d++;var h=e.substring(o+5,d-1),c=n.evaluateCalcExpression(h,t,i,r+1);a.push(String(c)),o=d}else s&&(a.push(s),s=\\\"\\\"),a.push(l),o++}s&&a.push(s);for(var p=[],g=[],v=0;v<a.length;v++){var m=a[v];if(-1!==\\\"+-*/\\\".indexOf(m)){for(;g.length>0&&\\\"(\\\"!==g[g.length-1]&&f(g[g.length-1])>=f(m);)b(p,g);g.push(m)}else if(\\\"(\\\"===m)g.push(m);else if(\\\")\\\"===m){for(;g.length>0&&\\\"(\\\"!==g[g.length-1];)b(p,g);g.pop()}else p.push(z(m,t))}for(;g.length>0;)b(p,g);return p[0]||0;function f(e){return\\\"+\\\"===e||\\\"-\\\"===e?1:\\\"*\\\"===e||\\\"/\\\"===e?2:0}function b(e,t){var i=t.pop(),r=e.pop(),n=e.pop();if(n!==undefined&&r!==undefined)switch(i){case\\\"+\\\":e.push(n+r);break;case\\\"-\\\":e.push(n-r);break;case\\\"*\\\":e.push(n*r);break;case\\\"/\\\":e.push(0!==r?n/r:0)}else e.push(0)}function z(e,t){if(\\\"handleSize\\\"===e||\\\"handleWidth\\\"===e||\\\"handleHeight\\\"===e)return i||0;var r=parseFloat(e);if(!isNaN(r)&&e===String(r))return r;var a=n.getViewportDimensions(),s=parseFloat(e);return isNaN(s)?0:e.endsWith(\\\"px\\\")?s:e.endsWith(\\\"vw\\\")?s*a.width/100:e.endsWith(\\\"vh\\\")?s*a.height/100:e.endsWith(\\\"vmin\\\")?s*a.vmin/100:e.endsWith(\\\"vmax\\\")?s*a.vmax/100:e.endsWith(\\\"%\\\")?s*t/100:e.endsWith(\\\"rem\\\")?s*n.getComputedFontSize(n.domNodes[0],!0):e.endsWith(\\\"em\\\")?s*n.getComputedFontSize(n.domNodes[0],!1):s||0}},ResizerWidget.prototype.formatValueWithUnit=function(e,t){switch(t=t||this.unit||\\\"px\\\"){case\\\"%\\\":return e.toFixed(2)+\\\"%\\\";case\\\"em\\\":case\\\"rem\\\":return e.toFixed(3)+t;case\\\"vh\\\":case\\\"vw\\\":case\\\"vmin\\\":case\\\"vmax\\\":return e.toFixed(2)+t;case\\\"px\\\":default:return e.toFixed(1)+t}},ResizerWidget.prototype.getTargetElements=function(e){var t=[];if(this.targetSelector)if(\\\"multiple\\\"===this.resizeMode)t=Array.from(this.document.querySelectorAll(this.targetSelector));else{var i=this.document.querySelector(this.targetSelector);i&&(t=[i])}else\\\"parent\\\"===this.targetElement?t=[e.parentElement]:\\\"parent.parent\\\"===this.targetElement?e.parentElement&&e.parentElement.parentElement&&(t=[e.parentElement.parentElement]):\\\"previousSibling\\\"===this.targetElement?e.previousElementSibling&&(t=[e.previousElementSibling]):\\\"nextSibling\\\"===this.targetElement?e.nextElementSibling&&(t=[e.nextElementSibling]):\\\"overlay\\\"===this.handlePosition?t=[e.parentElement]:e.previousElementSibling&&(t=[e.previousElementSibling]);return t},ResizerWidget.prototype.getTiddlerValue=function(e,t){var i,r=this.wiki.getTiddler(e);return(i=r&&this.targetField&&\\\"text\\\"!==this.targetField?r.fields[this.targetField]||t||this.defaultValue||\\\"200px\\\":this.wiki.getTiddlerText(e,t||this.defaultValue||\\\"200px\\\"))&&\\\"\\\"!==i.trim()||(i=t||this.defaultValue||\\\"200px\\\"),i},ResizerWidget.prototype.applyConstraints=function(e,t,i){return null!==t&&t!==undefined&&e<t?t:null!==i&&i!==undefined&&e>i?i:e},ResizerWidget.prototype.evaluateCSSValue=function(e,t,i){if(\\\"string\\\"!=typeof e)return e;(e=e.trim()).endsWith(\\\";\\\")&&(e=e.substring(0,e.length-1).trim());var r=parseFloat(e);if(!isNaN(r)&&e===String(r))return r;if(e.endsWith(\\\"%\\\"))return parseFloat(e)/100*t;if(e.endsWith(\\\"px\\\"))return parseFloat(e);if(e.startsWith(\\\"calc(\\\")&&e.endsWith(\\\")\\\")){var n=e.substring(5,e.length-1).trim();return this.evaluateCalcExpression(n,t,i)}return parseFloat(e)||0},ResizerWidget.prototype.render=function(e,t){if(!e)return console.warn(\\\"ResizerWidget.render: parent is null, will retry on next refresh\\\"),this.parentDomNode=null,this.domNodes=[],void(this.needsRenderRetry=!0);this.needsRenderRetry=!1,this.parentDomNode=e,this.computeAttributes(),this.execute();var i=this.document.createElement(\\\"div\\\");i.className=\\\"tc-resizer \\\"+(this.resizerClass||\\\"\\\")+(\\\"yes\\\"===this.disable?\\\" tc-resizer-disabled\\\":\\\"\\\"),i.setAttribute(\\\"data-direction\\\",this.direction),i.setAttribute(\\\"data-handle-position\\\",this.handlePosition),this.handleStyle&&i.setAttribute(\\\"data-handle-style\\\",this.handleStyle),\\\"yes\\\"===this.disable&&i.setAttribute(\\\"data-disabled\\\",\\\"true\\\"),i.style.touchAction=\\\"none\\\",i.style.msTouchAction=\\\"none\\\",i.style.webkitTouchAction=\\\"none\\\",i.style.webkitUserSelect=\\\"none\\\",i.style.userSelect=\\\"none\\\",i.style.webkitTapHighlightColor=\\\"rgba(0,0,0,0)\\\",\\\"yes\\\"!==this.disable&&(this.addEventHandlers(i),this.addDoubleClickHandler(i));try{if(\\\"before\\\"===this.handlePosition&&this.targetElement&&e[this.targetElement]){var r=e[this.targetElement];r.parentNode.insertBefore(i,r)}else\\\"overlay\\\"===this.handlePosition?(i.style.position=\\\"absolute\\\",e.insertBefore(i,t)):e.insertBefore(i,t)}catch(n){console.error(\\\"Error inserting resizer element:\\\",n),e&&e.insertBefore(i,t)}this.renderChildren(i,null),this.domNodes.push(i)},ResizerWidget.prototype.triggerHaptic=function(e){try{if(\\\"number\\\"==typeof e&&(e=[e]),\\\"yes\\\"===this.hapticDebug&&(console.log(\\\"Attempting haptic feedback:\\\",e),console.log(\\\"Navigator object:\\\",window.navigator),console.log(\\\"Vibrate function:\\\",window.navigator&&window.navigator.vibrate)),window.navigator&&\\\"function\\\"==typeof window.navigator.vibrate){var t=window.navigator.vibrate(e);return\\\"yes\\\"===this.hapticDebug&&console.log(\\\"Vibrate result:\\\",t),!1===t&&console.log(\\\"Haptic feedback blocked - user gesture may be required\\\"),t}return window.navigator&&\\\"function\\\"==typeof window.navigator.webkitVibrate?(\\\"yes\\\"===this.hapticDebug&&console.log(\\\"Using webkit vibrate\\\"),window.navigator.webkitVibrate(e)):window.navigator&&\\\"function\\\"==typeof window.navigator.mozVibrate?(\\\"yes\\\"===this.hapticDebug&&console.log(\\\"Using mozilla vibrate\\\"),window.navigator.mozVibrate(e)):window.navigator&&\\\"function\\\"==typeof window.navigator.msVibrate?(\\\"yes\\\"===this.hapticDebug&&console.log(\\\"Using MS vibrate\\\"),window.navigator.msVibrate(e)):(\\\"yes\\\"===this.hapticDebug&&console.log(\\\"No vibration API available\\\"),!1)}catch(i){return\\\"yes\\\"===this.hapticDebug&&console.error(\\\"Haptic feedback error:\\\",i),!1}},ResizerWidget.prototype.addDoubleClickHandler=function(e){var t=this;t.handleDoubleClickReference=function(i){if(i.preventDefault(),i.stopPropagation(),t.dblClickActions){var r=e.previousElementSibling||e.parentElement,n=0,a=0,s=t.document.defaultView.getComputedStyle(e);if(a=\\\"horizontal\\\"===t.direction?parseFloat(s.width)||0:parseFloat(s.height)||0,r&&r.parentElement){var o=r.parentElement;if(\\\"relative\\\"===t.position)n=\\\"horizontal\\\"===t.direction?o.offsetWidth:o.offsetHeight;else{var l=o.getBoundingClientRect();n=\\\"horizontal\\\"===t.direction?l.width:l.height}}var u=t.defaultValue,d=0;if(t.targetTiddlers&&t.targetTiddlers.length>0){var h=t.targetTiddlers[0];u=(c=t.wiki.getTiddler(h))&&t.targetField&&\\\"text\\\"!==t.targetField?c.fields[t.targetField]||t.defaultValue:t.wiki.getTiddlerText(h,t.defaultValue)}else if(t.targetTiddler){var c;u=(c=t.wiki.getTiddler(t.targetTiddler))&&t.targetField&&\\\"text\\\"!==t.targetField?c.fields[t.targetField]||t.defaultValue:t.wiki.getTiddlerText(t.targetTiddler,t.defaultValue)}return d=t.evaluateCSSValue(u,n,a),t.setVariable(\\\"tv-action-value\\\",u),t.setVariable(\\\"tv-action-value-pixels\\\",d.toString()),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-parent-size\\\",n.toString()),t.setVariable(\\\"tv-action-handle-size\\\",a.toString()),\\\"yes\\\"===t.hapticFeedback&&t.triggerHaptic([10,50,10]),void t.invokeActionString(t.dblClickActions,t)}var p,g;r=e.previousElementSibling||e.parentElement,n=0,a=function(){var i=t.document.defaultView.getComputedStyle(e);return\\\"horizontal\\\"===t.direction?parseFloat(i.width)||0:parseFloat(i.height)||0}();if(r&&r.parentElement){o=r.parentElement;if(\\\"relative\\\"===t.position)n=\\\"horizontal\\\"===t.direction?o.offsetWidth:o.offsetHeight;else{l=o.getBoundingClientRect();n=\\\"horizontal\\\"===t.direction?l.width:l.height}}switch(t.resetTo){case\\\"min\\\":var v=t.minValueRaw||(\\\"%\\\"===t.unit?\\\"10%\\\":\\\"50px\\\");g=t.evaluateCSSValue(v,n,a);var m=t.convertFromPixels(g,t.unit,n,r);p=t.formatValueWithUnit(m);break;case\\\"max\\\":var f=t.maxValueRaw||(\\\"%\\\"===t.unit?\\\"90%\\\":\\\"800px\\\");g=t.evaluateCSSValue(f,n,a);var b=t.convertFromPixels(g,t.unit,n,r);p=t.formatValueWithUnit(b);break;case\\\"custom\\\":var z=t.resetValue||t.defaultValue;g=t.evaluateCSSValue(z,n,a);var V=t.convertFromPixels(g,t.unit,n,r);p=t.formatValueWithUnit(V);break;default:g=t.evaluateCSSValue(t.defaultValue,n,a);var S=t.convertFromPixels(g,t.unit,n,r);p=t.formatValueWithUnit(S)}\\\"yes\\\"===t.smoothReset&&t.getTargetElements(e).forEach(function(e){e.style.transition=t.targetProperty+\\\" 0.3s ease-out\\\",setTimeout(function(){e.style.transition=\\\"\\\"},300)});t.targetTiddlers&&t.targetTiddlers.length>0?$tw.utils.each(t.targetTiddlers,function(e){t.wiki.setText(e,t.targetField||\\\"text\\\",null,p)}):t.targetTiddler&&t.wiki.setText(t.targetTiddler,t.targetField||\\\"text\\\",null,p),\\\"yes\\\"===t.hapticFeedback&&t.triggerHaptic([10,50,10]),t.onReset&&(t.setVariable(\\\"tv-action-value\\\",p),t.setVariable(\\\"tv-action-value-pixels\\\",g.toString()),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-parent-size\\\",n.toString()),t.invokeActionString(t.onReset,t))},e.addEventListener(\\\"dblclick\\\",t.handleDoubleClickReference)},ResizerWidget.prototype.addEventHandlers=function(e){var t=this;t.domNode=e,t.activeResizeOperations={},t.operationTimeouts={},t.parentSizeCache={},t.parentSizeCacheOrder=[],t.maxCacheSize=10;var i=null;if(t.aspectRatio)if(t.aspectRatio.indexOf(\\\":\\\")>-1){var r=t.aspectRatio.split(\\\":\\\");i=parseFloat(r[0])/parseFloat(r[1])}else i=parseFloat(t.aspectRatio);var n=function(e){return parseFloat(e)||0},a=function(){var i=t.document.defaultView.getComputedStyle(e);return\\\"horizontal\\\"===t.direction?parseFloat(i.width)||0:parseFloat(i.height)||0},s=function(e,i){if(!e||!e.parentElement)return 0;var r=e.parentElement;if(i&&r.offsetHeight,\\\"relative\\\"===t.position)return\\\"horizontal\\\"===t.direction?r.offsetWidth:r.offsetHeight;var n=r.getBoundingClientRect();return\\\"horizontal\\\"===t.direction?n.width:n.height},o=function(i){\\\"touch\\\"===i.pointerType?(i.preventDefault(),i.stopPropagation(),i.target&&(i.target.style.touchAction=\\\"none\\\"),\\\"yes\\\"===t.hapticFeedback&&t.triggerHaptic(10)):(i.preventDefault(),i.stopPropagation());var r={pointerId:i.pointerId,isResizing:!0,timestamp:Date.now(),startX:0,startY:0,startValue:0,startValues:null,startUnits:null,targetElements:null,parentSizeAtStart:0,parentKey:null,effectiveMinValue:null,effectiveMaxValue:null,animationFrameId:null,pendingMouseEvent:null,hasPointerCapture:!1,cursor:null};t.activeResizeOperations[i.pointerId]=r,t.operationTimeouts[i.pointerId]&&clearTimeout(t.operationTimeouts[i.pointerId]),t.operationTimeouts[i.pointerId]=setTimeout(function(){t.activeResizeOperations[i.pointerId]&&t.activeResizeOperations[i.pointerId].isResizing&&(console.warn(\\\"Cleaning up stale resize operation for pointer\\\",i.pointerId),t.cleanupResize(i.pointerId)),delete t.operationTimeouts[i.pointerId]},3e4),r.pointerType=i.pointerType||\\\"mouse\\\",r.initialMouseX=i.clientX,r.initialMouseY=i.clientY,r.startX=i.clientX,r.startY=i.clientY;var o=a();r.handleSize=o,r.targetElements=t.getTargetElements(e),r.targetElement=r.targetElements[0];var l=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,u=l.parentElement;if(u){var d=u.className||\\\"default\\\";u.id&&(d=u.id+\\\"-\\\"+d);var h=!1;for(var c in t.activeResizeOperations){var p=t.activeResizeOperations[c];if(p&&p.isResizing&&p.parentKey===d){h=!0;break}}h&&t.parentSizeCache[d]?r.parentSizeAtStart=t.parentSizeCache[d]:(r.parentSizeAtStart=s(l),function(e,i){var r=t.parentSizeCacheOrder.indexOf(e);if(r>-1&&t.parentSizeCacheOrder.splice(r,1),t.parentSizeCacheOrder.push(e),t.parentSizeCache[e]=i,t.parentSizeCacheOrder.length>t.maxCacheSize){var n=t.parentSizeCacheOrder.shift();delete t.parentSizeCache[n]}}(d,r.parentSizeAtStart)),r.parentKey=d}else r.parentSizeAtStart=s(e);r.startValues={},r.startUnits={};var g=null;if(r.targetElement&&(g=function(e){if(!e)return null;var i=e.getBoundingClientRect();if(\\\"yes\\\"===t.visiblePortion){var r=t.document.documentElement.clientWidth||t.document.body.clientWidth,n=t.document.documentElement.clientHeight||t.document.body.clientHeight;if(\\\"horizontal\\\"===t.direction){var a=Math.max(0,i.left),s=Math.min(r,i.right);return a>=s?0:s-a}var o=Math.max(0,i.top),l=Math.min(n,i.bottom);return o>=l?0:l-o}return\\\"horizontal\\\"===t.direction?i.width:i.height}(r.targetElement)),t.targetTiddlers&&t.targetTiddlers.length>0)$tw.utils.each(t.targetTiddlers,function(i,a){if(0===a&&null!==g){r.startValues[i]=g;var l=t.getTiddlerValue(i);r.startUnits[i]=t.getUnit(l)}else{var u=t.getTiddlerValue(i);if(u.startsWith(\\\"calc(\\\")&&u.endsWith(\\\")\\\")){r.startUnits[i]=\\\"px\\\";var d=t.evaluateCSSValue(u,r.parentSizeAtStart,o);r.startValues[i]=d}else{var h=n(u),c=t.getUnit(u);r.startUnits[i]=c;d=t.convertToPixels(h,c,s(e),e);r.startValues[i]=d}}}),r.startValue=r.startValues[t.targetTiddlers[0]]||0;else if(t.targetTiddler)if(null!==g){r.startValue=g;var v=t.getTiddlerValue(t.targetTiddler);v.startsWith(\\\"calc(\\\")&&v.endsWith(\\\")\\\")?t.unit=\\\"px\\\":t.unit=t.getUnit(v)}else{var m=t.getTiddlerValue(t.targetTiddler);if(m.startsWith(\\\"calc(\\\")&&m.endsWith(\\\")\\\"))t.unit=\\\"px\\\",r.startValue=t.evaluateCSSValue(m,r.parentSizeAtStart,o);else{var f=n(m),b=t.getUnit(m);t.unit=b,r.startValue=t.convertToPixels(f,b,s(e),e)}}else r.startValue=null!==g?g:t.evaluateCSSValue(t.defaultValue||\\\"200px\\\",r.parentSizeAtStart,o);if(e.classList.add(\\\"tc-resizer-active\\\"),t.document.body.classList.add(\\\"tc-resizing\\\"),t.document.body.style.touchAction=\\\"none\\\",t.onBeforeResizeStart){var z=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,V=t.convertFromPixels(r.startValue,t.unit,s(z),z);S=\\\"%\\\"===t.unit?V.toFixed(1)+\\\"%\\\":\\\"em\\\"===t.unit||\\\"rem\\\"===t.unit?V.toFixed(2)+t.unit:Math.round(V)+(t.unit||\\\"px\\\"),t.setVariable(\\\"tv-action-value\\\",V.toString()),t.setVariable(\\\"tv-action-value-pixels\\\",r.startValue.toString()),t.setVariable(\\\"tv-action-formatted-value\\\",S),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-property\\\",t.targetProperty),t.setVariable(\\\"tv-action-handle-size\\\",o.toString()),t.setVariable(\\\"tv-action-parent-size\\\",r.parentSizeAtStart.toString()),t.invokeActionString(t.onBeforeResizeStart,t)}if(t.onResizeStart){var S;z=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,V=t.convertFromPixels(r.startValue,t.unit,s(z),z);S=\\\"%\\\"===t.unit?V.toFixed(1)+\\\"%\\\":\\\"em\\\"===t.unit||\\\"rem\\\"===t.unit?V.toFixed(2)+t.unit:Math.round(V)+(t.unit||\\\"px\\\"),t.setVariable(\\\"tv-action-value\\\",V.toString()),t.setVariable(\\\"tv-action-value-pixels\\\",r.startValue.toString()),t.setVariable(\\\"tv-action-formatted-value\\\",S),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-property\\\",t.targetProperty),t.setVariable(\\\"tv-action-handle-size\\\",o.toString()),t.setVariable(\\\"tv-action-parent-size\\\",r.parentSizeAtStart.toString()),t.invokeActionString(t.onResizeStart,t)}if(e.setPointerCapture)try{e.setPointerCapture(i.pointerId),r.hasPointerCapture=!0}catch(w){if(console.warn(\\\"Failed to capture pointer:\\\",w),r.hasPointerCapture=!1,\\\"touch\\\"===i.pointerType){var R=function(e){e.preventDefault();var t=e.changedTouches[0];t&&handlePointerMove({pointerId:i.pointerId,clientX:t.clientX,clientY:t.clientY,preventDefault:function(){}})},x=function(e){e.preventDefault(),t.document.removeEventListener(\\\"touchmove\\\",R,{passive:!1}),t.document.removeEventListener(\\\"touchend\\\",x,{passive:!1}),t.document.removeEventListener(\\\"touchcancel\\\",x,{passive:!1}),handlePointerUp({pointerId:i.pointerId})};r.touchMoveHandler=R,r.touchEndHandler=x,t.document.addEventListener(\\\"touchmove\\\",R,{passive:!1}),t.document.addEventListener(\\\"touchend\\\",x,{passive:!1}),t.document.addEventListener(\\\"touchcancel\\\",x,{passive:!1})}}t.document.body.style.userSelect=\\\"none\\\";var y=t.document.defaultView.getComputedStyle(e).cursor;!y||-1===y.indexOf(\\\"resize\\\")&&\\\"move\\\"!==y&&\\\"grab\\\"!==y?r.cursor=\\\"horizontal\\\"===t.direction?\\\"ew-resize\\\":\\\"ns-resize\\\":r.cursor=y,t.document.body.style.cursor=r.cursor};t.handlePointerMoveGlobal=function(r){if(t&&t.activeResizeOperations){var n=t.activeResizeOperations[r.pointerId];n&&n.isResizing&&(r.preventDefault(),r.clientX<0||r.clientY<0||r.clientX>t.document.documentElement.clientWidth||r.clientY>t.document.documentElement.clientHeight?t.cleanupResize(r.pointerId):(n.pendingMouseEvent=r,n.animationFrameId||(n.animationFrameId=requestAnimationFrame(function(){if(n.animationFrameId=null,n.pendingMouseEvent&&n.isResizing){var r,o=n.pendingMouseEvent.clientX-n.startX,l=n.pendingMouseEvent.clientY-n.startY;if(function(i,r){var n=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,o=s(n),l=a(),u=t.minValueRaw?t.evaluateCSSValue(t.minValueRaw,o,l):null,d=t.maxValueRaw?t.evaluateCSSValue(t.maxValueRaw,o,l):null;null!==u&&(u=Math.max(u,0)),null!==d&&d<0&&(d=.8*r.parentSizeAtStart);var h=i;if(t.targetTiddlers&&t.targetTiddlers.length>0)$tw.utils.each(t.targetTiddlers,function(e){if(r.startValues[e]!==undefined){var t=r.startValues[e]+i,n=Math.max(u||0,0);if(t<n){var a=n-r.startValues[e];h=Math.max(h,a)}if(null!==d&&d>0&&t>d){var s=d-r.startValues[e];h=Math.min(h,s)}}});else if(t.targetTiddler){var c=r.startValue+i,p=Math.max(u||0,0);c<p&&(h=p-r.startValue),null!==d&&d>0&&c>d&&(h=d-r.startValue)}if(t.targetTiddlers&&t.targetTiddlers.length>0)$tw.utils.each(t.targetTiddlers,function(i){if(r.startValues[i]!==undefined&&r.startUnits[i]){var n=r.startValues[i]+h,a=r.startUnits[i],o=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,l=t.convertFromPixels(n,a,s(o),o);if(null!==r.effectiveMinValue){var u=t.convertFromPixels(Math.max(r.effectiveMinValue,0),a,s(o),o);l=Math.max(l,u)}var d=t.formatValueWithUnit(l,a);t.wiki.setText(i,t.targetField||\\\"text\\\",null,d)}});else if(t.targetTiddler){c=r.startValue+h;var g=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,v=t.convertFromPixels(c,t.unit,s(g),g);if(null!==r.effectiveMinValue){var m=t.convertFromPixels(Math.max(r.effectiveMinValue,0),t.unit,s(g),g);v=Math.max(v,m)}var f=t.formatValueWithUnit(v);t.wiki.setText(t.targetTiddler,t.targetField||\\\"text\\\",null,f)}if(t.actions){var b=r.startValue+h;t.targetTiddlers&&t.targetTiddlers.length>0&&r.startValues[t.targetTiddlers[0]]!==undefined&&(b=r.startValues[t.targetTiddlers[0]]+h);var z=t.convertFromPixels(b,t.unit,s(e),e);f=\\\"%\\\"===t.unit?z.toFixed(1)+\\\"%\\\":\\\"em\\\"===t.unit||\\\"rem\\\"===t.unit?z.toFixed(2)+t.unit:Math.round(z)+(t.unit||\\\"px\\\"),t.setVariable(\\\"tv-action-value\\\",z.toString()),t.setVariable(\\\"tv-action-value-pixels\\\",b.toString()),t.setVariable(\\\"tv-action-formatted-value\\\",f),t.setVariable(\\\"tv-action-handle-size\\\",r.handleSize.toString()),t.setVariable(\\\"tv-action-parent-size\\\",r.parentSizeAtStart.toString()),t.invokeActionString(t.actions,t)}}(r=\\\"horizontal\\\"===t.direction?\\\"yes\\\"===t.invertDirection?-o:o:\\\"yes\\\"===t.invertDirection?-l:l,n),t.onResize){var u=n.startValue+r;t.targetTiddlers&&t.targetTiddlers.length>0&&n.startValues[t.targetTiddlers[0]]!==undefined&&(u=n.startValues[t.targetTiddlers[0]]+r);var d,h=t.convertFromPixels(u,t.unit,s(e),e);d=\\\"%\\\"===t.unit?h.toFixed(1)+\\\"%\\\":\\\"em\\\"===t.unit||\\\"rem\\\"===t.unit?h.toFixed(2)+t.unit:Math.round(h)+(t.unit||\\\"px\\\"),t.setVariable(\\\"tv-action-value\\\",h.toString()),t.setVariable(\\\"tv-action-value-pixels\\\",u.toString()),t.setVariable(\\\"tv-action-formatted-value\\\",d),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-property\\\",t.targetProperty),t.setVariable(\\\"tv-action-delta-x\\\",o.toString()),t.setVariable(\\\"tv-action-delta-y\\\",l.toString()),t.setVariable(\\\"tv-action-handle-size\\\",n.handleSize.toString()),t.setVariable(\\\"tv-action-parent-size\\\",n.parentSizeAtStart.toString()),t.invokeActionString(t.onResize,t)}if(\\\"yes\\\"===t.liveResize&&n.targetElements.length>0){var c=n.startValue+r;if(t.targetTiddlers&&t.targetTiddlers.length>0&&n.startValues[t.targetTiddlers[0]]!==undefined&&(c=n.startValues[t.targetTiddlers[0]]+r),\\\"yes\\\"===t.visiblePortion&&n.targetElements[0]){var p=n.targetElements[0].getBoundingClientRect(),g=t.document.documentElement.clientWidth||t.document.body.clientWidth,v=t.document.documentElement.clientHeight||t.document.body.clientHeight;if(\\\"horizontal\\\"===t.direction){if(p.right>g||p.left<0){var m=Math.min(g,p.right)-Math.max(0,p.left);n.startValue;(f=m/p.width)>0&&f<1&&(c=n.startValue+r/f)}}else if(p.bottom>v||p.top<0){var f,b=Math.min(v,p.bottom)-Math.max(0,p.top);n.startValue;(f=b/p.height)>0&&f<1&&(c=n.startValue+r/f)}}var z=n.targetElements&&n.targetElements[0]?n.targetElements[0]:e,V=s(z),S=a(),R=t.minValueRaw?t.evaluateCSSValue(t.minValueRaw,V,S):null,x=t.maxValueRaw?t.evaluateCSSValue(t.maxValueRaw,V,S):null,y=Math.max(R||0,0);c<y&&(c=y),null!==x&&x>0&&c>x&&(c=x);var w=t.convertFromPixels(c,t.unit,s(e),e);$tw.utils.each(n.targetElements,function(e){var r,n;e&&(e.style[t.targetProperty]=w+(t.unit||\\\"px\\\"),!i||\\\"width\\\"!==t.targetProperty&&\\\"height\\\"!==t.targetProperty||(\\\"width\\\"===t.targetProperty?(r=\\\"height\\\",n=w/i):(r=\\\"width\\\",n=w*i),e.style[r]=n+(t.unit||\\\"px\\\")))})}}}))))}},t.cleanupResize=function(i){if(t&&t.activeResizeOperations){var r=t.activeResizeOperations[i];if(r&&r.isResizing){r.isResizing=!1,r.touchMoveHandler&&r.touchEndHandler&&(t.document.removeEventListener(\\\"touchmove\\\",r.touchMoveHandler,{passive:!1}),t.document.removeEventListener(\\\"touchend\\\",r.touchEndHandler,{passive:!1}),t.document.removeEventListener(\\\"touchcancel\\\",r.touchEndHandler,{passive:!1}),r.touchMoveHandler=null,r.touchEndHandler=null);var n=!1,a=null;for(var s in t.activeResizeOperations)t.activeResizeOperations[s].isResizing&&(n=!0,!a&&t.activeResizeOperations[s].cursor&&(a=t.activeResizeOperations[s].cursor));if(n||e.classList.remove(\\\"tc-resizer-active\\\"),r.parentKey){var o=!1;for(var s in t.activeResizeOperations)if(s!==i&&t.activeResizeOperations[s].isResizing&&t.activeResizeOperations[s].parentKey===r.parentKey){o=!0;break}o||delete t.parentSizeCache[r.parentKey]}if(r.animationFrameId&&(cancelAnimationFrame(r.animationFrameId),r.animationFrameId=null),n||t.document.body.classList.remove(\\\"tc-resizing\\\"),r.hasPointerCapture&&t.domNode&&t.domNode.releasePointerCapture)try{t.domNode.releasePointerCapture(i),r.hasPointerCapture=!1}catch(l){}t.operationTimeouts[i]&&(clearTimeout(t.operationTimeouts[i]),delete t.operationTimeouts[i]),delete t.activeResizeOperations[i],n?a&&(t.document.body.style.cursor=a):(t.document.body.style.userSelect=\\\"\\\",t.document.body.style.cursor=\\\"\\\",t.document.body.style.touchAction=\\\"\\\")}}},t.handlePointerUpGlobal=function(i){if(t&&t.activeResizeOperations){var r=t.activeResizeOperations[i.pointerId];if(r&&r.isResizing&&(\\\"touch\\\"===r.pointerType&&\\\"yes\\\"===t.hapticFeedback&&t.triggerHaptic(5),t.cleanupResize(i.pointerId),t.onResizeEnd)){var a=r.startValue,o=r.startValue;if(t.targetTiddlers&&t.targetTiddlers.length>0){var l=t.targetTiddlers[0];p=(c=t.wiki.getTiddler(l))&&t.targetField&&\\\"text\\\"!==t.targetField?c.fields[t.targetField]||t.defaultValue||\\\"200px\\\":t.wiki.getTiddlerText(l,t.defaultValue||\\\"200px\\\"),a=n(p);var u=t.getUnit(p),d=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,h=s(d);o=t.convertToPixels(a,u,h,d)}else if(t.targetTiddler){var c,p;p=(c=t.wiki.getTiddler(t.targetTiddler))&&t.targetField&&\\\"text\\\"!==t.targetField?c.fields[t.targetField]||t.defaultValue||\\\"200px\\\":t.wiki.getTiddlerText(t.targetTiddler,t.defaultValue||\\\"200px\\\"),a=n(p);u=t.getUnit(p),d=r.targetElements&&r.targetElements[0]?r.targetElements[0]:e,h=s(d);o=t.convertToPixels(a,u,h,d)}var g=\\\"%\\\"===t.unit?a.toFixed(1)+\\\"%\\\":Math.round(a)+(t.unit||\\\"px\\\");t.setVariable(\\\"tv-action-value\\\",a.toString()),t.setVariable(\\\"tv-action-value-pixels\\\",o.toString()),t.setVariable(\\\"tv-action-formatted-value\\\",g),t.setVariable(\\\"tv-action-direction\\\",t.direction),t.setVariable(\\\"tv-action-property\\\",t.targetProperty),t.setVariable(\\\"tv-action-handle-size\\\",r.handleSize.toString()),t.setVariable(\\\"tv-action-parent-size\\\",r.parentSizeAtStart.toString()),t.invokeActionString(t.onResizeEnd,t)}}};var l=function(t){e&&(e.style.touchAction=\\\"none\\\"),t.preventDefault()};t.handlePointerDownReference=o,t.handleGotPointerCaptureReference=l,e.addEventListener(\\\"pointerdown\\\",o,{passive:!1}),t.handleTouchStartReference=function(e){if(!t.activeResizeOperations||0===Object.keys(t.activeResizeOperations).length){e.preventDefault();var i=e.changedTouches[0];i&&o({pointerId:i.identifier,pointerType:\\\"touch\\\",clientX:i.clientX,clientY:i.clientY,target:e.target,preventDefault:function(){},stopPropagation:function(){}})}},e.addEventListener(\\\"touchstart\\\",t.handleTouchStartReference,{passive:!1}),GlobalResizerManager.addWidget(t),t.handleLostPointerCaptureReference=function(e){t&&t.handlePointerUpGlobal&&t.handlePointerUpGlobal(e)},e.addEventListener(\\\"lostpointercapture\\\",t.handleLostPointerCaptureReference),e.addEventListener(\\\"gotpointercapture\\\",l)},ResizerWidget.prototype.execute=function(){this.direction=this.getAttribute(\\\"direction\\\",\\\"horizontal\\\"),this.targetTiddler=this.getAttribute(\\\"tiddler\\\"),this.targetFilter=this.getAttribute(\\\"filter\\\"),this.targetTiddlers=this.targetFilter?this.wiki.filterTiddlers(this.targetFilter):[],this.targetField=this.getAttribute(\\\"field\\\",\\\"text\\\"),this.targetSelector=this.getAttribute(\\\"selector\\\"),this.targetElement=this.getAttribute(\\\"element\\\"),this.targetProperty=this.getAttribute(\\\"property\\\",\\\"horizontal\\\"===this.direction?\\\"width\\\":\\\"height\\\"),this.unit=this.getAttribute(\\\"unit\\\",\\\"px\\\"),this.position=this.getAttribute(\\\"position\\\",\\\"absolute\\\"),this.defaultValue=this.getAttribute(\\\"default\\\",\\\"%\\\"===this.unit?\\\"50%\\\":\\\"200px\\\"),this.minValueRaw=this.getAttribute(\\\"min\\\"),this.maxValueRaw=this.getAttribute(\\\"max\\\");var e=\\\"%\\\"===this.unit?\\\"10\\\":\\\"50\\\",t=\\\"%\\\"===this.unit?\\\"90\\\":\\\"800\\\";this.minValue=this.minValueRaw?parseFloat(this.minValueRaw):parseFloat(e),this.maxValue=this.maxValueRaw?parseFloat(this.maxValueRaw):parseFloat(t),this.invertDirection=this.getAttribute(\\\"invert\\\",\\\"no\\\"),this.liveResize=this.getAttribute(\\\"live\\\",\\\"no\\\"),this.resizerClass=this.getAttribute(\\\"class\\\",\\\"\\\"),this.actions=this.getAttribute(\\\"actions\\\"),this.aspectRatio=this.getAttribute(\\\"aspectRatio\\\"),this.resizeMode=this.getAttribute(\\\"mode\\\",\\\"single\\\"),this.handlePosition=this.getAttribute(\\\"handlePosition\\\",\\\"after\\\"),this.onBeforeResizeStart=this.getAttribute(\\\"onBeforeResizeStart\\\"),this.onResizeStart=this.getAttribute(\\\"onResizeStart\\\"),this.onResize=this.getAttribute(\\\"onResize\\\"),this.onResizeEnd=this.getAttribute(\\\"onResizeEnd\\\"),this.disable=this.getAttribute(\\\"disable\\\",\\\"no\\\"),this.resetTo=this.getAttribute(\\\"resetTo\\\",\\\"default\\\"),this.resetValue=this.getAttribute(\\\"resetValue\\\"),this.smoothReset=this.getAttribute(\\\"smoothReset\\\",\\\"yes\\\"),this.onReset=this.getAttribute(\\\"onReset\\\"),this.dblClickActions=this.getAttribute(\\\"dblClickActions\\\"),this.handleStyle=this.getAttribute(\\\"handleStyle\\\",\\\"solid\\\"),this.hapticFeedback=this.getAttribute(\\\"hapticFeedback\\\",\\\"yes\\\"),this.hapticDebug=this.getAttribute(\\\"hapticDebug\\\",\\\"no\\\"),this.visiblePortion=this.getAttribute(\\\"visiblePortion\\\",\\\"no\\\"),this.makeChildWidgets()},ResizerWidget.prototype.performCleanup=function(){if(this.activeResizeOperations){for(var e in this.activeResizeOperations)if(this.activeResizeOperations.hasOwnProperty(e)){var t=this.activeResizeOperations[e];if(t&&(t.animationFrameId&&(cancelAnimationFrame(t.animationFrameId),t.animationFrameId=null),t.pendingMouseEvent=null,t.targetElements&&(t.targetElements=null),t.targetElement=null,t.cursor=null,t.hasPointerCapture&&this.domNode&&this.domNode.releasePointerCapture))try{this.domNode.releasePointerCapture(e)}catch(o){}this.cleanupResize&&this.cleanupResize(e)}this.activeResizeOperations={}}if(this.operationTimeouts){for(var i in this.operationTimeouts)this.operationTimeouts.hasOwnProperty(i)&&clearTimeout(this.operationTimeouts[i]);this.operationTimeouts={}}if(this.domNodes&&this.domNodes[0]){for(var r=this.domNodes[0],n=[{ref:\\\"handlePointerDownReference\\\",event:\\\"pointerdown\\\"},{ref:\\\"handleLostPointerCaptureReference\\\",event:\\\"lostpointercapture\\\"},{ref:\\\"handleGotPointerCaptureReference\\\",event:\\\"gotpointercapture\\\"},{ref:\\\"handleDoubleClickReference\\\",event:\\\"dblclick\\\"},{ref:\\\"handleTouchStartReference\\\",event:\\\"touchstart\\\"}],a=0;a<n.length;a++)this[n[a].ref]&&(r.removeEventListener(n[a].event,this[n[a].ref]),this[n[a].ref]=null);if(r.releasePointerCapture)try{for(var s=0;s<10;s++)r.releasePointerCapture(s)}catch(o){}}void 0!==GlobalResizerManager&&GlobalResizerManager.removeWidget(this),this.handlePointerMoveGlobal=null,this.handlePointerUpGlobal=null,this.handlePointerDownReference=null,this.handleLostPointerCaptureReference=null,this.handleGotPointerCaptureReference=null,this.handleDoubleClickReference=null,this.handleTouchStartReference=null,this.triggerHaptic=null,this.cleanupResize=null,this.parentSizeCache={},this.parentSizeCacheOrder=[],this.domNode=null,this.actions=null,this.onResizeStart=null,this.onResize=null,this.onResizeEnd=null,this.onReset=null,this.direction=null,this.targetTiddler=null,this.targetFilter=null,this.targetTiddlers=null,this.targetField=null,this.targetSelector=null,this.targetElement=null,this.targetProperty=null,this.unit=null,this.position=null,this.defaultValue=null,this.minValueRaw=null,this.maxValueRaw=null,this.minValue=null,this.maxValue=null,this.invertDirection=null,this.liveResize=null,this.resizerClass=null,this.aspectRatio=null,this.resizeMode=null,this.handlePosition=null,this.disable=null,this.resetTo=null,this.resetValue=null,this.smoothReset=null,this.handleStyle=null,this.hapticFeedback=null,this.hapticDebug=null,this.visiblePortion=null},ResizerWidget.prototype.refresh=function(e){if(this.needsRenderRetry&&(this.parentDomNode||this.domNodes&&this.domNodes[0]&&this.domNodes[0].parentNode))return console.log(\\\"ResizerWidget: Retrying render after parent became available\\\"),this.refreshSelf(),!0;var t=this.computeAttributes();if(Object.keys(t).length){for(var i=!0,r=Object.keys(t),n=0;n<r.length;n++)if(\\\"min\\\"!==r[n]&&\\\"max\\\"!==r[n]&&\\\"default\\\"!==r[n]){i=!1;break}if(i){if(t.min!==undefined){this.minValueRaw=this.getAttribute(\\\"min\\\");var a=\\\"%\\\"===this.unit?\\\"10\\\":\\\"50\\\";this.minValue=this.minValueRaw?parseFloat(this.minValueRaw):parseFloat(a)}if(t.max!==undefined){this.maxValueRaw=this.getAttribute(\\\"max\\\");var s=\\\"%\\\"===this.unit?\\\"90\\\":\\\"800\\\";this.maxValue=this.maxValueRaw?parseFloat(this.maxValueRaw):parseFloat(s)}return t[\\\"default\\\"]!==undefined&&(this.defaultValue=this.getAttribute(\\\"default\\\",\\\"%\\\"===this.unit?\\\"50%\\\":\\\"200px\\\")),!1}return this.refreshSelf(),!0}return this.refreshChildren(e)},ResizerWidget.prototype.removeChildDomNodes=function(){this.performCleanup(),Widget.prototype.removeChildDomNodes.call(this)},ResizerWidget.prototype.destroy=function(){this.performCleanup(),Widget.prototype.destroy&&Widget.prototype.destroy.call(this)},exports.resizer=ResizerWidget;\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}