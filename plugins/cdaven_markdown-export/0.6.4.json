{"title":"$:/plugins/cdaven/markdown-export","description":"Markdown export of tiddlers","author":"cdaven","version":"0.6.4","core-version":">=5.3.0","source":"https://github.com/cdaven/tiddlywiki-stuff/tree/main/markdown-export","plugin-type":"plugin","list":"readme details license","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/cdaven/markdown-export/MenuItem\":{\"title\":\"$:/plugins/cdaven/markdown-export/MenuItem\",\"created\":\"20220421104331124\",\"description\":\"Markdown\",\"extension\":\".md\",\"modified\":\"20240502192724034\",\"tags\":\"$:/tags/Exporter\",\"text\":\"<$transclude $variable=\\\"markdown-export\\\" filter=<<exportFilter>> note={{$:/plugins/cdaven/markdown-export/exportNote}} version={{$:/plugins/cdaven/markdown-export!!version}} $output=\\\"text/raw\\\"/>\"},\"$:/plugins/cdaven/markdown-export/ToolbarButton\":{\"title\":\"$:/plugins/cdaven/markdown-export/ToolbarButton\",\"caption\":\"{{$:/plugins/cdaven/markdown-export/icon}} Markdown\",\"created\":\"20240503085745301\",\"description\":\"Convert tiddler to Markdown and copy, edit or download\",\"modified\":\"20240503093746830\",\"tags\":\"$:/tags/ViewToolbar\",\"text\":\"\\\\define markdownCopyButton()\\n<$button class=\\\"tc-btn-invisible\\\">\\n<$wikify name=\\\"markdownSource\\\" text=\\\"\\\"\\\"<$transclude $variable=\\\"markdown-export\\\" filter=`[[$(currentTiddler)$]]` note={{$:/plugins/cdaven/markdown-export/exportNote}} version={{$:/plugins/cdaven/markdown-export!!version}} $output=\\\"text/raw\\\"/>\\\"\\\"\\\">\\n<$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param=<<markdownSource>> />\\n</$wikify>\\n\\n<span class=\\\"tc-btn-text\\\">Copy as Markdown</span>\\n</$button>\\n\\\\end\\n\\n\\\\define markdownEditButton()\\n<$button class=\\\"tc-btn-invisible\\\">\\n<$wikify name=\\\"markdownSource\\\" text=\\\"\\\"\\\"<$transclude $variable=\\\"markdown-export\\\" filter=`[[$(currentTiddler)$]]` note={{$:/plugins/cdaven/markdown-export/exportNote}} version={{$:/plugins/cdaven/markdown-export!!version}} $output=\\\"text/raw\\\"/>\\\"\\\"\\\">\\n<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=`$:/temp/$(currentTiddler)$.md` text=<<markdownSource>> type=\\\"text/markdown\\\" />\\n</$wikify>\\n\\n<span class=\\\"tc-btn-text\\\">Edit as Markdown</span>\\n</$button>\\n\\\\end\\n\\n\\\\define markdownDownloadButton()\\n<$button class=\\\"tc-btn-invisible\\\">\\n<$action-sendmessage\\n   $message=\\\"tm-download-file\\\"\\n   $param=\\\"$:/plugins/cdaven/markdown-export/MenuItem\\\"\\n   exportFilter=`[[$(currentTiddler)$]]`\\n   filename=`$(currentTiddler)$.md` />\\n\\n<span class=\\\"tc-btn-text\\\">Download as Markdown</span>\\n</$button>\\n\\\\end\\n\\n\\\\define markdownMainButton()\\n<span class=\\\"tc-popup-keep\\\"><$button popup=<<qualify \\\"$:/state/popup/cdaven/markdown\\\">> class=<<tv-config-toolbar-class>> tooltip=\\\"Markdown\\\">\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/plugins/cdaven/markdown-export/icon}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">Markdown</span>\\n</$list>\\n</$button></span>\\n<$reveal state=<<qualify \\\"$:/state/popup/cdaven/markdown\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n<div class=\\\"tc-drop-down\\\">\\n<<markdownCopyButton>>\\n<<markdownEditButton>>\\n<<markdownDownloadButton>>\\n</div>\\n</$reveal>\\n\\\\end\\n\\n<<markdownMainButton>>\"},\"$:/plugins/cdaven/markdown-export/core.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/core.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/core.js\\ntype: application/javascript\\nmodule-type: library\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/cdaven/markdown-export/details\":{\"title\":\"$:/plugins/cdaven/markdown-export/details\",\"created\":\"20221113100340267\",\"text\":\"!! Markdown Flavour\\n\\nThere are quite a few different Markdown specifications, and I have settled on [[Pandoc Markdown|https://pandoc.org/MANUAL.html#pandocs-markdown]], for two reasons:\\n\\n# Pandoc Markdown is quite capable, with a lot of extensions. All of these extensions will not work in every Markdown renderer, but most will.\\n# [[Pandoc|https://pandoc.org]] itself is a great way to convert from (Pandoc) Markdown to other document formats, such as Word or PDF.\\n\\n!!! Further conversion with Pandoc\\n\\nYou can convert a Markdown file to Word with this simple Pandoc command:\\n\\n```\\npandoc -o output.docx input.md\\n```\\n\\nSimply change \\\".docx\\\" to \\\".html\\\" or \\\".pdf\\\" to convert to other formats, or use [[the --to switch|https://pandoc.org/MANUAL.html#option--to]].\\n\\nYou can also convert this Pandoc Markdown file to ~CommonMark or ~GitHub-Flavored Markdown like this:\\n\\n```\\npandoc -o common.md --to commonmark input.md\\npandoc -o github.md --to gfm input.md\\n```\\n\\n!! Some caveats\\n\\nSince ~TiddlyWiki is very expressive -- and has a multitude of plugins -- export plugins such as this probably cannot support all possible variations.\\n\\nConverting to Markdown requires a bunch of compromises, and will therefore be \\\"opinionated\\\". This is how //I// want my Markdown to look.\\n\\n!! Encoding\\n\\nThe Markdown file will be encoded with UTF-8 and Linux/Mac newlines (still works on Windows!). This should work on most platforms and with most third party applications.\\n\\n!! System Requirements\\n\\nThe plugin uses relatively modern Javascript (\\\"ES2015\\\") that doesn't work in Internet Explorer. Most modern browsers //should// work.\"},\"$:/plugins/cdaven/markdown-export/exportNote\":{\"title\":\"$:/plugins/cdaven/markdown-export/exportNote\",\"created\":\"20220602113244086\",\"description\":\"A note that will be added as a comment to exported Markdown files\",\"modified\":\"20220602113609303\",\"tags\":\"\",\"text\":\"Exported from TiddlyWiki at <<now>>\"},\"$:/plugins/cdaven/markdown-export/icon\":{\"title\":\"$:/plugins/cdaven/markdown-export/icon\",\"created\":\"20240502135950835\",\"modified\":\"20240503190926146\",\"tags\":\"\",\"text\":\"\\\\parameters (size:\\\"22pt\\\")\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=<<size>> height=<<size>> viewBox=\\\"0 0 208 128\\\"><path d=\\\"M30 98V30h20l20 25 20-25h20v68H90V59L70 84 50 59v39zm125 0l-30-33h20V30h20v35h20z\\\"/></svg>\"},\"$:/plugins/cdaven/markdown-export/license\":{\"title\":\"$:/plugins/cdaven/markdown-export/license\",\"created\":\"20220513163358248\",\"modified\":\"20220513163418690\",\"tags\":\"\",\"text\":\"Copyright 2022-2024 Christian Dav√©n\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/cdaven/markdown-export/markdown-export.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/markdown-export.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/markdown-export.js\\ntype: application/javascript\\nmodule-type: macro\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.exportedForTesting = exports.run = exports.params = exports.name = void 0;\\nconst render_js_1 = require(\\\"./render.js\\\");\\nexports.name = \\\"markdown-export\\\";\\nexports.params = [\\n    {\\n        name: \\\"filter\\\",\\n        default: \\\"\\\"\\n    },\\n    {\\n        name: \\\"note\\\",\\n        default: \\\"\\\"\\n    },\\n    {\\n        name: \\\"version\\\",\\n        default: \\\"\\\"\\n    },\\n];\\n/** Insert note as comment right after front matter */\\nfunction insertNote(markdownTiddler, note) {\\n    return markdownTiddler.replace(/(---\\\\n+)(#)/, `$1<!-- ${note.replace(/\\\\$/g, \\\"$$$$\\\")} -->\\\\n\\\\n$2`);\\n}\\n/** The macro entrypoint */\\nfunction run(filter = \\\"\\\", note = \\\"\\\", version = \\\"\\\") {\\n    console.log(`Running Markdown Export ${version} with filter ${filter}`);\\n    if (!filter) {\\n        console.warn(\\\"No filter specified, exiting\\\");\\n        return \\\"\\\";\\n    }\\n    const twRenderer = new render_js_1.TiddlyWikiRenderer($tw);\\n    const renderer = new render_js_1.MarkdownRenderer(twRenderer);\\n    // Expand macros in note\\n    note = twRenderer.wikifyText(note);\\n    let markdownTiddlers = [];\\n    for (const title of $tw.wiki.filterTiddlers(filter)) {\\n        console.log(`Rendering [[${title}]] to Markdown`);\\n        let markdownTiddler = null;\\n        try {\\n            markdownTiddler = renderer.renderTiddler(title);\\n        }\\n        catch (err) {\\n            console.error(err);\\n        }\\n        if (markdownTiddler) {\\n            if (note) {\\n                markdownTiddler = insertNote(markdownTiddler, note);\\n            }\\n            markdownTiddlers.push(markdownTiddler.trim());\\n        }\\n    }\\n    // LaTeX page break, recognized by Pandoc\\n    const pageBreak = \\\"\\\\n\\\\n\\\\\\\\newpage\\\\n\\\\n\\\";\\n    return markdownTiddlers.join(pageBreak);\\n}\\nexports.run = run;\\n;\\n/** Make stuff available for unit testing */\\nexports.exportedForTesting = {\\n    insertNote\\n};\\n// export {};\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/plugins/cdaven/markdown-export/md-tiddler.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/md-tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/md-tiddler.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output a single tiddler to Markdown, e.g. for use with a template, possibly from the command line.\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.run = exports.params = exports.name = void 0;\\nconst render_js_1 = require(\\\"./render.js\\\");\\nexports.name = \\\"mdtiddler\\\";\\nexports.params = [\\n    {\\n        name: \\\"title\\\",\\n        default: \\\"\\\"\\n    },\\n];\\n/** The macro entrypoint */\\nfunction run(title = \\\"\\\") {\\n    title = title || this.getVariable(\\\"currentTiddler\\\");\\n    if (!title) {\\n        console.warn(\\\"No title specified, exiting\\\");\\n        return \\\"\\\";\\n    }\\n    if (title === \\\"$:/plugins/cdaven/markdown-export/md-tiddler\\\") {\\n        // TODO: This avoids a Javascript error, but there should be a better solution\\n        console.warn(\\\"Shouldn't render itself...?\\\");\\n        return \\\"\\\";\\n    }\\n    const twRenderer = new render_js_1.TiddlyWikiRenderer($tw);\\n    const renderer = new render_js_1.MarkdownRenderer(twRenderer);\\n    return renderer.renderTiddler(title) || \\\"\\\";\\n}\\nexports.run = run;\\n;\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/plugins/cdaven/markdown-export/md-tiddler\":{\"title\":\"$:/plugins/cdaven/markdown-export/md-tiddler\",\"created\":\"20220606063844580\",\"text\":\"<!--\\n\\nThis template is used for saving tiddlers as Markdown\\n\\n--><$text text=<<mdtiddler>>/>\"},\"$:/plugins/cdaven/markdown-export/readme\":{\"title\":\"$:/plugins/cdaven/markdown-export/readme\",\"created\":\"20220513163340267\",\"modified\":\"20240504050636805\",\"text\":\"This is a plugin for ~TiddlyWiki that lets you export tiddlers to Markdown, either in the web browser or on the command line.\\n\\n!! In the browser (or similar graphical user interfaces)\\n\\n!!! Toolbar Markdown button: {{$:/plugins/cdaven/markdown-export/icon}}\\n\\nClick the \\\"Markdown\\\" button on any tiddler and pick between copying the tiddler's contents as Markdown to the clipboard, open a temporary tiddler with the Markdown code, or download the tiddler as a Markdown file.\\n\\nHide or move this button here: [[$:/core/ui/ControlPanel/Toolbars]]\\n\\n!!! Export tiddlers buttons: {{$:/core/images/export-button}}\\n\\nClick the \\\"Export tiddler\\\" button or menu item on the tiddler to export, and select \\\"Markdown\\\". A Markdown file will be generated and downloaded.\\n\\nYou can also use the \\\"Export tiddlers\\\" button from [[$:/AdvancedSearch]] in the \\\"Filter\\\" tab, to export many tiddlers to one big Markdown file.\\n\\n!! On the command line\\n\\nUse the [[TiddlyWiki command installable via npm|https://www.npmjs.com/package/tiddlywiki]] and type something like this:\\n\\n```sh\\ntiddlywiki <folder> --render <tiddler> '[encodeuricomponent[]addsuffix[.md]]' 'text/plain' '$:/plugins/cdaven/markdown-export/md-tiddler'\\n```\\n\\n!! Homepage\\n\\nThis plugin's homepage is at https://cdaven.github.io/tiddlywiki/\\n\\n!! Source Code\\n\\nThe source code is available at https://github.com/cdaven/tiddlywiki-stuff/tree/main/markdown-export -- this is where you can report issues or request features.\"},\"$:/plugins/cdaven/markdown-export/render-helpers.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/render-helpers.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/render-helpers.js\\ntype: application/javascript\\nmodule-type: library\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.formatYAMLString = exports.isDomNode = exports.isTextNode = exports.trimEnd = exports.btoa = exports.Node = void 0;\\n/* Polyfill browser stuff when run from Node.js */\\nexports.Node = globalThis.Node || {\\n    ELEMENT_NODE: 1,\\n    TEXT_NODE: 3,\\n};\\n/* Polyfill browser stuff when run from Node.js */\\nexports.btoa = globalThis.btoa || function (data) {\\n    const ascii = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\\n    let len = data.length - 1, i = -1, b64 = '';\\n    while (i < len) {\\n        const code = data.charCodeAt(++i) << 16 | data.charCodeAt(++i) << 8 | data.charCodeAt(++i);\\n        b64 += ascii[(code >>> 18) & 63] + ascii[(code >>> 12) & 63] + ascii[(code >>> 6) & 63] + ascii[code & 63];\\n    }\\n    const pads = data.length % 3;\\n    if (pads > 0) {\\n        b64 = b64.slice(0, pads - 3);\\n        while (b64.length % 4 !== 0) {\\n            b64 += '=';\\n        }\\n    }\\n    return b64;\\n};\\nfunction trimEnd(s) {\\n    return s.replace(/\\\\s+$/, \\\"\\\");\\n}\\nexports.trimEnd = trimEnd;\\nfunction isTextNode(node) {\\n    if (node.nodeType === exports.Node.TEXT_NODE)\\n        return true;\\n    else if (typeof node.nodeType === \\\"undefined\\\")\\n        return node.hasOwnProperty(\\\"textContent\\\");\\n    else\\n        return false;\\n}\\nexports.isTextNode = isTextNode;\\nfunction isDomNode(node) {\\n    if (node.nodeType === exports.Node.ELEMENT_NODE)\\n        return true;\\n    else if (typeof node.nodeType === \\\"undefined\\\")\\n        return node.hasOwnProperty(\\\"children\\\");\\n    else\\n        return false;\\n}\\nexports.isDomNode = isDomNode;\\n/* Field values are converted to strings by TW, we switch them back to types supported by YAML. */\\nfunction formatYAMLString(fieldValue, enableNumbers = true) {\\n    // TW date format (spaces added for clarity): [UTC] YYYY 0MM 0DD 0hh 0mm 0ss 0XXX\\n    const datePatternTW = /^(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})$/;\\n    if (fieldValue.toISOString) {\\n        fieldValue = \\\"'\\\" + fieldValue.toISOString() + \\\"'\\\";\\n    }\\n    else if (datePatternTW.test(fieldValue)) {\\n        const parsedDate = new Date($tw.utils.parseDate(fieldValue));\\n        fieldValue = \\\"'\\\" + parsedDate.toISOString() + \\\"'\\\";\\n    }\\n    else if (enableNumbers && !isNaN(parseFloat(fieldValue)) && isFinite(fieldValue)) {\\n        fieldValue = fieldValue.toString();\\n    }\\n    else {\\n        // Remove newlines and escape quotes\\n        fieldValue = fieldValue.toString().replace(/[\\\\r\\\\n]+/g, \\\"\\\");\\n        if (fieldValue.includes(\\\"'\\\")) {\\n            fieldValue = '\\\"' + fieldValue.replace('\\\"', '\\\\\\\\\\\"') + '\\\"';\\n        }\\n        else {\\n            fieldValue = \\\"'\\\" + fieldValue.replace(\\\"'\\\", \\\"''\\\") + \\\"'\\\";\\n        }\\n    }\\n    return fieldValue;\\n}\\nexports.formatYAMLString = formatYAMLString;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/cdaven/markdown-export/render-rules.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/render-rules.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/render-rules.js\\ntype: application/javascript\\nmodule-type: library\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.getRules = void 0;\\nconst render_helpers_1 = require(\\\"./render-helpers\\\");\\n/** Get rules for rendering a TiddlyWiki widget tree consisting of HTML-ish elements/nodes */\\nfunction getRules(renderer) {\\n    let rules = {\\n        // The <meta> tag contains the document's title and other attributes\\n        \\\"meta\\\": (node) => {\\n            const fields = node.attributes;\\n            let frontMatter = [];\\n            if (fields.title) {\\n                frontMatter.push(`title: '${fields.title}'`);\\n            }\\n            if (fields.author) {\\n                frontMatter.push(`author: '${fields.author}'`);\\n            }\\n            if (fields.modified) {\\n                frontMatter.push(`date: ${(0, render_helpers_1.formatYAMLString)(fields.modified)}`);\\n            }\\n            if (fields.description) {\\n                frontMatter.push(`abstract: '${fields.description}'`);\\n            }\\n            if (fields.tags && fields.tags.length > 0) {\\n                // Enclose tags with single quotes and escape single quotes inside the tags\\n                const tags = fields.tags.map((t) => (0, render_helpers_1.formatYAMLString)(t, false));\\n                frontMatter.push(`tags: [${tags.join(', ')}]`);\\n            }\\n            for (const field in fields) {\\n                if ([\\\"text\\\", \\\"title\\\", \\\"author\\\", \\\"modified\\\", \\\"description\\\", \\\"tags\\\"].indexOf(field) !== -1)\\n                    // Ignore full text and the fields already taken care of\\n                    continue;\\n                // Clean up field name and value\\n                const fieldName = (0, render_helpers_1.trimEnd)(field.replace(/\\\\s+/g, \\\"-\\\").replace(/[\\\\:]+$/, \\\"\\\"));\\n                let fieldValue = (0, render_helpers_1.formatYAMLString)(fields[field]);\\n                frontMatter.push(`${fieldName}: ${fieldValue}`);\\n            }\\n            return `---\\\\n${frontMatter.join(\\\"\\\\n\\\")}\\\\n---\\\\n\\\\n# ${fields.title}\\\\n\\\\n`;\\n        },\\n        \\\"p\\\": (node, im) => {\\n            var _a;\\n            if (((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.tag) === \\\"li\\\") {\\n                const newlines = renderer.isLastChild(node)\\n                    ? \\\"\\\\n\\\" // End with one newline for the last child\\n                    : \\\"\\\\n\\\\n\\\"; // End with two newlines between paragraphs\\n                if (node.parentNode.children[0] == node) {\\n                    // The first <p> inside a <li> is rendered as inline text\\n                    return `${im.trim()}${newlines}`;\\n                }\\n                else {\\n                    // Subsequent <p> inside a <li> is rendered with indentation\\n                    return `    ${im.trim()}${newlines}`;\\n                }\\n            }\\n            else {\\n                // Add newlines after paragraphs\\n                return `${im.trim()}\\\\n\\\\n`;\\n            }\\n        },\\n        \\\"em\\\": (_, im) => `*${im}*`,\\n        \\\"strong\\\": (_, im) => `**${im}**`,\\n        \\\"u\\\": (_, im) => `<u>${im}</u>`,\\n        \\\"strike\\\": (_, im) => `~~${im}~~`,\\n        // Force line-break\\n        \\\"br\\\": (node) => {\\n            const nextNode = renderer.getNextNode(node);\\n            if (nextNode == null || ((0, render_helpers_1.isTextNode)(nextNode) && nextNode.textContent === \\\"\\\\n\\\")) {\\n                // If the next line is blank, shouldn't end with a \\\\\\n                return \\\"\\\\n\\\";\\n            }\\n            else {\\n                return \\\"\\\\\\\\\\\\n\\\";\\n            }\\n        },\\n        \\\"hr\\\": () => `---\\\\n\\\\n`,\\n        \\\"label\\\": (_, im) => im,\\n        // Pandoc 3.0 supports highlighted text using ==, if you specify --from markdown+mark\\n        \\\"mark\\\": (_, im) => `==${im}==`,\\n        \\\"span\\\": (node, im) => {\\n            const katexStart = '<annotation encoding=\\\"application/x-tex\\\">';\\n            if (node.rawHTML && node.rawHTML.indexOf(katexStart) !== -1) {\\n                let mathEq = node.rawHTML.substring(node.rawHTML.indexOf(katexStart) + katexStart.length);\\n                mathEq = mathEq.substring(0, mathEq.indexOf('</annotation>'));\\n                if (mathEq.startsWith(\\\"\\\\n\\\") && mathEq.endsWith(\\\"\\\\n\\\")) {\\n                    // As a block equation\\n                    return `$$${mathEq}$$\\\\n\\\\n`;\\n                }\\n                else {\\n                    // As an inline equation\\n                    return `$${mathEq}$`;\\n                }\\n            }\\n            else {\\n                return im;\\n            }\\n        },\\n        \\\"sub\\\": (_, im) => `~${im.replace(/ /g, \\\"\\\\\\\\ \\\")}~`,\\n        \\\"sup\\\": (_, im) => `^${im.replace(/ /g, \\\"\\\\\\\\ \\\")}^`,\\n        \\\"h1\\\": (_, im) => `# ${im}\\\\n\\\\n`,\\n        \\\"h2\\\": (_, im) => `## ${im}\\\\n\\\\n`,\\n        \\\"h3\\\": (_, im) => `### ${im}\\\\n\\\\n`,\\n        \\\"h4\\\": (_, im) => `#### ${im}\\\\n\\\\n`,\\n        // Definition lists\\n        \\\"dl\\\": (_, im) => `${im.trim()}\\\\n\\\\n`,\\n        \\\"dt\\\": (_, im) => `${im}\\\\n`,\\n        \\\"dd\\\": (_, im) => ` ~ ${im}\\\\n\\\\n`,\\n        // Code blocks\\n        \\\"pre\\\": (node, im) => {\\n            if (node.children.every(child => (0, render_helpers_1.isDomNode)(child) && child.tag === \\\"code\\\")) {\\n                // <pre> with nested <code> elements, just pass through\\n                return im;\\n            }\\n            else {\\n                // <pre> without nested <code>\\n                return `\\\\`\\\\`\\\\`\\\\n${im.trim()}\\\\n\\\\`\\\\`\\\\`\\\\n\\\\n`;\\n            }\\n        },\\n        \\\"code\\\": (node, im) => {\\n            var _a, _b, _c;\\n            if (((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.tag) === \\\"pre\\\") {\\n                // <code> nested inside <pre>\\n                // The Highlight plugin puts the language in the \\\"class\\\" attribute\\n                let classRx = (_c = (_b = node.attributes) === null || _b === void 0 ? void 0 : _b.class) === null || _c === void 0 ? void 0 : _c.match(/^(.+) hljs$/);\\n                if (classRx) {\\n                    const lang = classRx[1];\\n                    return `\\\\`\\\\`\\\\`${lang}\\\\n${im.trim()}\\\\n\\\\`\\\\`\\\\`\\\\n\\\\n`;\\n                }\\n                else {\\n                    return `\\\\`\\\\`\\\\`\\\\n${im.trim()}\\\\n\\\\`\\\\`\\\\`\\\\n\\\\n`;\\n                }\\n            }\\n            else {\\n                // As inline code\\n                return `\\\\`${im}\\\\``;\\n            }\\n        },\\n        \\\"blockquote\\\": (node, im) => {\\n            var _a;\\n            let indentation = \\\"\\\";\\n            if (((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.tag) === \\\"li\\\") {\\n                indentation = \\\"    \\\";\\n            }\\n            // Insert \\\"> \\\" at the beginning of each line\\n            const prefix = `${indentation}> `;\\n            return `${prefix}${im.trim().replace(/\\\\n/g, `\\\\n${prefix}`)}\\\\n\\\\n`;\\n        },\\n        \\\"cite\\\": (_, im) => {\\n            return `<cite>${im}</cite>`;\\n        },\\n        // Lists\\n        \\\"ul\\\": (node, im) => {\\n            var _a;\\n            if (((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.tag) === \\\"li\\\") {\\n                // Nested list, should not end with double newlines\\n                return `\\\\n${im}`;\\n            }\\n            else {\\n                return `${im.trim()}\\\\n\\\\n`;\\n            }\\n        },\\n        \\\"li\\\": (node, im) => {\\n            let curNode = node.parentNode;\\n            if (curNode == null) {\\n                console.error(\\\"Found <li> without parent\\\");\\n                return null;\\n            }\\n            const listType = curNode.tag === \\\"ul\\\" ? \\\"*\\\" : \\\"1.\\\";\\n            const listTags = [\\\"ul\\\", \\\"ol\\\", \\\"li\\\"];\\n            let depth = -1;\\n            // Traverse up the path to count nesting levels\\n            while (curNode && listTags.indexOf(curNode.tag) !== -1) {\\n                if (curNode.tag !== \\\"li\\\") {\\n                    depth++;\\n                }\\n                curNode = curNode.parentNode;\\n            }\\n            const indent = \\\"    \\\".repeat(depth);\\n            return `${indent}${listType} ${im.trim()}\\\\n`;\\n        },\\n        \\\"input\\\": (node) => {\\n            var _a, _b;\\n            if (((_a = node.attributes) === null || _a === void 0 ? void 0 : _a.type) === \\\"checkbox\\\") {\\n                if ((_b = node.attributes) === null || _b === void 0 ? void 0 : _b.checked) {\\n                    return \\\"[x]\\\";\\n                }\\n                else {\\n                    return \\\"[ ]\\\";\\n                }\\n            }\\n            else {\\n                console.warn(\\\"Unsupported input node type\\\", node);\\n                return null;\\n            }\\n        },\\n        \\\"a\\\": (node, im) => {\\n            var _a;\\n            const href = (_a = node.attributes) === null || _a === void 0 ? void 0 : _a.href;\\n            if (href == null || (href === null || href === void 0 ? void 0 : href.startsWith(\\\"#\\\"))) {\\n                // Render internal links as plain text, since the links probably lose all meaning outside the TiddlyWiki.\\n                return im;\\n            }\\n            else if (im && im != href) {\\n                return `[${im}](${href})`;\\n            }\\n            else {\\n                return `<${href}>`;\\n            }\\n        },\\n        \\\"img\\\": (node) => {\\n            var _a, _b;\\n            let caption = ((_a = node.attributes) === null || _a === void 0 ? void 0 : _a.title) || \\\"\\\";\\n            let src = ((_b = node.attributes) === null || _b === void 0 ? void 0 : _b.src) || \\\"\\\";\\n            const svgPrefix = \\\"data:image/svg+xml,\\\";\\n            if (src.startsWith(svgPrefix)) {\\n                // SVGs should also be Base64-encoded for compatibility\\n                src = svgPrefix.replace(\\\"svg+xml,\\\", \\\"svg+xml;base64,\\\") +\\n                    (0, render_helpers_1.btoa)(decodeURIComponent(src.substring(svgPrefix.length)));\\n            }\\n            return `![${caption}](${src})`;\\n        },\\n        \\\"i\\\": (node, im) => {\\n            var _a;\\n            if ((_a = node.attributes) === null || _a === void 0 ? void 0 : _a.class) {\\n                const classes = node.attributes.class.split(\\\" \\\");\\n                if (im.trim().length === 0 && classes.some(c => c.startsWith(\\\"fa-\\\"))) {\\n                    // Lazily render all FontAwesome icons as a replacement character\\n                    return \\\"ÔøΩ\\\";\\n                }\\n            }\\n            return null;\\n        },\\n        // Tables\\n        \\\"table\\\": (node) => {\\n            let tbody = null;\\n            for (const child of node.children) {\\n                if ((0, render_helpers_1.isDomNode)(child) && child.tag === \\\"tbody\\\") {\\n                    tbody = child;\\n                    break;\\n                }\\n            }\\n            if (tbody == null) {\\n                return null;\\n            }\\n            let thead = null;\\n            for (const child of node.children) {\\n                if ((0, render_helpers_1.isDomNode)(child) && child.tag === \\\"thead\\\") {\\n                    thead = child;\\n                    break;\\n                }\\n            }\\n            const justifyLeft = (s, w) => {\\n                const sLen = (s === null || s === void 0 ? void 0 : s.length) || 0;\\n                return s + ' '.repeat(w - sLen);\\n            };\\n            const justifyRight = (s, w) => {\\n                const sLen = (s === null || s === void 0 ? void 0 : s.length) || 0;\\n                return ' '.repeat(w - sLen) + s;\\n            };\\n            const center = (s, w) => {\\n                const sLen = (s === null || s === void 0 ? void 0 : s.length) || 0;\\n                const spacesLeft = Math.ceil((w - sLen) / 2);\\n                const spacesRight = w - sLen - spacesLeft;\\n                return ' '.repeat(spacesLeft) + s + ' '.repeat(spacesRight);\\n            };\\n            let grid = [];\\n            if (thead != null) {\\n                for (const row of thead.children) {\\n                    if ((0, render_helpers_1.isDomNode)(row) && row.tag === \\\"tr\\\") {\\n                        let cellsInCurrentRow = [];\\n                        for (const cell of row.children) {\\n                            if ((0, render_helpers_1.isDomNode)(cell)) {\\n                                cellsInCurrentRow.push({\\n                                    innerMarkup: renderer.renderNode(cell),\\n                                    header: cell.tag === \\\"th\\\",\\n                                    align: cell.attributes.align,\\n                                });\\n                            }\\n                        }\\n                        grid.push(cellsInCurrentRow);\\n                    }\\n                }\\n            }\\n            for (const row of tbody.children) {\\n                if ((0, render_helpers_1.isDomNode)(row) && row.tag === \\\"tr\\\") {\\n                    let cellsInCurrentRow = [];\\n                    for (const cell of row.children) {\\n                        if ((0, render_helpers_1.isDomNode)(cell)) {\\n                            cellsInCurrentRow.push({\\n                                innerMarkup: renderer.renderNode(cell),\\n                                header: cell.tag === \\\"th\\\",\\n                                align: cell.attributes.align,\\n                            });\\n                        }\\n                    }\\n                    if (cellsInCurrentRow.length > 0) {\\n                        grid.push(cellsInCurrentRow);\\n                    }\\n                }\\n            }\\n            let columnWidths = [];\\n            for (let i = 0; i < grid[0].length; i++) {\\n                // Check max length of each column's inner markup\\n                columnWidths.push(Math.max(...grid.map(row => { var _a; return ((_a = row[i].innerMarkup) === null || _a === void 0 ? void 0 : _a.length) || 0; })));\\n            }\\n            let tableMarkup = [];\\n            let isFirstRow = true;\\n            for (const row of grid) {\\n                let rowMarkup = [];\\n                for (const column in row) {\\n                    const cell = row[column];\\n                    const innerMarkup = cell.innerMarkup;\\n                    const columnWidth = columnWidths[column];\\n                    if (cell.align === \\\"center\\\") {\\n                        rowMarkup.push(center(innerMarkup, columnWidth));\\n                    }\\n                    else if (cell.align === \\\"right\\\") {\\n                        rowMarkup.push(justifyRight(innerMarkup, columnWidth));\\n                    }\\n                    else {\\n                        rowMarkup.push(justifyLeft(innerMarkup, columnWidth));\\n                    }\\n                }\\n                tableMarkup.push(\\\"| \\\" + rowMarkup.join(\\\" | \\\") + \\\" |\\\");\\n                if (isFirstRow) {\\n                    // Markdown requires the first row to be a header row\\n                    let rowMarkup = [];\\n                    for (const column in row) {\\n                        const columnWidth = columnWidths[column];\\n                        rowMarkup.push(\\\"-\\\".repeat(columnWidth));\\n                    }\\n                    tableMarkup.push(\\\"|-\\\" + rowMarkup.join(\\\"-|-\\\") + \\\"-|\\\");\\n                    isFirstRow = false;\\n                }\\n            }\\n            return tableMarkup.join(\\\"\\\\n\\\") + \\\"\\\\n\\\\n\\\";\\n        },\\n        // The <tr> tag is handled by the <table> rule\\n        \\\"tr\\\": () => null,\\n        \\\"td\\\": (_, im) => im,\\n        \\\"th\\\": (_, im) => im,\\n        // Generic block element rule\\n        \\\"block\\\": (node, im) => {\\n            if (im.trim().length > 0) {\\n                return `<${node.tag}>${im.trim()}</${node.tag}>\\\\n`;\\n            }\\n            else {\\n                return null;\\n            }\\n        },\\n        // Wildcard rule, catching all other inline elements\\n        \\\"*\\\": (node, im) => {\\n            if (im.trim().length > 0) {\\n                return `<${node.tag}>${im.trim()}</${node.tag}>`;\\n            }\\n            else {\\n                return null;\\n            }\\n        },\\n    };\\n    // Inherit identical rules\\n    rules[\\\"div\\\"] = rules[\\\"p\\\"];\\n    rules[\\\"ol\\\"] = rules[\\\"ul\\\"];\\n    // Generic block elements\\n    rules[\\\"address\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"article\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"aside\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"details\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"dialog\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"fieldset\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"figcaption\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"figure\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"footer\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"form\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"header\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"hgroup\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"main\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"nav\\\"] = rules[\\\"block\\\"];\\n    rules[\\\"section\\\"] = rules[\\\"block\\\"];\\n    return rules;\\n}\\nexports.getRules = getRules;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/cdaven/markdown-export/render.js\":{\"title\":\"$:/plugins/cdaven/markdown-export/render.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdaven/markdown-export/render.js\\ntype: application/javascript\\nmodule-type: library\\n\\\\*/\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.MarkdownRenderer = exports.TiddlyWikiRenderer = void 0;\\nconst render_helpers_js_1 = require(\\\"./render-helpers.js\\\");\\nconst render_rules_js_1 = require(\\\"./render-rules.js\\\");\\n// type NodeRenderer = (node: TW_Element, innerMarkup: string) => string | null;\\n// type RulesRecord = Record<string, NodeRenderer>;\\n// TODO: Look at/think about https://tiddlywiki.com/static/Creating%2520a%2520custom%2520export%2520format.html\\nclass TiddlyWikiRenderer {\\n    constructor(tw) {\\n        this.tw = tw;\\n        // Imports built-in macros and custom macros in the tiddler, including the $:/tags/Macro/View tag\\n        const macroImport = \\\"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]] [all[shadows+tiddlers]tag[$:/tags/Macro/View]!has[draft.of]]\\\";\\n        this.widgetOptions = {\\n            document: $tw.fakeDocument,\\n            mode: \\\"block\\\",\\n            importVariables: macroImport,\\n            recursionMarker: \\\"yes\\\",\\n            variables: {\\n                currentTiddler: null\\n            }\\n        };\\n    }\\n    /** Let TiddlyWiki parse the tiddler text and build a widget tree */\\n    renderWidgetTree(title) {\\n        this.widgetOptions.variables.currentTiddler = title;\\n        const widgetNode = this.tw.wiki.makeTranscludeWidget(title, this.widgetOptions);\\n        const container = this.tw.fakeDocument.createElement(\\\"div\\\");\\n        widgetNode.render(container, null);\\n        // Get the first-level nodes in the tree\\n        return container.children[0].children;\\n    }\\n    /** \\\"Wikify\\\" a WikiText string */\\n    wikifyText(text) {\\n        return this.tw.wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", text);\\n    }\\n    /** Get tiddler fields */\\n    getFields(title) {\\n        const tiddler = this.tw.wiki.getTiddler(title);\\n        if (tiddler == null) {\\n            console.warn(\\\"Found no such tiddler\\\", title);\\n            return null;\\n        }\\n        // Clone tiddler fields\\n        return Object.assign({}, tiddler.fields);\\n    }\\n}\\nexports.TiddlyWikiRenderer = TiddlyWikiRenderer;\\nclass MarkdownRenderer {\\n    constructor(tw) {\\n        this.tw = tw;\\n        this.rules = (0, render_rules_js_1.getRules)(this);\\n    }\\n    renderTiddler(title) {\\n        if (this.rules == null) {\\n            console.warn(\\\"Cannot render tiddler without rules\\\");\\n            return null;\\n        }\\n        const nodes = this.tw.renderWidgetTree(title);\\n        this.tiddlerFields = this.tw.getFields(title);\\n        if (this.tiddlerFields == null) {\\n            console.warn(`Tiddler [[${title}]] doesn't seem to exist`);\\n            return null;\\n        }\\n        let renderedNodes = \\\"\\\";\\n        for (const node of nodes) {\\n            const nodeMarkup = this.renderNode(node);\\n            if (nodeMarkup != null) {\\n                renderedNodes += nodeMarkup;\\n            }\\n        }\\n        // Prepend meta node last, in case attributes have changed during rendering\\n        const metaNode = {\\n            tag: \\\"meta\\\",\\n            nodeType: render_helpers_js_1.Node.ELEMENT_NODE,\\n            attributes: this.tiddlerFields,\\n            children: []\\n        };\\n        let markup = this.renderNode(metaNode) + renderedNodes;\\n        return markup.replace(/\\\\n\\\\n\\\\n+/g, \\\"\\\\n\\\\n\\\").trim() + \\\"\\\\n\\\";\\n    }\\n    /** Get raw text from node */\\n    getNodeText(node) {\\n        if ((0, render_helpers_js_1.isTextNode)(node)) {\\n            return node.textContent || \\\"\\\";\\n        }\\n        else if ((0, render_helpers_js_1.isDomNode)(node)) {\\n            return node.children.map(child => this.getNodeText(child)).join(\\\" \\\");\\n        }\\n        else {\\n            return null;\\n        }\\n    }\\n    /** Render specified node to Markdown */\\n    renderNode(node) {\\n        if ((0, render_helpers_js_1.isTextNode)(node)) {\\n            return node.textContent || \\\"\\\";\\n        }\\n        else if ((0, render_helpers_js_1.isDomNode)(node)) {\\n            // Render markup from children depth-first\\n            const innerMarkup = node.children.map(child => this.renderNode(child)).join(\\\"\\\");\\n            return this.executeRule(node, innerMarkup);\\n        }\\n        else {\\n            console.error(\\\"Unknown type of node\\\", node);\\n            throw new Error(\\\"Unknown type of node\\\");\\n        }\\n    }\\n    /** Get next sibling of specified node */\\n    getNextNode(node) {\\n        if (node.parentNode == null) {\\n            return null;\\n        }\\n        let isNext = false;\\n        for (const n of node.parentNode.children) {\\n            if (isNext) {\\n                return n;\\n            }\\n            else if (n === node) {\\n                isNext = true;\\n            }\\n        }\\n        return null;\\n    }\\n    isFirstChild(node) {\\n        if (node.parentNode == null) {\\n            // Define all root elements as the first and last children\\n            return true;\\n        }\\n        return node == node.parentNode.children[0];\\n    }\\n    isLastChild(node) {\\n        if (node.parentNode == null) {\\n            // Define all root elements as the first and last children\\n            return true;\\n        }\\n        return node == node.parentNode.children[node.parentNode.children.length - 1];\\n    }\\n    executeRule(node, innerMarkup) {\\n        if (node.tag in this.rules) {\\n            return this.rules[node.tag](node, innerMarkup);\\n        }\\n        else {\\n            // Use wildcard rule when tag doesn't have its own rule\\n            return this.rules[\\\"*\\\"](node, innerMarkup);\\n        }\\n    }\\n}\\nexports.MarkdownRenderer = MarkdownRenderer;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"}}}","name":"markdown-export ÂØºÂá∫Markdown"}