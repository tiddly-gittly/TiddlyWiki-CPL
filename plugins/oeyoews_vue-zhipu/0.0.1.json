{"title":"$:/plugins/oeyoews/vue-zhipu","description":"vue-zhipu","author":"oeyoews","version":"0.0.1","core-version":">=5.3.0","type":"application/json","plugin-type":"plugin","name":"vue-zhipu","meat#disabled":"yes","qrcode":"yes","created":"2024-03-31","dependents":"$:/plugins/oeyoews/neotw-vue3 $:/plugins/oeyoews/tiddlywiki-tailwindcss-plus","list":"readme","text":"{\"tiddlers\":{\"$:/plugins/oeyoews/vue-zhipu/templates/app.vue\":{\"text\":\"<template>\\n  <div class=\\\"p-2 rounded\\\">\\n    <div class=\\\"flex items-center justify-end mb-2\\\">\\n      <el-button @click=\\\"goHome\\\">返回主页</el-button>\\n    </div>\\n    <el-collapse v-model=\\\"activeName\\\" accordion>\\n      <el-collapse-item title=\\\"智谱 API\\\" name=\\\"1\\\">\\n        <input type=\\\"password\\\" v-model=\\\"api_key\\\"\\n          placeholder=\\\"API key，如: 1e9a8196d7e93079828c7f3e3c222db0.1xviOIMegcccW71i\\\" class=\\\"w-full\\\">\\n        <br>\\n        <span class=\\\"text-muted text-small mt-2\\\">\\n          tip: 从这里查看和创建 API key：\\n          <a href=\\\"https://open.bigmodel.cn/usercenter/apikeys\\\" target=\\\"_blank\\\">\\n            https://open.bigmodel.cn/usercenter/apikeys\\n          </a>\\n        </span>\\n      </el-collapse-item>\\n    </el-collapse>\\n\\n    <!-- step-02 post_body -->\\n    <div class=\\\"mb-5 hidden\\\">\\n      <p>\\n        <textarea v-model=\\\"post_body\\\" class=\\\"w-full h-48\\\"></textarea>\\n        <span class=\\\"text-muted text-small\\\">\\n          提示: 参数 \\\"stream\\\" 设为 true，则按流数据返回。设为 false，就是普通的 post 请求，普通读取其返回值就可以。\\n        </span>\\n      </p>\\n    </div>\\n\\n    <!-- step-03 发送请求 -->\\n    <div class=\\\"my-5\\\">\\n      <form @submit.prevent=\\\"btnClicked\\\" class=\\\"flex gap-2\\\">\\n        <el-input type=\\\"text\\\" v-model=\\\"prompt\\\" class=\\\"w-full\\\" ref=\\\"chatRef\\\" placeholder=\\\"输入内容\\\" />\\n        <el-button native-type=\\\"submit\\\" class=\\\"shrink-0\\\">发送</el-button>\\n      </form>\\n      <!-- <div class=\\\"font-bold\\\">智谱 AI: </div> -->\\n      <div v-html=\\\"the_last_message_html\\\"\\n        class=\\\"mt-8 rounded border-dimmed-700 p-2 antialiased prose prose-gray max-w-none prose-img:my-0 prose-a:no-underline prose-h2:mt-4 prose-blockquote:not-italic dark:prose-invert dark:prose-pre:bg-[#282c34] dark:prose-pre:text-white prose-p:mt-0\\\">\\n      </div>\\n      <!-- <div>\\n        <el-button @click=\\\"copyToClipboard\\\" class=\\\"shrink-0\\\">copy</el-button>\\n      </div> -->\\n    </div>\\n  </div>\\n\\n</template>\",\"title\":\"$:/plugins/oeyoews/vue-zhipu/templates/app.vue\",\"hide-body\":\"yes\"},\"$:/plugins/oeyoews/vue-zhipu/plugins/TiddlyWikiVue.js\":{\"text\":\"module.exports = {\\n  install(app, options) {\\n    app.component('TiddlyWikiVue', {\\n      template: `<button> {{ msg }} </button>`,\\n      props: {\\n        msg: String\\n      }\\n    });\\n  }\\n};\\n\",\"title\":\"$:/plugins/oeyoews/vue-zhipu/plugins/TiddlyWikiVue.js\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/oeyoews/vue-zhipu/components/Version.js\":{\"text\":\"module.exports = {\\n  name: 'Version',\\n  props: {\\n    version: {\\n      type: String,\\n      default: '5.3.2'\\n    }\\n  },\\n  template: `<span> {{ version }} </span>`\\n};\\n\",\"title\":\"$:/plugins/oeyoews/vue-zhipu/components/Version.js\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/oeyoews/vue-zhipu/readme\":{\"title\":\"$:/plugins/oeyoews/vue-zhipu/readme\",\"description\":\"vue-zhipu\",\"text\":\"[[在线文档|https://neotw.vercel.app/docs/plugins/vue-zhipu]]\"},\"$:/plugins/oeyoews/vue-zhipu/layout\":{\"title\":\"$:/plugins/oeyoews/vue-zhipu/layout\",\"name\":\"zhipu ai\",\"description\":\"zhipu ai\",\"tags\":\"$:/tags/Layout\",\"text\":\"<div class=\\\"prose max-w-none prose-indigo m-auto sm:w-auto md:w-2/3\\\">\\n<$vue-zhipu />\\n</div>\"},\"$:/plugins/oeyoews/vue-zhipu/app.js\":{\"title\":\"$:/plugins/oeyoews/vue-zhipu/app.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/vue-zhipu/app.js\\ntype: application/javascript\\nmodule-type: library\\n\\n\\\\*/\\n\\nconst { watch, computed, ref } = window.Vue;\\n\\nconst getTemplate = require('$:/plugins/oeyoews/neotw-vue3/getTemplate.js');\\n\\nif (!crypto.subtle) {\\n  alert(`file:// or unsafe http:// is not allowed to use \\\"crypto.subtle\\\" functions,\\\\n\\n        you could run this file by Vite3 within the public dir.\\\\n\\n        file:// 或 不安全的 http:// 无法支持 \\\"crypto.subtle\\\" 方法运行，\\\\n\\n        把这个文件放到 Vite3 项目的 public 目录中可以运行。\\n      `);\\n}\\n\\nconst api = localStorage.getItem('ZHIPU_APIKEY') || '';\\n\\n// TODO: 取消上次的请求\\nconst app = () => {\\n  const component = {\\n    setup() {\\n      const the_last_message = ref('');\\n      const api_key = ref(api);\\n      const prompt = ref('');\\n      const chatRef = ref('');\\n      const isChat = ref(false);\\n\\n      const post_body = computed(() =>\\n        JSON.stringify(\\n          {\\n            model: 'glm-3-turbo', // glm-4 的api 是 glm-3-turbo 的20倍(fee) https://open.bigmodel.cn/pricing\\n            stream: 'true',\\n            // 缓存问题(maybe)\\n            messages: [\\n              {\\n                role: 'user',\\n                content: prompt.value,\\n              },\\n            ],\\n          },\\n          null,\\n          2,\\n        ),\\n      );\\n\\n      watch(api_key, (newVal) => {\\n        localStorage.setItem('ZHIPU_APIKEY', newVal);\\n      });\\n\\n      // 01 - jwtSign 方法：独立方法，可以用来生成JWT签名。（智谱AI 需要的请求头中的 Authorization 字段）\\n      const jwtSign = async function (secret, payload, my_header) {\\n        const header = my_header || { alg: 'HS256', sign_type: 'SIGN' };\\n        const encodedHeader = btoa(JSON.stringify(header));\\n        const encodedPayload = btoa(JSON.stringify(payload));\\n\\n        if (!secret) {\\n          console.log('secret is empty, returned.');\\n          return;\\n        }\\n\\n        // load secret\\n        const key = await crypto.subtle.importKey(\\n          'raw',\\n          new TextEncoder().encode(secret),\\n          { name: 'HMAC', hash: { name: 'SHA-256' } },\\n          false,\\n          ['sign'],\\n        );\\n\\n        // sing\\n        const signature = await crypto.subtle.sign(\\n          'HMAC',\\n          key,\\n          new TextEncoder().encode(encodedHeader + '.' + encodedPayload),\\n        );\\n\\n        // ArrayBuffer to Base64\\n        const encodedSignature = btoa(\\n          String.fromCharCode.apply(null, new Uint8Array(signature)),\\n        );\\n        return encodedHeader + '.' + encodedPayload + '.' + encodedSignature;\\n      };\\n\\n      // 02 - fetchTalk 方法：独立方法，就是fetch，用于读原始返回流数据块。（像 openai、智谱，都支持 stream 流数据）\\n      const fetchTalk = async (post_headers, post_body, callback_on_stream) => {\\n        let res = await fetch(\\n          'https://open.bigmodel.cn/api/paas/v4/chat/completions',\\n          {\\n            method: 'post',\\n            headers: post_headers,\\n            body:\\n              typeof post_body === 'object'\\n                ? JSON.stringify(post_body, null, 2)\\n                : post_body,\\n          },\\n        );\\n\\n        // handle stream data\\n        const reader = res.body.getReader();\\n        let buffer = '';\\n\\n        const fn_handelStream = async (reader) => {\\n          const res_stream = await reader.read();\\n\\n          if (res_stream.done) {\\n            // console.log('Stream closed');\\n            isChat.value = false;\\n            prompt.value = '';\\n            chatRef.value.focus();\\n            return;\\n          } else {\\n            buffer += new TextDecoder('utf-8').decode(res_stream.value);\\n            const lines = buffer.split('\\\\n\\\\n');\\n            buffer = lines.pop();\\n\\n            for (let i in lines) {\\n              const line = lines[i];\\n\\n              // console.log(line);\\n              if (callback_on_stream) {\\n                callback_on_stream(line);\\n              }\\n            }\\n            return fn_handelStream(reader);\\n          }\\n        };\\n        // 可选 -> await fn_handelStream(reader)\\n        fn_handelStream(reader);\\n      };\\n\\n      // 03 - handleStreamChunk 方法：独立方法，用于处理原始流数据块。（一般由页面UI传入，处理最后的UI数据渲染）\\n      const handleStreamChunk = function (chunk) {\\n        // 注意：这里的chunk是原始流数据块格式（`data:  ...\\\\n\\\\n`），你需要根据你的具体业务具体处理。\\n        // console.log(chunk);\\n\\n        if (chunk.endsWith('[DONE]')) return;\\n        let temp_obj = JSON.parse(\\n          chunk.replace(/^data: /, '').replace('\\\\n\\\\n$', ''),\\n        );\\n\\n        const newContent = (temp_obj.choices || [{}])[0]?.delta?.content || '';\\n        the_last_message.value += newContent;\\n      };\\n\\n      // UI-on-click\\n      const btnClicked = async () => {\\n        if (api_key.value === '') {\\n          alert('please set api_key.\\\\n填写api_key');\\n          return;\\n        }\\n\\n        the_last_message.value = '';\\n\\n        // 01 调用jwtSign方法，获取jwt签名\\n        let [id, secret] = api_key.value.split('.');\\n        let st = new Date().valueOf();\\n        let res_auth_token = await jwtSign(secret, {\\n          api_key: id,\\n          timestamp: st,\\n          exp: new Date(st + 1000 * 60 * 60).valueOf(),\\n        });\\n        // console.log('01 res_auth_token: ' + res_auth_token);\\n\\n        // 02 调用 fetchTalk 方法，获取读取api数据\\n        let my_headers = {\\n          Authorization: res_auth_token,\\n          'content-type': 'application/json',\\n        };\\n        let my_body = JSON.parse(post_body.value);\\n        fetchTalk(my_headers, my_body, handleStreamChunk);\\n        isChat.value = true;\\n      };\\n      const the_last_message_html = computed(() =>\\n        $tw.wiki.renderText(\\n          'text/html',\\n          'text/markdown',\\n          the_last_message.value,\\n          {\\n            parseAsInline: true,\\n          },\\n        ),\\n      );\\n\\n      const copyToClipboard = () =>\\n        $tw.utils.copyToClipboard(the_last_message.value);\\n\\n      return {\\n        isChat,\\n        copyToClipboard,\\n        the_last_message,\\n        the_last_message_html,\\n        api_key,\\n        chatRef,\\n        post_body,\\n        prompt,\\n        btnClicked,\\n      };\\n    },\\n    mounted() {\\n      this.chatRef.focus();\\n    },\\n\\n    methods: {\\n      goHome() {\\n        $tw.wiki.setText('$:/layout', 'text', null, '$:/core/ui/PageTemplate');\\n      },\\n    },\\n\\n    template: getTemplate('$:/plugins/oeyoews/vue-zhipu/templates/app.vue'),\\n  };\\n  return component;\\n};\\n\\nmodule.exports = app;\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/oeyoews/vue-zhipu/widget.js\":{\"title\":\"$:/plugins/oeyoews/vue-zhipu/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/oeyoews/vue-zhipu/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nvue-zhipu widget\\n\\n\\\\*/\\nconst { widget: Widget } = require('$:/core/modules/widgets/widget.js');\\n\\nclass ZhipuWidget extends Widget {\\n  constructor(parseTreeNode, options) {\\n    super(parseTreeNode, options);\\n  }\\n\\n  render(parent, nextSibling) {\\n    if (!$tw.browser) return;\\n\\n    this.computeAttributes();\\n    this.execute();\\n\\n    const ssr = this.document.isTiddlyWikiFakeDom;\\n    if (ssr) return;\\n\\n    const vuelib = '$:/plugins/oeyoews/neotw-vue3/vue.global.prod.js';\\n\\n    if (!window.Vue) {\\n      window.Vue = require(vuelib);\\n    }\\n\\n    const { createApp } = window.Vue;\\n    const component = require('./app');\\n    const domNode = this.document.createElement('div');\\n    const TiddlyWikiVue = require('./plugins/TiddlyWikiVue');\\n\\n    const ElementPlus = require('element-plus.min.js');\\n\\n    try {\\n      const app = createApp(component());\\n\\n      app.use(TiddlyWikiVue);\\n      app.use(ElementPlus);\\n\\n      app.config.errorHandler = (err) => {\\n        const text = `[Vue3](${app.version}): ` + err;\\n        console.error(text);\\n        domNode.textContent = text;\\n        domNode.style.color = 'red';\\n      };\\n\\n      // 挂载\\n      app.mount(domNode);\\n\\n      parent.insertBefore(domNode, nextSibling);\\n      this.domNodes.push(domNode);\\n    } catch (e) {\\n      console.error(e.message);\\n    }\\n  }\\n\\n  // TIP: 界面由 vue 接管， 不要在这里刷新\\n  refresh() {\\n    return false;\\n  }\\n}\\n\\n/** @description vue-zhipu widget */\\nexports['vue-zhipu'] = ZhipuWidget;\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}