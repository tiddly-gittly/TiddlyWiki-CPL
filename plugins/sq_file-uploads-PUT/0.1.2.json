{"title":"$:/plugins/sq/file-uploads-PUT","description":"EXPERIMENTAL PUT uploader for uploading binary files to external storage","name":"File Uploads: PUT","author":"Saq Imtiaz","core-version":">=5.1.23","list":"readme settings","parent-plugin":"$:/plugins/commons/file-uploads","version":"0.1.2","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/config/file-uploads/PUT/uploadpath\":{\"title\":\"$:/config/file-uploads/PUT/uploadpath\",\"text\":\"files\\n\"},\"$:/plugins/sq/file-uploads-PUT/readme\":{\"title\":\"$:/plugins/sq/file-uploads-PUT/readme\",\"text\":\"@@color:red;''Highly experimental - no support available. Use at your own risk.''@@ \\n\\nPUT uploader module for the File Uploads plugin. Saves to ~WebDav or other servers accepting PUT requests.\\n\\nCurrently the uploader derives the base URL for the ~WebDav server from the URL of the document. This fits the use case of using a ~WebDav (or other PUT enabled server) used to host a ~TiddlyWiki that can be saved.\\n\\nFor a lightweight and easy solution for hosting a local ~TiddlyWiki using ~WebDav see this [[discussion|https://talk.tiddlywiki.org/t/use-webdav-for-saving-a-single-file-wiki/441]].\"},\"$:/plugins/sq/file-uploads-PUT/settings\":{\"title\":\"$:/plugins/sq/file-uploads-PUT/settings\",\"text\":\"@@color:red;''Highly experimental - no support available''@@ \\n\\n[[Path of Upload directory relative to document|$:/config/file-uploads/PUT/uploadpath]]: \\n<$edit-text tiddler=\\\"$:/config/file-uploads/PUT/uploadpath\\\" field=\\\"text\\\" tag=\\\"input\\\" />\\n\\n''The folder specified must already exist.''\"},\"$:/plugins/sq/file-uploads-PUT/uploader.js\":{\"title\":\"$:/plugins/sq/file-uploads-PUT/uploader.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/sq/file-uploads-PUT/uploader.js\\ntype: application/javascript\\nmodule-type: uploader\\n\\nUploads to PUT enabled savers\\n\\n\\\\*/\\n(function(){\\n\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"PUT\\\";\\n\\nexports.create = function(params) {\\n\\treturn new PUTUploader(params);\\n};\\n\\nfunction PUTUploader(params) {\\n\\tthis.params = params || {};\\n\\tthis.items = [];\\n\\tthis.logger = new $tw.utils.Logger(\\\"PUT-uploader\\\");\\n\\tthis.logger.log(\\\"\\\",params);\\n};\\n\\nPUTUploader.prototype.initialize = function(callback) {\\n\\tthis.logger.log(\\\"uploader initialize\\\");\\n\\tcallback();\\n};\\n\\nPUTUploader.prototype._getCanonicalURI = function(uploadItem) {\\n\\tvar uploadFolder = $tw.wiki.getTiddlerText(\\\"$:/config/file-uploads/PUT/uploadpath\\\",\\\"files\\\").trim().replace(/^\\\\/|\\\\/$/gm,\\\"\\\");\\n\\treturn `${uploadFolder}/${uploadItem.filename}`;\\n};\\n\\n/*\\nArguments:\\nuploadItem: object of type UploadItem representing tiddler to be uploaded\\ncallback accepts two arguments:\\n\\terr: error object if there was an error\\n\\tuploadItemInfo: object corresponding to the tiddler being uploaded with the following properties set:\\n\\t- title\\n\\t- canonical_uri (if available)\\n\\t- uploadComplete (boolean)\\n\\t- getUint8Array()\\n\\t- getBlob()\\n*/\\nPUTUploader.prototype.uploadFile = function(uploadItem,callback) {  \\n\\tvar self = this,\\n\\t\\tuploadInfo = { title: uploadItem.title },\\n\\t\\tdata = uploadItem.isBase64 ? uploadItem.getBlob() : uploadItem.text;\\n\\n\\tvar canonical_uri = this._getCanonicalURI(uploadItem),\\n\\t\\theaders = $tw.wiki.getTiddlerText(\\\"$:/config/file-uploads/PUT/servertype\\\",\\\"PUT\\\").trim().toLowerCase() === \\\"node.js\\\" ? { \\\"X-Requested-With\\\": \\\"TiddlyWiki\\\" } : {};\\n\\t//convert to using $tw.utils.httpRequest https://github.com/Jermolene/TiddlyWiki5/blob/master/core/modules/savers/put.js#L83\\n\\tfetch(canonical_uri,{\\n\\t\\t\\\"method\\\": \\\"PUT\\\",\\n\\t\\t\\\"headers\\\": headers,\\n\\t\\t\\\"body\\\": data\\n\\t}).then(function(response){\\n\\t\\tif(!response.ok) {\\n\\t\\t\\tvar status = response.status,\\n\\t\\t\\t\\tmsg = `Network error: ${response.status}`;\\n \\t\\t\\tif(status === 401) { // authentication required\\n\\t\\t\\t\\tmsg = $tw.language.getString(\\\"Error/PutUnauthorized\\\");\\n\\t\\t\\t} else if(status === 403) { // permission denied\\n\\t\\t\\t\\tmsg = $tw.language.getString(\\\"Error/PutForbidden\\\");\\n\\t\\t\\t} else if(status === 404) {\\n\\t\\t\\t\\tmsg = \\\"404: The upload directory does not exist\\\";\\n\\t\\t\\t}\\t\\t\\t\\n\\t\\t\\tthrow new Error(msg);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuploadInfo.canonical_uri = canonical_uri;\\n\\t\\tself.logger.log(`Saved to ${uploadItem.filename} with canonical_uri ${canonical_uri}`);\\n\\t\\t// Set updateProgress to true if the progress bar should be updated\\n\\t\\t// For some uploaders where the data is just being added to the payload with no uploading taking place we may not want to update the progress bar\\n\\t\\tuploadInfo.updateProgress = true;\\n\\t\\t// Set uploadComplete to true if the uploaded file has been persisted and is available at the canonical_uri\\n\\t\\t// This flag triggers the creation of a canonical_uri tiddler corresponding to the uploaded file\\n\\t\\t// Here we set uploadComplete to false since with Fission the file uploaded will not be persisted until we call publish()\\n\\t\\tuploadInfo.uploadComplete = true;\\n\\t\\tcallback(null,uploadInfo);\\t\\n\\t}).catch(function(err) {\\n\\t\\tself.logger.alert(`Error saving file ${uploadItem.filename}: ${err}`);\\n\\t\\tcallback(err,uploadInfo);\\n\\t});\\n\\n};\\n\\n/*\\nArguments:\\ncallback accepts two arguments:\\n\\tstatus: true if there was no error, otherwise false\\n\\tuploadInfoArray (optional): array of uploadInfo objects corresponding to the tiddlers that have been uploaded\\n\\t\\tthis is needed and should set the canonical_uri for each uploadItem if:\\n\\t\\t- (a) uploadInfo.uploadComplete was not set to true in uploadFile AND \\n\\t\\t- (b) uploadInfo.canonical_uri was not set in uploadFile\\n*/\\nPUTUploader.prototype.deinitialize = function(callback) {\\n\\t// Mock finishing up operations that will complete the upload and persist the files\\n\\tthis.logger.log(\\\"uploader deinitialize\\\");\\n\\tcallback();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"uploader\"}}}"}