{"title":"$:/plugins/wikilabs/keyvalues","name":"Key Values","description":"improve data-tiddler handling","author":"pmario","core-version":">=5.1.14","version":"2.2.1","list":"readme license history","stability":"STABILITY_2_STABLE","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/wikilabs/keyvalues/history\":{\"title\":\"$:/plugins/wikilabs/keyvalues/history\",\"text\":\"\\nV 2.2.1 - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\nV 2.2.0 - 2022-03-27\\n\\n* update to TW v5.2.2\\n* ''Important'': Changed license to Attribution-NonCommercial-ShareAlike -- [[CC-BY-NC-SA|$:/plugins/wikilabs/keyvalues/license]]\\n\\nV 2.1.0 - 2021-02-22\\n\\n* Fix for space ` ` use: `&nbsp;`\\n* Add `<space>` after the colon for ''default separator'' `: `\\n* Add for colon `:` use: `&#58;`\\n* Add new filter flag: useBoth + docs\\n\\nV 2.0.1 - 2020-12-25\\n\\n* update license\\n\\nV 1.0.0 - 2020.12.09\\n\\n* Publish the plugin + docs\\n\\nV 0.1.1 - 2020.01.19\\n\\n* Update license link/text\\n\\nV 0.1.0 - beta 2019.11.13\\n\\n* initial release\\n** name: keyvalues\\n\"},\"$:/plugins/wikilabs/keyvalues/icon\":{\"title\":\"$:/plugins/wikilabs/keyvalues/icon\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 128 128\\\">\\n<path transform=\\\"scale(4.36)\\\" d=\\\"m18.6 0-14.5 7.33-3.93 14.7 10.5 7.33 14.5-7.33 3.93-14.7-10.5-7.33zm-13.3 11.4h2.01v2.83l2.9-2.83h2.34l-3.76 3.67 4.15 4.08h-2.52l-3.11-3.05v3.05h-2.01v-7.75zm11.7 0h2.03l2.07 5.72 2.07-5.72h2.02l-2.89 7.75h-2.4l-2.89-7.75zm-3.14 1.94h1.89v2.01h-1.89v-2.01zm0 3.8h1.89v2.01h-1.89v-2.01z\\\" style=\\\"stroke-width:.229\\\"/>\\n</svg>\"},\"$:/core/modules/filters/keyvalues.js\":{\"title\":\"$:/core/modules/filters/keyvalues.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/keyvalues.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the keys and values of a data tiddler\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.keyvalues = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldList = [],\\n\\t\\tsep = \\\": \\\",\\n\\t\\tp1 = \\\"key\\\",\\n\\t\\tp2 = \\\"value\\\",\\n\\t\\tuseKey = true,\\n\\t\\tuseValue = false,\\n\\t\\tuseBoth = false,\\n\\t\\tv1, v2, flags, pass, match, data,\\n\\t\\tregexp, regexpString;\\n\\n\\t// Process key, value parameters\\n\\tif(operator.suffixes && operator.suffixes[0].length > 0) {\\n\\t\\tfieldList = operator.suffixes[0];\\n\\t\\tp1 = fieldList[0] || \\\"\\\";\\n\\t\\tp2 = fieldList[1] || \\\"\\\";\\n\\t}\\n\\t// Process <separator>\\n\\tif(operator.suffixes && operator.suffixes[1]) {\\n\\t\\tsep = operator.suffixes[1][0] || sep;\\n\\t\\tsep = sep.replace(/&nbsp;/g,\\\" \\\").replace(/&#58;/g, \\\":\\\");\\n\\t}\\n\\t// Process usekey or usevalue flags\\n\\tif(operator.suffixes && operator.suffixes[2] && operator.suffixes[2][0]) {\\n\\t\\tuseKey = (operator.suffixes[2][0].toLowerCase() === \\\"usekey\\\");\\n\\t\\tuseValue = (operator.suffixes[2][0].toLowerCase() === \\\"usevalue\\\");\\n\\t\\tuseBoth = (operator.suffixes[2][0].toLowerCase() === \\\"useboth\\\");\\n\\t}\\n\\t// Process regexp operand if available\\n\\tregexpString = operator.operand;\\n\\tif (regexpString) {\\n\\t\\tmatch = /^\\\\(\\\\?([gim]+)\\\\)/.exec(regexpString);\\n\\t\\tif(match) {\\n\\t\\t\\tflags = match[1];\\n\\t\\t\\tregexpString = regexpString.substr(match[0].length);\\n\\t\\t} else {\\n\\t\\t\\tmatch = /\\\\(\\\\?([gim]+)\\\\)$/.exec(regexpString);\\n\\t\\t\\tif(match) {\\n\\t\\t\\t\\tflags = match[1];\\n\\t\\t\\t\\tregexpString = regexpString.substr(0,regexpString.length - match[0].length);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tregexp = new RegExp(regexpString,flags);\\n\\t\\t} catch(e) {\\n\\t\\t\\treturn [\\\"\\\" + e];\\n\\t\\t}\\n\\t}\\n\\t// Process incoming values\\n\\tsource(function(tiddler,title) {\\n\\t\\tdata = options.wiki.getTiddlerDataCached(title);\\n\\t\\tif(data) {\\n\\t\\t\\t// remove separator if there is no v2 element\\n\\t\\t\\tsep = (p2) ? sep : \\\"\\\";\\n\\t\\t\\tfor (var [key, value] of Object.entries(data)) {\\n\\t\\t\\t\\tv1 = (p1 === \\\"key\\\") ? key : (p1 === \\\"value\\\") ? value : \\\"\\\";\\n\\t\\t\\t\\tv2 = (p2 === \\\"key\\\") ? key : (p2 === \\\"value\\\") ? value : \\\"\\\";\\n\\n\\t\\t\\t\\tif (regexpString) {\\n\\t\\t\\t\\t\\tpass = (useKey) ? regexp.exec(key) : (useValue) ? regexp.exec(value) : (useBoth) ? regexp.exec(v1+sep+v2) : \\\"\\\";\\n\\t\\t\\t\\t\\tif (pass) {\\n\\t\\t\\t\\t\\t\\tresults.push(v1+sep+v2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresults.push(v1+sep+v2);\\n\\t\\t\\t\\t} // if regexpstring\\n\\t\\t\\t} // for\\n\\t\\t} // if data\\n\\t});\\n\\treturn results;\\n};\\n\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/plugins/wikilabs/keyvalues/license\":{\"title\":\"$:/plugins/wikilabs/keyvalues/license\",\"license-text\":\"https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode\",\"text\":\"[[Key/Values-Plugin|https://wikilabs.github.io/#keyvalues]] (C) Mario Pietsch - 2019<<now YYYY>>\\n\\n[[Creative Commons Attribution-NonCommercial-ShareAlike|https://creativecommons.org/licenses/by-nc-sa/4.0/]]\\n\"},\"$:/plugins/wikilabs/keyvalues/readme\":{\"title\":\"$:/plugins/wikilabs/keyvalues/readme\",\"text\":\"! ''keyvalues'' Operator\\n\\nThe \\\"keyvalues\\\" operator only works with DataTiddlers. Non data-tiddlers will be ignored!\\n\\nThe <<.op keyvalues>> operator uses an extended syntax that permits multiple fields and flags to be passed:\\n\\n```\\n[keyvalues:<field list>:<separator>:<flag>[<operand>]]\\n```\\n\\n* ''field list'': an ordered, comma delimited list. Either `key`, `value` or both\\n** defaults to `key,value` if blank\\n* ''separator'': a separator string used to combine the output string\\n** defaults to `: ` = `<colon><space>` if blank <small>(new since V2.1.0)</small>\\n** If a space is needed, use: `&nbsp;`\\n** If a colon `:` is needed, use: `&#58;`\\n* ''flag'': `usekey`, `usevalue` or `useboth`\\n** (defaults to `usekey` if blank)\\n** only 1 flag is allowed. The first one will be used\\n* ''operand'': filter operand\\n\\nThe following example lists both the <<.field key>> and the <<.field value>>. It uses the string <<.op -xx->> as a separator between key and value. It uses the regexp operand: <<.op digit-pattern>> to filter by the <<.field key>> \\n\\n```\\n<$set name=\\\"digit-pattern\\\" value=\\\"[0][3-9]:\\\">\\n[keyvalues:key,value:-xx-:usekey<digit-pattern>]\\n```\\n\\nThe available flags are:\\n\\n* ''usekey'' - the <<.field key>> will be used to filter the output. The `<operand>` contains a regexp filter\\n* ''usevalue'' - the <<.field value>> will be used to filter the output. The `<operand>` contains a regexp filter\\n* ''useboth'' - the <<.field key>>, the <<.field seperator>> and <<.field value>> will be used to filter the output. The `<operand>` contains a regexp filter\"}}}"}