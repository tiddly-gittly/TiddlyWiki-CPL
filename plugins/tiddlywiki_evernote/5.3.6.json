{"title":"$:/plugins/tiddlywiki/evernote","name":"Evernote","description":"Evernote migration tools","list":"readme docs","stability":"STABILITY_2_STABLE","version":"5.3.6","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/tiddlywiki/evernote/docs\":{\"title\":\"$:/plugins/tiddlywiki/evernote/docs\",\"text\":\"! Introduction\\n\\n\"},\"$:/plugins/tiddlywiki/evernote/modules/enex-deserializer.js\":{\"title\":\"$:/plugins/tiddlywiki/evernote/modules/enex-deserializer.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/evernote/modules/enex-deserializer.js\\ntype: application/javascript\\nmodule-type: tiddlerdeserializer\\n\\nENEX file deserializer\\n\\nFor details see: https://blog.evernote.com/tech/2013/08/08/evernote-export-format-enex/\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// DOMParser = require(\\\"$:/plugins/tiddlywiki/xmldom/dom-parser\\\").DOMParser;\\nvar illegalFilenameCharacters = /[\\\\[\\\\]<>;\\\\:\\\\\\\"\\\\/\\\\\\\\\\\\|\\\\?\\\\*\\\\^\\\\?\\\\$\\\\(\\\\)\\\\s~]/g;\\n\\n/*\\nParse an ENEX file into tiddlers\\n*/\\nexports[\\\"application/enex+xml\\\"] = function(text,fields) {\\n\\t// Collect output tiddlers in an array\\n\\tvar results = [];\\n\\t// Parse the XML document\\n\\tvar doc = new DOMParser().parseFromString(text,\\\"application/xml\\\");\\n\\t// Output a report tiddler with information about the import\\n\\tvar enex = doc.querySelector(\\\"en-export\\\");\\n\\tif(!enex) {\\n\\t\\t// Firefox's DOMParser have problem in some cases.\\n\\t\\tthrow new Error('Failed to parse ENEX file, no \\\"en-export\\\" node found, try use Chrome/Edge to export again.');\\n\\t}\\n\\tresults.push({\\n\\t\\ttitle: \\\"Evernote Import Report\\\",\\n\\t\\ttext: \\\"Evernote file imported on \\\" + enex.getAttribute(\\\"export-date\\\") + \\\" from \\\" + enex.getAttribute(\\\"application\\\") + \\\" (\\\" + enex.getAttribute(\\\"version\\\") + \\\")\\\"\\n\\t})\\n\\t// Get all the \\\"note\\\" nodes\\n\\tvar noteNodes = doc.querySelectorAll(\\\"note\\\");\\n\\t$tw.utils.each(noteNodes,function(noteNode) {\\n\\t\\tvar noteTitle = getTextContent(noteNode,\\\"title\\\");\\n\\t\\t// get real note content node\\n\\t\\tvar contentNode = noteNode.querySelector(\\\"content\\\")\\n\\t\\tvar contentText = (contentNode.textContent || \\\"\\\").replace(/&nbsp;/g, ' ').trim();\\n\\t\\tif(contentText) {\\n\\t\\t\\t// The final content will be HTML instead of xml. And we will save it as wikitext, to make wiki syntax work, and remaining HTML will also work.\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t// may error if content is not valid XML\\n\\t\\t\\t\\tcontentNode =\\tnew DOMParser().parseFromString(contentText,\\\"application/xml\\\").querySelector(\\\"en-note\\\") || contentNode;\\n\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\t// ignore\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// process main content and metadata, and save as wikitext tiddler.\\n\\t\\tvar noteResult = {\\n\\t\\t\\ttitle: noteTitle.replace(illegalFilenameCharacters,\\\"_\\\"),\\n\\t\\t\\ttags: [],\\n\\t\\t\\tmodified: convertDate(getTextContent(noteNode,\\\"updated\\\") || getTextContent(noteNode,\\\"created\\\")),\\n\\t\\t\\tmodifier: getTextContent(noteNode,\\\"author\\\"),\\n\\t\\t\\tcreated:  convertDate(getTextContent(noteNode,\\\"created\\\")),\\n\\t\\t\\tcreator: getTextContent(noteNode,\\\"author\\\")\\n\\t\\t};\\n\\t\\t// process resources (images, PDFs, etc.)\\n\\t\\t$tw.utils.each(noteNode.querySelectorAll(\\\"resource\\\"),function(resourceNode) {\\n\\t\\t\\t// hash generated by applying https://github.com/vzhd1701/evernote-backup/pull/54\\n\\t\\t\\tvar hash = resourceNode.querySelector(\\\"data\\\").getAttribute(\\\"hash\\\");\\n\\t\\t\\tvar text = getTextContent(resourceNode,\\\"data\\\");\\n\\t\\t\\tvar mimeType = getTextContent(resourceNode,\\\"mime\\\");\\n\\t\\t\\tvar contentTypeInfo = $tw.config.contentTypeInfo[mimeType] || {extension:\\\"\\\"};\\n\\t\\t\\tvar title = getTextContent(resourceNode,\\\"resource-attributes>file-name\\\")\\n\\t\\t\\t// a few resources don't have title, use hash as fallback\\n\\t\\t\\ttitle = title || (hash + contentTypeInfo.extension);\\n\\t\\t\\t// replace all system reserved characters in title\\n\\t\\t\\ttitle = title.replace(illegalFilenameCharacters,\\\"_\\\");\\n\\t\\t\\t// prefix image title with note title, to avoid name conflicts which is quite common in web-clipped content\\n\\t\\t\\ttitle = noteResult.title + \\\"/\\\" + title;\\n\\t\\t\\tresults.push({\\n\\t\\t\\t\\ttitle: title,\\n\\t\\t\\t\\ttype: mimeType,\\n\\t\\t\\t\\twidth: getTextContent(resourceNode,\\\"width\\\"),\\n\\t\\t\\t\\theight: getTextContent(resourceNode,\\\"height\\\"),\\n\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t// give image same modified and modifier as the note, so they can be grouped together in the \\\"Recent\\\"\\n\\t\\t\\t\\tmodified: noteResult.modified,\\n\\t\\t\\t\\tmodifier: noteResult.modifier,\\n\\t\\t\\t\\tcreated: noteResult.created,\\n\\t\\t\\t\\tcreator: noteResult.creator\\n\\t\\t\\t});\\n\\t\\t\\tif(hash) {\\n\\t\\t\\t\\tfixAttachmentReference(contentNode, hash, mimeType, title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// export mixed content of wikitext and HTML\\n\\t\\tnoteResult.text = contentNode.innerHTML;\\n\\t\\t// remove all ` xmlns=\\\"http://www.w3.org/1999/xhtml\\\"` attributes to save some space\\n\\t\\tnoteResult.text = noteResult.text.replace(/ xmlns=\\\"http:\\\\/\\\\/www.w3.org\\\\/1999\\\\/xhtml\\\"/g, \\\"\\\");\\n\\t\\t$tw.utils.each(noteNode.querySelectorAll(\\\"tag\\\"),function(tagNode) {\\n\\t\\t\\tnoteResult.tags.push(tagNode.textContent);\\n\\t\\t});\\n\\t\\t// If there's an update date, set modifiy date accordingly\\n\\t\\tvar update = getTextContent(noteNode,\\\"updated\\\");\\n\\t\\tif(update) {\\n\\t\\t\\tnoteResult.modified = convertDate(update);\\n\\t\\t}\\n\\t\\t$tw.utils.each(noteNode.querySelectorAll(\\\"note-attributes>*\\\"),function(attrNode) {\\n\\t\\t\\tnoteResult[attrNode.tagName] = attrNode.textContent;\\n\\t\\t});\\n\\t\\tresults.push(noteResult);\\n\\t});\\n\\t// Return the output tiddlers\\n\\treturn results;\\n};\\n\\nfunction getTextContent(node,selector) {\\n\\treturn (node.querySelector(selector) || {}).textContent || \\\"\\\";\\n}\\n\\nfunction convertDate(isoDate) {\\n\\treturn (isoDate || \\\"\\\").replace(\\\"T\\\",\\\"\\\").replace(\\\"Z\\\",\\\"\\\") + \\\"000\\\"\\n}\\n\\nfunction fixAttachmentReference(contentNode, md5Hash, mimeType, name) {\\n\\tif(!contentNode) return;\\n\\tvar mediaNode = contentNode.querySelector('en-media[hash=\\\"' + md5Hash + '\\\"]');\\n\\tif(!name) {\\n\\t\\tthrow new Error(\\\"name is empty for resource hash\\\" + md5Hash);\\n\\t}\\n\\tif(!mediaNode) return;\\n\\tif(mimeType.indexOf(\\\"image/\\\") === 0) {\\n\\t\\t// find en-media node, replace with image syntax\\n\\t\\tmediaNode.parentNode.replaceChild($tw.utils.domMaker(\\\"p\\\", {text: \\\"[img[\\\"+ name + \\\"]]\\\"}), mediaNode);\\n\\t} else {\\n\\t\\t// For other than image attachments, we make a link to the tiddler\\n\\t\\tmediaNode.parentNode.replaceChild($tw.utils.domMaker(\\\"p\\\", {text: \\\"[[\\\"+ name + \\\"]]\\\"}), mediaNode);\\n\\t}\\n}\\n\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"tiddlerdeserializer\"},\"$:/plugins/tiddlywiki/evernote/readme\":{\"title\":\"$:/plugins/tiddlywiki/evernote/readme\",\"text\":\"This plugin contains tool to assist migration of content from Evernote ENEX files.\\n\\n!! Instructions\\n\\n# Download or save your ENEX file from Evernote\\n## Use [ext[evernote-backup|https://github.com/vzhd1701/evernote-backup]] to export ENEX file with resource hash, so images can be linked in the note\\n# Rename the file to have an `.enex` extension\\n# Drag the file into the TiddlyWiki browser window\\n## Alternatively, click the \\\"Import\\\" button in the \\\"Tools\\\" sidebar tab\\n# Review and accept the converted tiddlers\\n\"}}}","author":"tiddlywiki"}