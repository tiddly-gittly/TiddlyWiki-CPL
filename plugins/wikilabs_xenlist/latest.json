{"title":"$:/plugins/wikilabs/xenlist","name":"xenlist","description":"New enlist operator that understands comments and filter syntax","author":"pmario","core-version":">=5.1.14","version":"0.0.2","list":"readme license history","stability":"STABILITY_1_EXPERIMENTAL","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/wikilabs/xenlist/history\":{\"title\":\"$:/plugins/wikilabs/xenlist/history\",\"text\":\"V 0.0.2 - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\nV 0.0.1-experimental - 2021.01.25\\n\\n* initial release\\n** needed by bundler and wltm-open-story plugins\\n\"},\"$:/plugins/wikilabs/xenlist/license\":{\"title\":\"$:/plugins/wikilabs/xenlist/license\",\"text\":\"[[Xenlist Plugin|https://wikilabs.github.io/#xenlist]] (C) Mario Pietsch - 2021-<<now YYYY>>\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"},\"$:/core/modules/filters/Xenlist.js\":{\"title\":\"$:/core/modules/filters/Xenlist.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/Xenlist.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning its operand parsed as a list\\n\\n\\\\*/\\n(function(){\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false, exports: false */\\n\\t\\\"use strict\\\";\\n\\t\\n\\t/*\\n\\tExport our filter function\\n\\t*/\\n\\texports.xenlist = function(source,operator,options) {\\n\\t\\tvar allowDuplicates = false,\\n\\t\\t\\tuseFilterArray = false,\\n\\t\\t\\tmode = \\\"filter\\\"; // default - detect filter string elements\\n\\t\\tvar list = [];\\n\\t\\t\\n\\t\\tswitch(operator.suffix) {\\n\\t\\t\\tcase \\\"raw\\\":\\n\\t\\t\\t\\tallowDuplicates = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"dedupe\\\":\\n\\t\\t\\t\\tallowDuplicates = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"array\\\":\\n\\t\\t\\t\\tallowDuplicates = true;\\n\\t\\t\\t\\tuseFilterArray = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"stringify\\\":\\n\\t\\t\\t\\tallowDuplicates = true;\\n\\t\\t\\t\\tuseFilterArray = true;\\n\\t\\t\\t\\tmode = \\\"stringify\\\";\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tvar x = $tw.utils.parseFilterArray;\\n\\t\\tlist = (useFilterArray) ? x(operator.operand,allowDuplicates,mode) : $tw.utils.parseStringArray(operator.operand,allowDuplicates);\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tvar results = [];\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(list.indexOf(title) === -1) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn results;\\n\\t\\t} else {\\n\\t\\t\\treturn list;\\n\\t\\t}\\n\\t};\\n\\t\\n\\t})();\\n\\t\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/widgets/action-listops.js\":{\"title\":\"$:/core/modules/widgets/action-listops.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-listops.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to apply list operations to any tiddler field (defaults to the 'list' field of the current tiddler)\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar ActionListopsWidget = function(parseTreeNode, options) {\\n\\tthis.initialise(parseTreeNode, options);\\n};\\n/**\\n * Inherit from the base widget class\\n */\\nActionListopsWidget.prototype = new Widget();\\n/**\\n * Render this widget into the DOM\\n */\\nActionListopsWidget.prototype.render = function(parent, nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n/**\\n * Compute the internal state of the widget\\n */\\nActionListopsWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.target = this.getAttribute(\\\"$tiddler\\\", this.getVariable(\\n\\t\\t\\\"currentTiddler\\\"));\\n\\tthis.filter = this.getAttribute(\\\"$filter\\\");\\n\\tthis.subfilter = this.getAttribute(\\\"$subfilter\\\");\\n\\tthis.listField = this.getAttribute(\\\"$field\\\", \\\"list\\\");\\n\\tthis.listIndex = this.getAttribute(\\\"$index\\\");\\n\\tthis.filtertags = this.getAttribute(\\\"$tags\\\");\\n};\\n/**\\n * \\tRefresh the widget by ensuring our attributes are up to date\\n */\\nActionListopsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.$tiddler || changedAttributes.$filter ||\\n\\t\\tchangedAttributes.$subfilter || changedAttributes.$field ||\\n\\t\\tchangedAttributes.$index || changedAttributes.$tags) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n/**\\n * \\tInvoke the action associated with this widget\\n */\\nActionListopsWidget.prototype.invokeAction = function(triggeringWidget,\\n\\tevent) {\\n\\t//Apply the specified filters to the lists\\n\\tvar field = this.listField,\\n\\t\\tindex,\\n\\t\\ttype = \\\"!!\\\",\\n\\t\\tlist = this.listField;\\n\\tif(this.listIndex) {\\n\\t\\tfield = undefined;\\n\\t\\tindex = this.listIndex;\\n\\t\\ttype = \\\"##\\\";\\n\\t\\tlist = this.listIndex;\\n\\t}\\n\\tif(this.filter) {\\n\\t\\tthis.wiki.setText(this.target, field, index, $tw.utils.stringifyList(\\n\\t\\t\\tthis.wiki\\n\\t\\t\\t.filterTiddlers(this.filter, this)));\\n\\t}\\n\\tif(this.subfilter) {\\n\\t\\tvar filterString = \\\"[xenlist:array{\\\" + this.target + type + list + \\\"}] \\\" + this.subfilter;\\n\\t\\tthis.wiki.setText(this.target, field, index, $tw.utils.stringifyList(\\n\\t\\t\\tthis.wiki.filterTiddlers(filterString, this)));\\n\\t}\\n\\tif(this.filtertags) {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.target),\\n\\t\\t\\toldtags = tiddler ? (tiddler.fields.tags || []).slice(0) : [],\\n\\t\\t\\ttagfilter = \\\"[list[\\\" + this.target + \\\"!!tags]] \\\" + this.filtertags,\\n\\t\\t\\tnewtags = this.wiki.filterTiddlers(tagfilter,this);\\n\\t\\tif($tw.utils.stringifyList(oldtags.sort()) !== $tw.utils.stringifyList(newtags.sort())) {\\n\\t\\t\\tthis.wiki.setText(this.target,\\\"tags\\\",undefined,$tw.utils.stringifyList(newtags));\\n\\t\\t}\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-listops\\\"] = ActionListopsWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/wikilabs/xenlist/readme\":{\"title\":\"$:/plugins/wikilabs/xenlist/readme\",\"text\":\"* TODO\\n\\n! Example\\n\\n```\\nTODO\\n```\"},\"$:/core/modules/utils/parseFilterArray.js\":{\"title\":\"$:/core/modules/utils/parseFilterArray.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/parseFilterArray.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nParse a string field and return a filter-array. For example \\\"OneTiddler [[Another Tiddler]] [subfilter{$:/DefaultTiddlers}]]\\\"\\nIt will return a filter in results[\\\"OneTiddler\\\", \\\"[[Another Tiddler]]\\\" \\\"[subfilter{$:/DefaultTiddlers}]]\\\"]\\n\\n\\\\*/\\n\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.parseFilterArray = function(value, allowDuplicate, mode) {\\n\\tvar item;\\n\\tif(typeof value === \\\"string\\\") {\\n\\t\\tvar memberRegExp = /\\\\[\\\\[((?:[^\\\\]])*)\\\\]\\\\]|[\\\"']((?:[^\\\\]\\\"'])*)[\\\"']|(\\\\[?\\\\[.*?[\\\\]|\\\\>|}]\\\\])|([+|\\\\-|~|=]\\\\[(?:[^\\\\]])*[\\\\]]+)|([+|\\\\-|~|=]\\\\S*)|([^[\\\\s]?\\\\S+)/mg,\\n\\t\\t\\tresults = [], names = {},\\n\\t\\t\\tmatch;\\n\\t\\tdo {\\n\\t\\t\\tmatch = memberRegExp.exec(value);\\n\\t\\t\\tif(match) {\\n\\t\\t\\t\\tif ((match[1] || match[2]) && mode===\\\"stringify\\\") {\\n\\t\\t\\t\\t\\titem = match[1] || match[2];\\n\\t\\t\\t\\t\\titem = \\\"[[\\\" + item + \\\"]]\\\";\\n\\t\\t\\t\\t} else { // \\\"filter mode is active\\\"\\\"\\n\\t\\t\\t\\t\\titem = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(item !== undefined && (!$tw.utils.hop(names,item) || allowDuplicate)) {\\n\\t\\t\\t\\t\\tresults.push(item);\\n\\t\\t\\t\\t\\tnames[item] = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} while(match);\\n\\t\\treturn results;\\n\\t} else if($tw.utils.isArray(value)) {\\n\\t\\treturn value;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/stringifyList.js\":{\"title\":\"$:/core/modules/utils/stringifyList.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/stringifyList.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nParse a string field and return a filter-array. For example \\\"OneTiddler [[Another Tiddler]] [subfilter{$:/DefaultTiddlers}]]\\\"\\nIt will return a filter in results[\\\"OneTiddler\\\", \\\"[[Another Tiddler]]\\\" \\\"[subfilter{$:/DefaultTiddlers}]]\\\"]\\n\\n\\\\*/\\n\\n(function(){\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n// Stringify an array of tiddler titles into a list string\\nexports.stringifyList = function(value) {\\n\\tvar filterStart = \\\"[+-~=\\\";\\n\\tif($tw.utils.isArray(value)) {\\n\\t\\tvar result = new Array(value.length);\\n\\t\\tfor(var t=0, l=value.length; t<l; t++) {\\n\\t\\t\\tvar entry = value[t] || \\\"\\\";\\n\\t\\t\\tif(filterStart.indexOf(entry[0]) !== -1) {\\n\\t\\t\\t\\tresult[t] = entry;\\n\\t\\t\\t} else if(entry.indexOf(\\\" \\\") !== -1) {\\n\\t\\t\\t\\tresult[t] = \\\"[[\\\" + entry + \\\"]]\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tresult[t] = entry;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result.join(\\\" \\\");\\n\\t} else {\\n\\t\\treturn value || \\\"\\\";\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"utils\"}}}"}