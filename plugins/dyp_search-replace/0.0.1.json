{"title":"$:/plugins/dyp/search-replace","version":"0.0.1","stability":"STABILITY_2_STABLE","name":"search-replace","description":"正则表达式查找替换","author":"dyp","source":"https://github.com/dyp1121054136/dyp-plugins-library","list":"readme usage history","plugin-priority":"","parent-plugin":"","dependents":"$:/plugins/dyp/tiddler-scrollpage","plugin-type":"plugin","core-version":"5.3.7-prerelease","packaged-by":"Gatha on 23rd 五月 2025, 09:28:58","type":"application/json","text":"{\"tiddlers\":{\"$:/core/images/clear-result\":{\"title\":\"$:/core/images/clear-result\",\"created\":\"20240501131946138\",\"modified\":\"20240501132002133\",\"tags\":\"$:/tags/Image 图标 正则表达式查找替换\",\"text\":\"\\\\parameters (size:\\\"22pt\\\")\\n\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=<<size>> height=<<size>> fill=\\\"currentColor\\\" class=\\\"bi bi-trash\\\" viewBox=\\\"0 0 16 16\\\">\\n  <path d=\\\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\\\"/>\\n  <path d=\\\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\\\"/>\\n</svg>\"},\"$:/core/images/search-replace\":{\"title\":\"$:/core/images/search-replace\",\"created\":\"20240430120439095\",\"modified\":\"20250523010910748\",\"tags\":\"$:/tags/Image 图标 正则表达式查找替换\",\"text\":\"\\\\parameters (size:\\\"22pt\\\")\\n\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=<<size>> height=<<size>> class=\\\"bi bi-yin-yang tc-image-button\\\" viewBox=\\\"0 0 16 16\\\">\\n  <path d=\\\"M9.167 4.5a1.167 1.167 0 1 1-2.334 0 1.167 1.167 0 0 1 2.334 0Z\\\"/>\\n  <path d=\\\"M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM1 8a7 7 0 0 1 7-7 3.5 3.5 0 1 1 0 7 3.5 3.5 0 1 0 0 7 7 7 0 0 1-7-7Zm7 4.667a1.167 1.167 0 1 1 0-2.334 1.167 1.167 0 0 1 0 2.334Z\\\"/>\\n</svg>\"},\"$:/core/ui/Buttons/search-replace-edit-tool\":{\"title\":\"$:/core/ui/Buttons/search-replace-edit-tool\",\"caption\":\"{{$:/core/images/search-replace}} 开启/关闭编辑器工具栏查找替换\",\"created\":\"20240430191553224\",\"description\":\"开启/关闭编辑器工具栏查找替换\",\"modified\":\"20250523011938274\",\"tags\":\"$:/tags/PageControls 按钮 正则表达式查找替换\",\"text\":\"<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"开启/关闭编辑器工具栏查找替换\\\">\\n<$action-listops $tiddler=\\\"$:/searchNreplace/ui/controls/replace-edit-tool\\\" $tags=\\\"+[toggle[$:/tags/EditControls]]\\\"/>\\n\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">{{$:/core/images/search-replace|22px}}</$list><$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n开启/关闭正则表达式查找替换\\n</span></$list>\\n\\n</$button>\"},\"$:/core/ui/Buttons/search-replace\":{\"title\":\"$:/core/ui/Buttons/search-replace\",\"caption\":\"{{$:/core/images/search-replace}} 正则表达式查找替换\",\"created\":\"20240430120025949\",\"description\":\"正则表达式查找替换\",\"modified\":\"20240502114405895\",\"tags\":\"$:/tags/ViewToolbar 按钮 正则表达式查找替换\",\"text\":\"<$set value={{{ [<currentTiddler>addprefix[$:/temp/search-replace]] }}} name=\\\"open-search-replace\\\">\\n<$button popup=<<open-search-replace>> tooltip=\\\"正则表达式查找替换\\\" class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">{{$:/core/images/search-replace}}</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\"><span class=\\\"tc-btn-text>正则表达式查找替换</span></$list>\\n</$button>\\n<$reveal type=\\\"popup\\\" state=<<open-search-replace>> position=\\\"belowleft\\\" tag=\\\"div\\\" class=\\\"tc-popup-keep\\\">\\n\\n<div class=\\\"search-replace-body\\\">\\n\\n<$transclude tiddler=\\\"$:/searchNreplace/ui/controls/replace\\\"/>\\n</div>\\n\\n</$reveal>\\n</$set>\\n\"},\"$:/modules/add-line-anchors.js\":{\"title\":\"$:/modules/add-line-anchors.js\",\"created\":\"20240508093933157\",\"modified\":\"20240509022150430\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换 锚点 行号\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/add-line-anchors.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n为TiddlyWiki中的当前条目每一行添加锚点\\n\\\\*/\\n\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块信息\\nexports.name = \\\"add-line-anchors\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 定义添加锚点的函数\\nvar addAnchorsToLines = function(tiddlerTitle) {\\n  // 获取当前条目的文本\\n  var text = $tw.wiki.getTiddlerText(tiddlerTitle);\\n\\n  // 创建撤销状态条目\\n  $tw.wiki.setText(\\\"$:/state/undo/add-line-anchors\\\", \\\"text\\\", null, text);\\n\\n  // 将文本按行分割\\n  var lines = text.split(\\\"\\\\n\\\");\\n\\n  // 过滤掉空行\\n  var nonEmptyLines = lines.filter(function(line) {\\n    return line.trim() !== \\\"\\\";\\n  });\\n\\n  // 为每一行添加锚点\\n  var anchoredLines = nonEmptyLines.map(function(line, index) {\\n    // 生成唯一的锚点ID，不包括空行\\n    var anchorId = index + 1; // 从1开始编号\\n    // 创建锚点HTML\\n    var anchor = `<<line-anchor \\\"${anchorId}\\\">>`;\\n    // 将锚点添加到行尾\\n    return line + anchor;\\n  });\\n\\n  // 将带锚点的行合并回文本，保留空行\\n  var updatedText = lines.map(function(line) {\\n    if (line.trim() !== \\\"\\\") {\\n      return anchoredLines.shift(); // 添加锚点的非空行\\n    }\\n    return line; // 空行保持原样\\n  }).join(\\\"\\\\n\\\");\\n\\n  // 保存修改后的文本回条目\\n  $tw.wiki.setText(tiddlerTitle, \\\"text\\\", null, updatedText);\\n};\\n\\n// 定义清除锚点的函数\\nvar clearAnchorsFromLines = function(tiddlerTitle) {\\n  // 获取当前条目的文本\\n  var text = $tw.wiki.getTiddlerText(tiddlerTitle);\\n\\n  // 清除所有行尾的锚点，但保留行尾的空格和其他内容\\n  var clearedText = text.replace(/(\\\\s*)<<line-anchor \\\"[0-9]+\\\">>$/gm, function(match, leadingSpaces) {\\n    // leadingSpaces 是行首的空格或缩进\\n    return leadingSpaces; // 返回行首的空格或缩进，移除锚点\\n  });\\n\\n  // 保存修改后的文本回条目\\n  $tw.wiki.setText(tiddlerTitle, \\\"text\\\", null, clearedText);\\n};\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 添加事件监听器来添加锚点\\n  $tw.rootWidget.addEventListener(\\\"tm-add-line-anchors\\\", function(event) {\\n    var tiddlerTitle = event.paramObject.title;\\n    if (tiddlerTitle) {\\n      addAnchorsToLines(tiddlerTitle);\\n    } else {\\n      console.error(\\\"tm-add-line-anchors事件缺少参数 'title'\\\");\\n    }\\n  });\\n\\n  // 添加事件监听器来清除锚点\\n  $tw.rootWidget.addEventListener(\\\"tm-clear-line-anchors\\\", function(event) {\\n    var tiddlerTitle = event.paramObject.title;\\n    if (tiddlerTitle) {\\n      clearAnchorsFromLines(tiddlerTitle);\\n    } else {\\n      console.error(\\\"tm-clear-line-anchors事件缺少参数 'title'\\\");\\n    }\\n  });\\n};\\n\\n})();\"},\"$:/modules/add-result-suffix.js\":{\"title\":\"$:/modules/add-result-suffix.js\",\"created\":\"20240501121907667\",\"modified\":\"20240502171414858\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换 锚点\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/add-result-suffix.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n为TiddlyWiki中的搜索结果添加编号后缀，并清除所有后缀\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块信息\\nexports.name = \\\"add-result-suffix\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 定义一个名为addSuffix的命令\\n  $tw.rootWidget.addEventListener(\\\"tm-add-suffix\\\", function(event) {\\n    var sourceTitle = event.paramObject.source,\\n        search = event.paramObject.search,\\n        regex = event.paramObject.regex === \\\"yes\\\",\\n        countTitle = event.paramObject.countTitle;\\n\\n    if (!sourceTitle || !search || !countTitle) {\\n      console.error(\\\"tm-add-suffix事件缺少参数\\\");\\n      return;\\n    }\\n\\n    var text = $tw.wiki.getTiddlerText(sourceTitle);\\n    if (!text) {\\n      console.error(\\\"未找到源tiddler:\\\", sourceTitle);\\n      return;\\n    }\\n\\n    var pattern = regex ? search : $tw.utils.escapeRegExp(search);\\n    var regExp = new RegExp(pattern, 'g');\\n\\n    var index = 0;\\n    var suffixedText = text.replace(regExp, function(match) {\\n      index++;\\n      var suffixNumber = ('' + index).slice(-3);\\n      // 使用宏调用代替直接插入HTML\\n      var suffixMacro = \\\"<<result \\\" + suffixNumber + \\\">>\\\";\\n      return match + suffixMacro;\\n    });\\n\\n    $tw.wiki.setText(sourceTitle, \\\"text\\\", null, suffixedText);\\n    $tw.wiki.setText(countTitle, \\\"text\\\", null, index.toString());\\n  });\\n\\n  // 定义一个名为clearSuffix的命令\\n  $tw.rootWidget.addEventListener(\\\"tm-clear-suffix\\\", function(event) {\\n    var sourceTitle = event.paramObject.source;\\n\\n    if (!sourceTitle) {\\n      console.error(\\\"tm-clear-suffix事件缺少参数\\\");\\n      return;\\n    }\\n\\n    var text = $tw.wiki.getTiddlerText(sourceTitle);\\n    if (!text) {\\n      console.error(\\\"未找到源tiddler:\\\", sourceTitle);\\n      return;\\n    }\\n\\n    // 修改正则表达式以匹配宏调用\\n    var suffixRegExp = /<<result \\\\d+>>/g;\\n    var clearedText = text.replace(suffixRegExp, '');\\n\\n    $tw.wiki.setText(sourceTitle, \\\"text\\\", null, clearedText);\\n  });\\n};\\n\\n})();\"},\"$:/modules/paste-clipboard.js\":{\"title\":\"$:/modules/paste-clipboard.js\",\"created\":\"20240430192556881\",\"modified\":\"20240502174419129\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/paste-clipboard.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n从剪贴板中粘贴文本内容到TiddlyWiki\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块名称和同步状态\\nexports.name = \\\"paste-clipboard\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 为根部件添加tm-paste事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-paste\\\", function(event) {\\n    // 显示加载指示器\\n    $tw.notifier.display(\\\"正在粘贴剪贴板内容...\\\");\\n\\n    // 尝试读取剪贴板内容\\n    navigator.clipboard.readText()\\n      .then(text => {\\n        // 从事件参数对象中提取参数\\n        var pasteTitle = event.paramObject.pasteTitle; // 存储剪贴板内容的tiddler标题\\n\\n        // 将剪贴板内容设置到指定的tiddler中\\n        if (pasteTitle) {\\n          $tw.wiki.setText(pasteTitle, \\\"text\\\", null, text);\\n          // 显示成功通知\\n          $tw.notifier.display(\\\"剪贴板内容已成功粘贴。\\\");\\n        } else {\\n          // 显示错误通知\\n          $tw.notifier.display(\\\"粘贴失败，未指定tiddler标题。\\\");\\n        }\\n      })\\n      .catch(err => {\\n        // 记录错误并在控制台中输出\\n        console.error(\\\"粘贴剪贴板内容时发生错误:\\\", err);\\n        // 显示错误通知\\n        $tw.notifier.display(\\\"粘贴剪贴板内容时发生错误。\\\");\\n      });\\n  });\\n};\\n\\n})();\"},\"$:/modules/replace-bookmarks.js\":{\"title\":\"$:/modules/replace-bookmarks.js\",\"created\":\"20240505174424277\",\"modified\":\"20240505175826117\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换 锚点\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/replace-bookmarks.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n为TiddlyWiki中的书签添加时间戳\\n\\\\*/\\n\\n(function(){\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块信息\\nexports.name = \\\"replace-bookmarks\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 定义替换书签的函数\\nvar replaceBookmarks = function(tiddlerTitle) {\\n  // 获取当前条目的文本\\n  var text = $tw.wiki.getTiddlerText(tiddlerTitle);\\n  // 定义书签正则表达式\\n  var bookmarkRegExp = /<<bookmark ([^\\\\s]*)>>/g;\\n  // 查找所有匹配的书签\\n  var bookmarks = text.match(bookmarkRegExp);\\n\\n  // 如果有书签，则替换它们\\n  if (bookmarks && bookmarks.length > 0) {\\n    var currentDate = new Date();\\n    bookmarks.forEach(function(bookmark, index) {\\n      // 为每个书签生成唯一的时间戳\\n      var timestamp = new Date(currentDate.getTime() + index * 1000);\\n      var YYYY = timestamp.getFullYear();\\n      var MM = ('0' + (timestamp.getMonth() + 1)).slice(-2);\\n      var DD = ('0' + timestamp.getDate()).slice(-2);\\n      var hh = ('0' + timestamp.getHours()).slice(-2);\\n      var mm = ('0' + timestamp.getMinutes()).slice(-2);\\n      var ss = ('0' + timestamp.getSeconds()).slice(-2);\\n      var formattedTimestamp = YYYY + MM + DD + hh + mm + ss;\\n      // 替换当前书签\\n      text = text.replace(bookmark, '<<bookmark \\\"' + formattedTimestamp + '\\\">>');\\n    });\\n\\n    // 保存修改后的文本回条目\\n    $tw.wiki.setText(tiddlerTitle, \\\"text\\\", null, text);\\n  }\\n};\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 添加事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-replace-bookmarks\\\", function(event) {\\n    var tiddlerTitle = event.paramObject.title;\\n    if (tiddlerTitle) {\\n      replaceBookmarks(tiddlerTitle);\\n    } else {\\n      console.error(\\\"tm-replace-bookmarks事件缺少参数 'title'\\\");\\n    }\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/count-characters.js\":{\"title\":\"$:/modules/startup/count-characters.js\",\"created\":\"20240505131555993\",\"modified\":\"20240505133652786\",\"module-type\":\"startup\",\"tags\":\"字数统计\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/count-characters.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n统计TiddlyWiki当前条目的字数和字符数\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块名称和同步状态\\nexports.name = \\\"count-characters\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 为根部件添加tm-count-characters事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-count-characters\\\", function(event) {\\n    // 从事件参数对象中提取参数\\n    var title = event.paramObject.title || \\\"$:/temp/currentTiddler\\\"; // 当前条目标题\\n\\n    // 获取当前条目的文本\\n    var text = $tw.wiki.getTiddlerText(title);\\n    if (!text) {\\n      console.error(\\\"未找到条目:\\\", title);\\n      return;\\n    }\\n\\n    // 初始化计数器\\n    var totalChars = 0,\\n        chineseChars = 0,\\n        punctuation = 0,\\n        letters = 0,\\n        numbers = 0;\\n\\n    // 遍历文本，统计字符\\n    for (var i = 0; i < text.length; i++) {\\n      var char = text[i];\\n      totalChars++;\\n\\n      if (/[^\\\\u4e00-\\\\u9fa5]/.test(char)) { // 如果不是汉字\\n        if (/[，。！？；：“”‘’（）《》【】]/.test(char)) { // 全角标点\\n          punctuation++;\\n        } else if (/[a-zA-Z]/.test(char)) { // 字母\\n          letters++;\\n        } else if (/\\\\d/.test(char)) { // 数字\\n          numbers++;\\n        }\\n      } else {\\n        chineseChars++; // 汉字\\n      }\\n    }\\n\\n    // 计算字数（汉字和标点）\\n    var totalWords = chineseChars + punctuation;\\n\\n    // 将统计结果保存到状态Tiddlers\\n    $tw.wiki.setText(\\\"$:/state/character-count/total\\\", \\\"text\\\", null, totalChars.toString());\\n    $tw.wiki.setText(\\\"$:/state/character-count/chinese\\\", \\\"text\\\", null, chineseChars.toString());\\n    $tw.wiki.setText(\\\"$:/state/character-count/punctuation\\\", \\\"text\\\", null, punctuation.toString());\\n    $tw.wiki.setText(\\\"$:/state/character-count/letters\\\", \\\"text\\\", null, letters.toString());\\n    $tw.wiki.setText(\\\"$:/state/character-count/numbers\\\", \\\"text\\\", null, numbers.toString());\\n    $tw.wiki.setText(\\\"$:/state/character-count/words\\\", \\\"text\\\", null, totalWords.toString());\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/count.js\":{\"title\":\"$:/modules/startup/count.js\",\"created\":\"20240430184506472\",\"modified\":\"20240501055402149\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/count.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n在TiddlyWiki中搜索文本并统计匹配结果数量\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块名称和同步状态\\nexports.name = \\\"count\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 为根部件添加tm-count事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-count\\\",function(event) {\\n    // 从事件参数对象中提取参数\\n    var sourceTitle = event.paramObject.source, // 源tiddler标题\\n        search = event.paramObject.search, // 搜索的文本\\n        regex = event.paramObject.regex === \\\"yes\\\", // 是否使用正则表达式\\n        countTitle = event.paramObject.countTitle; // 存储计数的tiddler标题\\n\\n    // 检查是否提供了必要的参数\\n    if (!sourceTitle || !search || !countTitle) {\\n      console.error(\\\"tm-count事件缺少参数\\\");\\n      return;\\n    }\\n\\n    // 获取源tiddler的文本\\n    var text = $tw.wiki.getTiddlerText(sourceTitle);\\n    if (!text) {\\n      console.error(\\\"未找到源tiddler:\\\", sourceTitle);\\n      return;\\n    }\\n\\n    // 构建正则表达式\\n    var pattern = regex ? search : $tw.utils.escapeRegExp(search);\\n    var regExp = new RegExp(pattern, 'g');\\n\\n    // 执行搜索并计数\\n    var matches = text.match(regExp);\\n    var count = matches ? matches.length : 0;\\n\\n    // 将计数结果保存到指定的tiddler\\n    $tw.wiki.setText(countTitle, \\\"text\\\", null, count.toString());\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/getmatch.js\":{\"title\":\"$:/modules/startup/getmatch.js\",\"created\":\"20240502025024551\",\"modified\":\"20240502025038712\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/getmatch.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n在TiddlyWiki中搜索文本并获取单个匹配结果\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块名称和同步状态\\nexports.name = \\\"getmatch\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 为根部件添加tm-get-match事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-get-match\\\",function(event) {\\n    // 从事件参数对象中提取参数\\n    var sourceTitle = event.paramObject.source, // 源tiddler标题\\n        search = event.paramObject.search, // 搜索的文本\\n        regex = event.paramObject.regex === \\\"yes\\\", // 是否使用正则表达式\\n        stateTitle = event.paramObject.stateTitle; // 存储状态的tiddler标题\\n\\n    // 检查是否提供了必要的参数\\n    if (!sourceTitle || !search || !stateTitle) {\\n      console.error(\\\"tm-get-match事件缺少参数\\\");\\n      return;\\n    }\\n\\n    // 获取源tiddler的文本\\n    var text = $tw.wiki.getTiddlerText(sourceTitle);\\n    if (!text) {\\n      console.error(\\\"未找到源tiddler:\\\", sourceTitle);\\n      return;\\n    }\\n\\n    // 构建正则表达式\\n    var pattern = regex ? search : $tw.utils.escapeRegExp(search);\\n    var regExp = new RegExp(pattern, 'g');\\n\\n    // 执行搜索并获取匹配结果\\n    var matches = text.match(regExp);\\n\\n    // 如果只有一个匹配结果，则保存到状态tiddler\\n    if (matches && matches.length === 1) {\\n      $tw.wiki.setText(stateTitle, \\\"text\\\", null, matches[0]);\\n    } else {\\n      // 如果没有匹配结果或匹配结果不止一个，则清空状态tiddler\\n      $tw.wiki.setText(stateTitle, \\\"text\\\", null, \\\"\\\");\\n    }\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/redo.js\":{\"title\":\"$:/modules/startup/redo.js\",\"created\":\"20240501031241919\",\"modified\":\"20240501033452151\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/redo.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n注册重做功能\\n\\n\\\\*/\\n(function(){\\n\\nexports.name = \\\"redo\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n  // 监听tm-redo事件\\n  $tw.rootWidget.addEventListener(\\\"tm-redo\\\", function(event) {\\n    // 检查是否有可用的重做文本\\n    var redoText = $tw.wiki.getTiddlerText(\\\"$:/state/searchNreplace/redo\\\");\\n    if (redoText) {\\n      // 恢复源tiddler的文本到重做文本\\n      var sourceTitle = event.paramObject.source || $tw.wiki.getTiddlerText(\\\"$:/state/searchNreplace/source\\\");\\n      $tw.wiki.setText(sourceTitle, \\\"text\\\", null, redoText);\\n    }\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/replace.js\":{\"title\":\"$:/modules/startup/replace.js\",\"created\":\"20240430111751145\",\"modified\":\"20240502172435865\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/replace.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n在TiddlyWiki中搜索和替换文本\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// 导出模块名称和同步状态\\nexports.name = \\\"replace\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// 启动函数\\nexports.startup = function() {\\n  // 为根部件添加tm-replace事件监听器\\n  $tw.rootWidget.addEventListener(\\\"tm-replace\\\", function(event) {\\n    // 从事件参数对象中提取参数\\n    var sourceTitle = event.paramObject.source,\\n        search = event.paramObject.search,\\n        replace = event.paramObject.replace,\\n        global = event.paramObject.global !== \\\"no\\\",\\n        regex = event.paramObject.regex === \\\"yes\\\",\\n        destinationTitle = event.paramObject.destination || sourceTitle,\\n        prefix = event.paramObject.prefix,\\n        suffix = event.paramObject.suffix;\\n\\n    // 验证必要的参数\\n    if (!sourceTitle || !search) {\\n      console.error(\\\"tm-replace事件缺少参数: sourceTitle 或 search\\\");\\n      return;\\n    }\\n\\n    // 获取源tiddler的文本\\n    var text = $tw.wiki.getTiddlerText(sourceTitle);\\n    if (!text) {\\n      console.error(\\\"未找到源tiddler:\\\", sourceTitle);\\n      return;\\n    }\\n\\n    // 保存源文本到撤销状态tiddler\\n    $tw.wiki.setText(\\\"$:/state/searchNreplace/undo\\\", \\\"text\\\", null, text);\\n\\n    // 构建正则表达式\\n    var modifiers = global ? 'g' : '';\\n    var pattern = regex ? search : $tw.utils.escapeRegExp(search);\\n    var regExp = new RegExp(pattern, modifiers);\\n\\n    // 执行搜索和替换\\n    var replacedText;\\n    if (prefix || suffix) {\\n      // 如果提供了前缀或后缀，使用replace方法添加前缀和后缀\\n      replacedText = text.replace(regExp, function(match) {\\n        return prefix + match + suffix;\\n      });\\n    } else {\\n      // 直接使用replace方法\\n      replacedText = text.replace(regExp, replace);\\n    }\\n\\n    // 将替换后的文本保存到目标tiddler\\n    $tw.wiki.setText(destinationTitle, \\\"text\\\", null, replacedText);\\n  });\\n};\\n\\n})();\"},\"$:/modules/startup/scrollpage.js\":{\"title\":\"$:/modules/startup/scrollpage.js\",\"created\":\"20240516120156269\",\"modified\":\"20240519191839125\",\"module-type\":\"startup\",\"tags\":\"滚动翻页\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/scrollpage.js\\ntype: application/javascript\\nmodule-type: startup\\n\\\\*/\\n\\n(function() {\\n  \\\"use strict\\\";\\n\\n  exports.name = \\\"scrollpage\\\";\\n  exports.platforms = [\\\"browser\\\"];\\n  exports.after = [\\\"startup\\\"];\\n  exports.synchronous = true;\\n\\n  // 新增一个函数，用于获取元素的行高\\n  function getElementLineHeight(element) {\\n    const style = window.getComputedStyle(element);\\n    return parseFloat(style.lineHeight);\\n  }\\n\\n  function getCharWidth(element) {\\n    const testSpan = document.createElement(\\\"span\\\");\\n    testSpan.style.visibility = \\\"hidden\\\";\\n    testSpan.style.whiteSpace = \\\"nowrap\\\";\\n    testSpan.textContent = \\\"m\\\";\\n    element.appendChild(testSpan);\\n    const charWidth = testSpan.offsetWidth;\\n    element.removeChild(testSpan);\\n    return charWidth;\\n  }\\n\\n  // 增加了一个新函数，用于滚动到最近的行和最近的字符\\n  function alignScrollToNearestLine(container, lineHeight, extraLines, charWidth, extraChars) {\\n    const lineHeightMisalignment = container.scrollTop % lineHeight;\\n    const charWidthMisalignment = container.scrollLeft % charWidth;\\n    if (lineHeightMisalignment > lineHeight / 2) {\\n      container.scrollTop += lineHeight - lineHeightMisalignment;\\n    } else if (lineHeightMisalignment <= lineHeight / 2) {\\n      container.scrollTop -= lineHeightMisalignment;\\n    }\\n    // 额外滚动 extraLines 行\\n    container.scrollTop += lineHeight * extraLines;\\n\\n    if (charWidthMisalignment > charWidth / 2) {\\n      container.scrollLeft += charWidth - charWidthMisalignment;\\n    } else if (charWidthMisalignment <= charWidth / 2) {\\n      container.scrollLeft -= charWidthMisalignment;\\n    }\\n    // 额外滚动 extraChars 字符\\n    container.scrollLeft += charWidth * extraChars;\\n  }\\n\\n  function getScrollPixels(scrollValue, length) {\\n    if (typeof scrollValue === 'number') return parseFloat(scrollValue);\\n    if (scrollValue.endsWith('vh')) return window.innerHeight * parseInt(scrollValue) / 100;\\n    if (scrollValue.endsWith('vw')) return window.innerWidth * parseInt(scrollValue) / 100;\\n    if (scrollValue.endsWith('%')) return length * parseFloat(scrollValue) / 100;\\n    return undefined;\\n  }\\n\\n  function scrollToPosition(params) {\\n    let direction = params.direction;\\n    let viewportHeight = window.innerHeight;\\n    let scrollDistance = params.scrollDistance ? params.scrollDistance : viewportHeight;\\n    let scrollTime = parseFloat(params.scrollTime);\\n    let targetElement = params.targetElement;\\n    let scrollContainerSelector = params.scrollContainerSelector;\\n    let extraLines = params.extraLines !== undefined ? Number(params.extraLines) : 0;\\n    let extraChars = params.extraChars !== undefined ? Number(params.extraChars) : 0;\\n    let scrollPixel = getScrollPixels(scrollDistance, viewportHeight);\\n\\nlet offset = parseFloat(params.offset || \\\"0\\\");\\n\\n  // 在此处处理虚拟EM偏移\\n  let offsetValue = offset && offset.endsWith('em') ? emToPixel(parseFloat(offset)) : parseFloat(offset || \\\"0\\\");\\n    \\n    let container = scrollContainerSelector ? document.querySelector(scrollContainerSelector) : null;\\n    if (container) {\\n      const lineHeight = getElementLineHeight(container);\\n      let charWidth = getCharWidth(container);\\n      \\n      if (direction === \\\"top\\\") {\\n        container.scrollTop = 0;\\n      } else if (direction === \\\"bottom\\\") {\\n        container.scrollTop = container.scrollHeight;\\n      } else if (direction === \\\"next\\\" || direction === \\\"prev\\\") {\\n        container.scrollTop += (direction === \\\"next\\\" ? scrollPixel : -scrollPixel);\\n        alignScrollToNearestLine(container, lineHeight, extraLines, charWidth, extraChars);\\n      } else if (direction === \\\"left\\\" || direction === \\\"right\\\") {\\n        container.scrollLeft += (direction === \\\"right\\\" ? scrollPixel : -scrollPixel);\\n      } else if(direction === \\\"leftMost-tb-rl\\\") {\\n        container.scrollLeft = -container.scrollWidth; //滚动到最左边，注意是负数（从右到左阅读）\\n      } else if(direction === \\\"rightMost-tb-rl\\\") {\\n        container.scrollLeft = 0; //滚动到最右边（从右到左阅读）\\n      }\\n      if (scrollTime > 0) {\\n        container.style.transition = `scroll ${scrollTime}s ease-in-out`;\\n        setTimeout(() => container.style.transition = \\\"\\\", scrollTime * 1000);\\n      }\\n    } else {\\n      let windowY = window.pageYOffset;\\n      let scrollTo;\\n\\n      if (direction === \\\"next\\\" || direction === \\\"prev\\\") {\\n        scrollTo = direction === \\\"next\\\" ? (windowY + scrollPixel) : (windowY - Math.abs(scrollPixel));\\n        scrollTo = Math.min(document.body.scrollHeight - viewportHeight, Math.max(scrollTo, 0));\\n        window.scrollTo({\\n          top: scrollTo,\\n          behavior: scrollTime > 0 ? \\\"smooth\\\" : \\\"auto\\\"\\n        });\\n      } else if (direction !== undefined) {\\n        console.error(\\\"tm-scrollpage事件的direction参数值不合法\\\");\\n      }\\n    }\\n  }\\n\\n// 辅助函数：将em单位的偏移量转换为像素单位\\nfunction emToPixel(value) {\\n  return value * parseFloat(window.getComputedStyle(document.documentElement).fontSize);\\n}\\n\\n// 滚动到元素位置的函数\\nfunction scrollToElementPosition(className, scrollTime, scrollContainerSelector, offset) {\\n\\n  // 如果偏移量是以em为单位，将其转换为像素\\n  let offsetValue = offset && offset.endsWith('em') ? emToPixel(parseFloat(offset)) : parseFloat(offset || \\\"0\\\");\\n\\n  // 获取待滚动元素\\n  let targetElement = document.querySelector('.' + className);\\n  if (targetElement) {\\n    let targetPosition = targetElement.getBoundingClientRect().top + \\n                        (scrollContainerSelector ? document.querySelector(scrollContainerSelector).scrollTop\\n                                                 : window.pageYOffset);\\n    targetPosition += offsetValue;\\n    // 执行滚动操作\\n    if (scrollContainerSelector) {\\n      document.querySelector(scrollContainerSelector).scrollTo({\\n        top: targetPosition,\\n        behavior: scrollTime > 0 ? \\\"smooth\\\" : \\\"auto\\\"\\n      });\\n    } else {\\n      window.scrollTo({\\n        top: targetPosition,\\n        behavior: scrollTime > 0 ? \\\"smooth\\\" : \\\"auto\\\"\\n      });\\n    }\\n  } else {\\n    console.error(\\\"没有找到类名为 \\\" + className + \\\" 的元素\\\");\\n  }\\n}\\n\\n  exports.startup = function() {\\n    $tw.rootWidget.addEventListener(\\\"tm-scrollpage\\\", function(event) {\\n      let params = event.paramObject || {};\\n      // 如果targetElement和scrollTime参数被提供，则使用scrollToElementPosition函数\\n      if (params.targetElement && params.scrollTime) {\\n        scrollToElementPosition(params.targetElement, parseFloat(params.scrollTime), params.scrollContainerSelector, params.offset);\\n      } else {\\n        // 否则，使用原有的scrollToPosition函数\\n        if (!params.direction && !params.scrollDistance && !params.scrollTime && !params.targetElement && !params.scrollContainerSelector) {\\n          return console.error(\\\"缺少参数: direction 或 scrollDistance 或 scrollTime 或 targetElement 或 scrollContainerSelector\\\");\\n        }\\n        scrollToPosition(params);\\n      }\\n    });\\n  };\\n})();\\n\"},\"$:/modules/startup/undo.js\":{\"title\":\"$:/modules/startup/undo.js\",\"created\":\"20240501031204358\",\"modified\":\"20240501034717110\",\"module-type\":\"startup\",\"tags\":\"正则表达式查找替换\",\"type\":\"application/javascript\",\"text\":\"/*\\\\\\ntitle: $:/modules/startup/undo.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n注册撤销功能\\n\\n\\\\*/\\n(function(){\\n\\nexports.name = \\\"undo\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n  // 监听tm-undo事件\\n  $tw.rootWidget.addEventListener(\\\"tm-undo\\\", function(event) {\\n    // 获取当前tiddler的标题\\n    var sourceTitle = event.paramObject.source || $tw.wiki.getTiddlerText(\\\"$:/state/searchNreplace/source\\\");\\n    // 获取当前tiddler的文本，以便在重做时使用\\n    var currentText = $tw.wiki.getTiddlerText(sourceTitle);\\n    \\n    // 检查是否有可用的撤销文本\\n    var undoText = $tw.wiki.getTiddlerText(\\\"$:/state/searchNreplace/undo\\\");\\n    if (undoText) {\\n      // 在撤销之前，将当前状态保存到重做tiddler\\n      $tw.wiki.setText(\\\"$:/state/searchNreplace/redo\\\", \\\"text\\\", null, currentText);\\n      \\n      // 恢复源tiddler的文本到撤销文本\\n      $tw.wiki.setText(sourceTitle, \\\"text\\\", null, undoText);\\n    }\\n  });\\n};\\n\\n})();\"},\"$:/plugins/dyp/search-replace/history\":{\"title\":\"$:/plugins/dyp/search-replace/history\",\"created\":\"20250523012325837\",\"modified\":\"20250523012331766\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\"},\"$:/plugins/dyp/search-replace/readme\":{\"title\":\"$:/plugins/dyp/search-replace/readme\",\"created\":\"20250523012302039\",\"modified\":\"20250523012310506\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"; 正则表达式查找替换\\n\\n锚点跳转功能需要安装依赖插件 [[$:/plugins/dyp/tiddler-scrollpage]]\\n\"},\"$:/plugins/dyp/search-replace/usage\":{\"title\":\"$:/plugins/dyp/search-replace/usage\",\"created\":\"20250523012316354\",\"modified\":\"20250523012322706\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\"},\"$:/searchNreplace/readme\":{\"title\":\"$:/searchNreplace/readme\",\"created\":\"20240430112239493\",\"modified\":\"20240501031342896\",\"tags\":\"正则表达式查找替换\",\"text\":\"This is searchNreplace plugin for ~TiddlyWiki.\\r\\nIt provides an additional controls bar on the default tiddler's editor. Currently it only allows you to search and replace text.\\n\\n!!Basic usage\\r\\n# Put what you want to replace in the first field. This is the ''search string''.\\r\\n# Put what you want to put in place of the search string in the second field.\\r\\n# Select if you want to do want replace all occurrences by checking the global checkbox.\\r\\n# Click the replace button.\\n\\n!!Using regular expressions\\r\\nSince version 1.2 you are able to use reuglar expressions. To do so just check the `Use regex` checkbox. This allows you to powerfull search and replacements.\\n\\nYou can also use references on your replace string. Use `$1`...`$N` notation to reference capturing groups.\\n\\nFor example, if you have a list like this\\n\\n```\\r\\nA 10\\r\\nB 02\\r\\nC 20\\r\\nD 35\\r\\n```\\n\\nand you want to invert the values, use the following parameters:\\r\\n* ''search'': `(\\\\w) (\\\\d+)`\\r\\n* ''replace'': `$2 $1`\\r\\nThis will put what you have captured in the second ''capturing group'' first and the first one in the second place.\\n\\nThe regular expressions should be valid javascript regular expressions.\\n\\n!!Requirements\\r\\nIt ''requires'' at least TW5 core to 5.1.4 or newer.\\r\\n\"},\"$:/searchNreplace/styles\":{\"title\":\"$:/searchNreplace/styles\",\"created\":\"20150409181359332\",\"modified\":\"20240501031412512\",\"tags\":\"$:/tags/Stylesheet 正则表达式查找替换\",\"type\":\"text/css\",\"text\":\"  /* .tc-edit-controls */ {\\n  border: 1px solid #cccccc;\\n  border-top: 0px;\\n  padding: 4px 8px 4px 8px;\\n}\"},\"$:/searchNreplace/ui/controls\":{\"title\":\"$:/searchNreplace/ui/controls\",\"created\":\"20150409175313556\",\"list-after\":\"$:/core/ui/EditTemplate/tags\",\"modified\":\"20240501031523552\",\"tags\":\"$:/tags/EditTemplate 正则表达式查找替换\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"tc-edit-controls\\\">\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditControls]]\\\" variable=\\\"control\\\">\\n<$transclude tiddler=<<control>>>\\n</$list>\\n</div>\"},\"$:/searchNreplace/ui/controls/replace-edit-tool\":{\"title\":\"$:/searchNreplace/ui/controls/replace-edit-tool\",\"created\":\"20250523011502287\",\"modified\":\"20250523012129600\",\"tags\":\"正则表达式查找替换\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter={{{[[切换单行输入框和多行文本框]get[text]]+[match[input]]}}}>\\n{{||查找替换单行输入框}}\\n</$list>\\n<$list filter={{{[[切换单行输入框和多行文本框]get[text]]+[match[textarea]]}}}>\\n{{||查找替换多行文本框}}\\n</$list>\\n<$list filter={{{[[查找匹配到的结果数量]get[count]]+[match[yes]]}}}>\\n{{||查找匹配到的结果数量}}\\n</$list>\\n<br/>\\n\\n<span class=\\\"result-item-body\\\">\\n{{||引用查找结果汇总}}\\n</span>\\n\\n{{||查找替换是否使用正则表达式等}}\\n{{||正则表达式查找替换工具栏}}\"},\"$:/searchNreplace/ui/controls/replace\":{\"title\":\"$:/searchNreplace/ui/controls/replace\",\"created\":\"20150409182035279\",\"modified\":\"20250523010909424\",\"tags\":\"正则表达式查找替换\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter={{{[[切换单行输入框和多行文本框]get[text]]+[match[input]]}}}>\\n{{||查找替换单行输入框}}\\n</$list>\\n<$list filter={{{[[切换单行输入框和多行文本框]get[text]]+[match[textarea]]}}}>\\n{{||查找替换多行文本框}}\\n</$list>\\n<$list filter={{{[[查找匹配到的结果数量]get[count]]+[match[yes]]}}}>\\n{{||查找匹配到的结果数量}}\\n</$list>\\n<br/>\\n\\n<span class=\\\"result-item-body\\\">\\n{{||引用查找结果汇总}}\\n</span>\\n\\n{{||查找替换是否使用正则表达式等}}\\n{{||正则表达式查找替换工具栏}}\"},\"$:/state/searchNreplace/regex\":{\"title\":\"$:/state/searchNreplace/regex\",\"created\":\"20250626080045129\",\"modified\":\"20250626080225549\",\"text\":\"yes\"},\"fnote脚注插件find宏独立版\":{\"title\":\"fnote脚注插件find宏独立版\",\"created\":\"20240405060938511\",\"modified\":\"20240501133027961\",\"tags\":\"$:/tags/Macro 宏 书签 正则表达式查找替换\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define find(text, begin, end, output:\\\"simple\\\", mode:\\\"all\\\")\\n<$vars \\n  fulltext=<<__text__>>\\n  start=<<__begin__>>\\n  stop=<<__end__>>\\n  output-macro=<<__output__>>\\n>\\n<$list variable=p1 filter=\\\"[<fulltext>splitbefore<start>]\\\">\\n<$list variable=p2 filter=\\\"[<fulltext>removeprefix<p1>]\\\">\\n<$list variable=p3 filter=\\\"[<p2>splitbefore<stop>removesuffix<stop>]\\\">\\n<$macrocall $name=<<output-macro>> p=<<p3>> />\\n<$reveal type=\\\"match\\\" text=\\\"all\\\" default=<<__mode__>> >\\n<$macrocall $name=\\\"find\\\"\\n  text={{{[<p2>removeprefix<p3>removeprefix<stop>]}}}\\n  begin=<<start>>\\n  end=<<stop>>\\n  output=<<output-macro>>\\n/>\\n</$reveal>\\n</$list>\\n</$list>\\n</$list>\\n</$vars>\\n\\\\end\\n\\n\\\\define simple(p)\\n<$text text=<<__p__>> />\\n\\\\end\\n\\n\\\\define simple-list(p)\\n<li><$text text=<<__p__>>/></li>\\n\\\\end\\n\"},\"js转换为时间戳锚点按钮\":{\"title\":\"js转换为时间戳锚点按钮\",\"created\":\"20240505174502477\",\"modified\":\"20240505174758790\",\"tags\":\"正则表达式查找替换 按钮 锚点\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"查找书签转换为时间戳锚点\\\">\\n时间\\n\\n<$action-sendmessage $message=\\\"tm-replace-bookmarks\\\" title=<<currentTiddler>>/>\\n</$button>\\n</span>\"},\"showresults查找结果汇总宏\":{\"title\":\"showresults查找结果汇总宏\",\"created\":\"20240501130340196\",\"modified\":\"20240506131452433\",\"tags\":\"$:/tags/Macro 查找结果汇总 正则表达式查找替换\",\"text\":\"\\\\define showresults(filter:\\\"[<currentTiddler>]\\\", title:\\\"Empty\\\" class:\\\"\\\", emptyMessage:\\\"\\\")\\n<$vars resultDelimiter=\\\"<<result \\\">\\n<$list filter=\\\"[subfilter<__filter__>search:text:literal<resultDelimiter>limit[1]]\\\" variable=null emptyMessage=\\\"\\\" >\\n<$reveal tag=\\\"div\\\" type=\\\"nomatch\\\" default=\\\"Empty\\\" text=<<__title__>> >\\n<h4>$title$</h4>\\n</$reveal>\\n<ol class=\\\"$class$\\\">\\n<$list filter=<<__filter__>> >\\n<$macrocall $name=\\\"find\\\" \\n   text={{!!text}}\\n   begin=\\\"<<result \\\"\\n   end=\\\">>\\\"\\n   output=\\\"output-result\\\"\\n/>\\n</$list>\\n</ol>\\n</$list>\\n</$vars>\\n\\\\end\\n\\n\\\\define output-result(p)\\n<span class=\\\"result-item\\\">\\n<span class=\\\"aresult\\\"><<aresult $p$>></span>\\n<span class=\\\"aresult\\\"><<editresult $p$>></span>\\n<span class=\\\"cresult\\\"><<cresult $p$>></span>\\n</span>\\n\\\\end\"},\"切换单行输入框和多行文本框\":{\"title\":\"切换单行输入框和多行文本框\",\"created\":\"20240430135257699\",\"modified\":\"20240509115256824\",\"tags\":\"正则表达式查找替换\",\"text\":\"input\"},\"字数统计\":{\"title\":\"字数统计\",\"created\":\"20240505133846899\",\"modified\":\"20240505134123311\",\"tags\":\"导出 正则表达式查找替换\",\"text\":\"<<filter-pill \\\"[tag[字数统计]][[字数统计]]\\\" 字数统计>>\"},\"引用查找结果汇总\":{\"title\":\"引用查找结果汇总\",\"created\":\"20240501130828858\",\"modified\":\"20240506183819384\",\"tags\":\"查找结果汇总 正则表达式查找替换\",\"text\":\"<<showresults>>\"},\"批量清空查找替换\":{\"title\":\"批量清空查找替换\",\"created\":\"20240430160250446\",\"modified\":\"20250524024017026\",\"tags\":\"清空 正则表达式查找替换\",\"text\":\"<$set name=\\\"clearSearch\\\" value=\\\"\\n[[$:/state/searchNreplace/search]]\\n[[$:/state/searchNreplace/replace]]\\n[[$:/state/searchNreplace/prefix]]\\n[[$:/state/searchNreplace/suffix]]\\n[[$:/state/searchNreplace/count]]\\n[[$:/state/character-count/total]]\\n[[$:/state/character-count/words]]\\n[[$:/state/character-count/chinese]]\\n[[$:/state/character-count/punctuation]]\\n[[$:/state/character-count/letters]]\\n[[$:/state/character-count/numbers]]\\n\\\">\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=批量清空查找替换>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n清空\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n<$text text=批量清空查找替换/>\\n</span>\\n</$list>\\n\\n<$list filter=\\\"[enlist<clearSearch>]\\\" variable=\\\"clearSearch-tid\\\">\\n<$action-setfield $tiddler=<<clearSearch-tid>> $field=\\\"text\\\" $value=\\\"\\\"/>\\n</$list>\\n</$button>\\n</span>\\n\\n</$set>\"},\"撤销按钮\":{\"title\":\"撤销按钮\",\"created\":\"20240501031831294\",\"modified\":\"20240501033236367\",\"tags\":\"正则表达式查找替换\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"撤销\\\">\\n撤销\\n\\n<$action-sendmessage $message=\\\"tm-undo\\\" source=<<currentTiddler>>/>\\n\\n</$button>\\n</span>\"},\"更多设置按钮\":{\"title\":\"更多设置按钮\",\"created\":\"20240509113015603\",\"modified\":\"20240509115917625\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n\\n<$set value={{{ [<currentTiddler>addprefix[$:/temp/more-btn]] }}} name=\\\"open-more-btn\\\">\\n<span class=\\\"search-replace-btn\\\">\\n<$button popup=<<open-more-btn>> class=\\\"tc-btn-invisible\\\" tooltip=\\\"更多设置按钮\\\">\\n更多\\n</$button>\\n</span>\\n<$reveal type=\\\"popup\\\" state=<<open-more-btn>> position=\\\"aboveleft\\\" tag=\\\"div\\\" class=\\\"tc-popup-keep\\\">\\n\\n<div class=\\\"search-replace-body\\\">\\n<$transclude tiddler=\\\"更多设置按钮弹出页面\\\"/>\\n</div>\\n\\n</$reveal>\\n</$set>\"},\"更多设置按钮弹出页面\":{\"title\":\"更多设置按钮弹出页面\",\"created\":\"20240509113134181\",\"modified\":\"20240509133016253\",\"tags\":\"正则表达式查找替换\",\"text\":\"<$list filter={{{[[统计字数结果]get[words]]+[match[yes]]}}}>\\n{{||统计字数结果}}\\n</$list>\\n\\n<span class=\\\"search-replace-checkbox\\\">\\n<$checkbox default=\\\"no\\\" unchecked=\\\"no\\\" checked=\\\"yes\\\" field=\\\"words\\\" tiddler=\\\"统计字数结果\\\"> 字数</$checkbox>\\n</span>\\n\\n<span class=\\\"search-replace-btn-all\\\">\\n{{||每行添加定位锚点按钮}}\\n{{||每行清除定位锚点按钮}}\\n{{||js转换为时间戳锚点按钮}}\\n{{||粘贴复制内容到查找按钮}}\\n{{||统计字数按钮}}\\n</span>\"},\"替换内容带编辑器工具栏输入框\":{\"title\":\"替换内容带编辑器工具栏输入框\",\"created\":\"20240430151705118\",\"modified\":\"20240501030509690\",\"tags\":\"正则表达式查找替换\",\"text\":\"<$list filter=\\\"[[$:/state/searchNreplace/replace]]\\\" class=\\\"\\\" template=\\\"$:/core/ui/EditTemplate/body\\\"/>\"},\"查找匹配到的唯一结果\":{\"title\":\"查找匹配到的唯一结果\",\"created\":\"20240502025318703\",\"modified\":\"20240502031136799\",\"save\":\"yes\",\"tags\":\"正则表达式查找替换\",\"text\":\"[[$:/state/searchNreplace/quick-edit]]\\n\\n查找匹配到的唯一结果：\\n\\n<$text text={{$:/state/searchNreplace/quick-edit}}/>\"},\"查找匹配到的结果数量\":{\"title\":\"查找匹配到的结果数量\",\"count\":\"yes\",\"created\":\"20240430190414159\",\"modified\":\"20250523010903236\",\"tags\":\"正则表达式查找替换\",\"text\":\"匹配到的结果数量：<span class=\\\"countnumber\\\"><$text text={{$:/state/searchNreplace/count}}/></span>\\n\"},\"查找替换单行输入框\":{\"title\":\"查找替换单行输入框\",\"created\":\"20240430134756489\",\"modified\":\"20240509114803009\",\"tags\":\"正则表达式查找替换 输入框\",\"text\":\"<$edit-text tiddler=\\\"$:/state/searchNreplace/search\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"查找\\\"/>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/replace\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"替换\\\"/>\\n<details><summary><span class=\\\"countnumber\\\">前缀/后缀</span></summary>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/prefix\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"前缀\\\"/>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/suffix\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"后缀\\\"/>\\n</details>\"},\"查找替换多行文本框\":{\"title\":\"查找替换多行文本框\",\"created\":\"20240430134703787\",\"modified\":\"20240509102112524\",\"tags\":\"正则表达式查找替换 输入框\",\"text\":\"<$edit-text tiddler=\\\"$:/state/searchNreplace/search\\\" tag=\\\"textarea\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"查找\\\"/>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/replace\\\" tag=\\\"textarea\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"替换\\\"/>\\n<details><summary><span class=\\\"countnumber\\\">前缀/后缀</span></summary>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/prefix\\\" tag=\\\"textarea\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"前缀\\\"/>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/suffix\\\" tag=\\\"textarea\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"后缀\\\"/>\\n</details>\"},\"查找替换弹窗样式css\":{\"title\":\"查找替换弹窗样式css\",\"created\":\"20240430121259542\",\"modified\":\"20240503034806779\",\"tags\":\"样式 $:/tags/Stylesheet 正则表达式查找替换\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"/* 定义大屏宽度 */\\n.large-screen {\\n  width: 1000px;\\n}\\n\\n/* 定义小屏宽度 */\\n.small-screen {\\n  width: 350px;\\n}\\n\\n/* 媒体查询，大屏 */\\n@media (min-width: 768px) {\\n.search-replace-body {\\n  max-width: 350px; /* 最大宽度 */\\n  max-height: 80vh; /* 最大高度 */\\n  }\\n}\\n\\n/* 媒体查询，小屏 */\\n@media (max-width: 767px) {\\n.search-replace-body {\\n  max-width: 65vw; /* 最大宽度 */\\n  max-height: 50vh; /* 最大高度 */\\n  }\\n}\\n\\n.search-replace-body {\\n  padding: 10px 20px;\\n  background-color: <<colour tiddler-background>>;\\n  border-radius: 8px;  /* 圆角 */\\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 阴影 */\\n  font-size: 16px; /* 字体大小 */\\n  overflow-y: auto;\\n  -webkit-tap-highlight-color: transparent; /* 去除移动端点击高亮 */\\n}\\n\\n.search-replace-body::-webkit-scrollbar {\\n  display: none;\\n}\\n\\n/* 下拉菜单悬停背景颜色 */\\n.search-replace-body .tc-drop-down a:hover {\\n  background-color: <<colour primary>>; /* 鼠标悬停时的背景颜色 */\\n}\\n\\n.search-replace-textarea {\\n  resize: none; /* 防止用户调整大小 */\\n  /* 设置边框样式 */\\n  border: 1px solid #ddd; /* 细边框，颜色浅灰 */\\n  border-radius: 3px; /* 小的边框圆角 */\\n  margin-bottom: 5px;\\n\\n  /* 设置尺寸 */\\n  width: 100%; \\n  min-height: 30px;\\n\\n  /* 设置内边距 */\\n  padding: 8px;\\n\\n  /* 调整背景和文字颜色 */\\n  background-color: #fff; /* 背景颜色为白色 */\\n  color: #333; /* 文字颜色为深灰 */\\n\\n  /* 鼠标悬停和获取焦点时的样式 */\\n  &:hover, &:focus {\\n    border-color: #bcbcbc; /* 边框颜色稍微加深 */\\n    outline: none; /* 去除轮廓线，保持简洁 */\\n  }\\n}\\n\\n.search-replace-btn-all {\\n  display: flex;\\n  justify-content: flex-end;\\n  gap: 20px;\\n  margin-bottom: 10px;\\n}\\n\\n.search-replace-btn {\\n  opacity: 0.5;\\n  transition: opacity 0.3s ease;\\n  -webkit-tap-highlight-color: transparent;\\n  box-shadow: none;\\n  border: 1px solid #000;\\n  border-radius: 8px;\\n  text-align: center;\\n  font-size: 15px; /* 调整字体大小 */\\n  padding: 3px 6px; /* 增加内边距，让按钮更舒适 */\\n  height: auto; /* 根据内容自动调整高度 */\\n  line-height: 1; /* 调整行高，与字体大小保持一致 */\\n  display: inline-block;\\n  cursor: pointer;\\n}\\n\\n.search-replace-btn:hover {\\n  opacity: 1;\\n}\\n\\n.search-replace-checkbox {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: flex-start;\\n  align-items: center;\\n  gap: 10px;\\n}\"},\"查找替换是否使用正则表达式等\":{\"title\":\"查找替换是否使用正则表达式等\",\"created\":\"20240430134936635\",\"modified\":\"20240509114112243\",\"tags\":\"正则表达式查找替换\",\"text\":\"<span class=\\\"search-replace-checkbox\\\">\\n<$checkbox default=\\\"yes\\\" unchecked=\\\"no\\\" checked=\\\"yes\\\" field=\\\"text\\\" tiddler=\\\"$:/state/searchNreplace/global\\\"> 全局</$checkbox>\\n\\n<$checkbox default=\\\"yes\\\" unchecked=\\\"no\\\" checked=\\\"yes\\\" field=\\\"text\\\" tiddler=\\\"$:/state/searchNreplace/regex\\\"> 正则</$checkbox>\\n</span>\\n\\n<span class=\\\"search-replace-checkbox\\\">\\n<$checkbox default=\\\"input\\\" unchecked=\\\"input\\\" checked=\\\"textarea\\\" field=\\\"text\\\" tiddler=\\\"切换单行输入框和多行文本框\\\"> 多行</$checkbox>\\n<$checkbox default=\\\"no\\\" unchecked=\\\"no\\\" checked=\\\"yes\\\" field=\\\"count\\\" tiddler=\\\"查找匹配到的结果数量\\\"> 计数</$checkbox>\\n</span>\\n\"},\"查找替换是否弹出确认提示\":{\"title\":\"查找替换是否弹出确认提示\",\"created\":\"20240430125312203\",\"modified\":\"20240430125342955\",\"tags\":\"正则表达式查找替换\",\"text\":\"yes\"},\"查找替换行号内容正则表达式\":{\"title\":\"查找替换行号内容正则表达式\",\"created\":\"20240509015237540\",\"modified\":\"20240510145029407\",\"tags\":\"行号\",\"text\":\"查找所有以 `<<line-anchor \\\"数字\\\">>` 结尾的段落：\\n<<code src:\\\"\\\"\\\".*?<<line-anchor \\\"\\\\d+\\\">>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n带首行缩进的段落：\\n<<code src:\\\"\\\"\\\"　　.*?<<line-anchor \\\"\\\\d+\\\">>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n匹配确定行数的段落：\\n<<code src:\\\"\\\"\\\".*?<<line-anchor \\\"1\\\">>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n确定行数且带首行缩进的段落：\\n<<code src:\\\"\\\"\\\"　　.*?<<line-anchor \\\"1\\\">>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n\\\"\\\"\\\"\\n在正则表达式中，`.*?`是一个常见的模式，它由几个部分组成，每个部分都有特定的含义：\\n- `.`匹配任意字符（除了换行符）。\\n- `*`表示匹配前面的字符0次或多次。\\n- `?`将`*`从贪婪模式变为非贪婪模式，使得匹配尽可能少的字符。\\n\\\"\\\"\\\"\"},\"查找结果汇总\":{\"title\":\"查找结果汇总\",\"created\":\"20240501130555972\",\"modified\":\"20240506131830320\",\"tags\":\"正则表达式查找替换 查找结果汇总\",\"text\":\"# 查找结果锚点 `<<result 1>>`\\n# 查找结果跳转按钮 `<<aresult 1>>`\\n# 查找结果汇总 `<<showresults>>`\\n# 追加锚点到查找输入框 `<<editresult 1>>`\"},\"查找结果锚点宏\":{\"title\":\"查找结果锚点宏\",\"created\":\"20240501125016908\",\"modified\":\"20240520021101723\",\"tags\":\"$:/tags/Macro 正则表达式查找替换 查找结果汇总\",\"text\":\"<!-- <<result 001>> -->\\n<!-- 查找结果锚点 -->\\n\\\\define result(number)\\n<sup class=\\\"re-color\\\"><!-- {{$:/core/images/search-replace|0.9em}} -->$number$</sup><span class=\\\"result-$number$\\\"></span>\\n\\\\end\\n\\n<!-- \\n设置偏移量\\nresult-anchor\\n -->\\n\\n<!-- 查找结果跳转按钮 -->\\n\\\\define aresult(number)\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"滚动到查找结果$number$位置\\\"><span class=\\\"res-color\\\">{{$:/core/images/search-replace}}$number$</span>\\n\\n<$list filter=\\\"[<currentTiddler>!has:field[scrollpage]]\\\">\\n<$action-sendmessage $message=\\\"tm-scrollpage\\\" targetElement=\\\"result-$number$\\\" scrollTime=\\\"0\\\" offset=\\\"-10em\\\"/>\\n</$list>\\n\\n<$list filter=\\\"[<currentTiddler>field:scrollpage[yes]]\\\">\\n<$action-sendmessage $message=\\\"tm-scrollpage\\\" scrollContainerSelector=\\\".tc-scrollpage\\\" targetElement=\\\"result-$number$\\\" scrollTime=\\\"0\\\" offset=\\\"-25em\\\"/>\\n</$list>\\n\\n\\\\end\\n\\n<!-- \\n使用系统自带滚动动作tm-scroll\\n<$action-sendmessage $message=\\\"tm-scroll\\\" selector=\\\".result-$number$\\\" animationDuration=\\\"0\\\"/>\\n</$button>\\n -->\\n\\n<!-- 清除查找结果锚点 -->\\n\\\\define cresult(number)\\n\\\\define re1() <<result $number$>>\\n\\\\define re2() <<result \\\"$number$\\\">>\\n\\\\define re0() \\n<$button class=\\\"tc-btn-invisible \\\" tooltip=\\\"清除结果锚点$number$\\\">{{$:/core/images/clear-result|16px}}\\n<$action-setfield $field=\\\"text\\\" $value={{{ [{!!text}search-replace:g:regexp<re1>,<re0>search-replace:g:regexp<re2>,<re0>]}}}\\n/>\\n</$button>\\n\\\\end\\n\\n<!-- 清除当前条目所有查找结果锚点 -->\\n\\\\define cresults()\\n\\\\define re1() <<result ([^\\\\s]*)>>\\n\\\\define re0() \\n<$button class=\\\"tc-btn-invisible \\\" tooltip=\\\"清除当前条目所有结果锚点\\\">{{$:/core/images/clear-result}}\\n<$action-setfield $field=\\\"text\\\" $value={{{ [{!!text}search-replace:g:regexp<re1>,<re0>] }}}\\n/>\\n</$button>\\n\\\\end\"},\"查找结果锚点样式css\":{\"title\":\"查找结果锚点样式css\",\"created\":\"20240501132205553\",\"modified\":\"20240506190036327\",\"tags\":\"$:/tags/Stylesheet 样式 正则表达式查找替换 查找结果汇总\",\"type\":\"text/css\",\"text\":\".result-anchor {\\n  position: relative;\\n  top: -10em; /* 相对于当前位置向上移动 */\\n}\\n\\n.re-color {\\n  color: red;\\n}\\n\\n.res-color {\\n  /* color: black; */\\n  font-size: 0.8em;\\n}\\n\\n.result-item-body {\\n  display: flex; /* 使用flex布局 */\\n  flex-wrap: wrap; /* 允许换行 */\\n  max-height: 200px; /* 设置最大高度 */\\n  overflow-y: auto; /* 启用垂直滚动 */\\n  width: 100%; /* 确保容器的宽度 */\\n  align-items: flex-start; /* 垂直方向上从头开始排列 */\\n  gap: 5px; /* 减小行和列之间的间隔 */\\n  scrollbar-width: none; /* Firefox */\\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\\n}\\n\\n.result-item-body::-webkit-scrollbar {\\n  display: none; /* Chrome, Safari 和 Opera */\\n}\\n\\n.result-item {\\n  display: flex; /* 每排使用flex布局 */\\n  width: 100%; /* 每排宽度占满父容器 */\\n  justify-content: space-between; /* 每排内的按钮平均分布，两端对齐 */\\n  margin: -10px 0;\\n}\\n\\n.result-item-body button {\\n  font-size: 1.3em;\\n  flex-grow: 1; /* 按钮宽度根据父容器自动调整 */\\n  flex-basis: 0; /* 没有基础宽度，让flex-grow生效 */\\n  max-width: 100%; /* 按钮最大宽度不超过其基础宽度 */\\n  margin: 0; /* 清除外边距 */\\n  padding: 10px; /* 添加内边距 */\\n  text-align: center; /* 文本居中显示 */\\n  border-radius: 4px; /* 添加圆角 */\\n  border: none; /* 移除边框 */\\n  background-color: transparent; /* 设置背景色为透明，如果需要的话 */\\n}\"},\"查找高亮文本并清除高亮\":{\"title\":\"查找高亮文本并清除高亮\",\"created\":\"20240506181905232\",\"modified\":\"20240506182735800\",\"tags\":\"正则表达式 正则表达式查找替换\",\"text\":\"查找高亮文本并清除所有高亮：\\n\\n查找\\n<<code src:\\\"\\\"\\\"@@\\\\.tg (.*?)\\\\s*@@\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n替换\\n<<code src:\\\"\\\"\\\"$1\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n\\n查找高亮文本并清除带特定id的高亮：\\n\\n查找\\n<<code src:\\\"\\\"\\\"@@\\\\.tg (.*?)\\\\s*@@<<result 1>>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n替换\\n<<code src:\\\"\\\"\\\"$1<<result 1>>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\"},\"正则表达式查找保存唯一匹配结果按钮\":{\"title\":\"正则表达式查找保存唯一匹配结果按钮\",\"created\":\"20240502025135607\",\"modified\":\"20240502030715502\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"快速编辑唯一匹配结果\\\">\\n编辑\\n\\n<$action-sendmessage $message=\\\"tm-get-match\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} stateTitle=\\\"$:/state/searchNreplace/quick-edit\\\"/>\\n\\n<$action-setfield $tiddler=\\\"$:/state/searchNreplace/replace\\\" $field=\\\"text\\\" $value={{$:/state/searchNreplace/quick-edit}}/>\\n\\n</$button>\\n</span>\"},\"正则表达式查找替换\":{\"title\":\"正则表达式查找替换\",\"created\":\"20240430112349045\",\"modified\":\"20250523011913730\",\"tags\":\"导出\",\"text\":\"<<filter-pill \\\"[tag[正则表达式查找替换]][[正则表达式查找替换]]\\n[tag[字数统计]]\\n[tag[行号]]\\n[[$:/modules/startup/scrollpage.js]]\\n\\\" 工具-正则表达式查找替换>>\\n\\n（含JavaScript需保存刷新生效）\\n\\n[[更新记录|正则表达式查找替换更新记录]]\\n\\n[[测试条目|正则表达式查找替换测试]]\\n\\n[[动作代码汇总|正则表达式查找替换动作代码备份]]\\n\\n[[工具栏按钮配置|正则表达式查找替换工具栏]]\\n\\n[[工具栏按钮汇总|正则表达式查找替换工具栏按钮汇总]]\\n\\n[[选项框配置|查找替换是否使用正则表达式等]]\\n\\n[[输入框配置]]\\n\\n[[更多设置|预置片段按钮弹出页面]]\\n\\n[[更多设置按钮弹出页面]]\\n\\n[[操作界面配置完整版|$:/searchNreplace/ui/controls/replace]]\\n\\n[[操作界面配置精简版|精简模式界面]]\"},\"正则表达式查找替换动作代码备份\":{\"title\":\"正则表达式查找替换动作代码备份\",\"created\":\"20240501030409774\",\"modified\":\"20240502030617119\",\"tags\":\"正则表达式查找替换\",\"text\":\"查找替换：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-replace\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} replace={{$:/state/searchNreplace/replace}} global={{$:/state/searchNreplace/global}}\\nregex={{$:/state/searchNreplace/regex}} prefix={{$:/state/searchNreplace/prefix}} suffix={{$:/state/searchNreplace/suffix}}/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n计数：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-count\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} countTitle=\\\"$:/state/searchNreplace/count\\\"/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n撤销：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-undo\\\" source=<<currentTiddler>> undo={{$:/state/searchNreplace/undo}}/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n重做：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-redo\\\" source=<<currentTiddler>> redo={{$:/state/searchNreplace/redo}}/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n记录位置信息(已弃用)：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-find-positions\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} targetTitle=\\\"$:/state/searchNreplace/target\\\" currentMatchId={{$:/state/currentMatchId}}/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n添加锚点：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-add-suffix\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} countTitle=\\\"$:/state/searchNreplace/count\\\"/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n清除锚点：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-clear-suffix\\\" source=<<currentTiddler>>/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\\n保存唯一匹配结果并粘贴到替换输入框：\\n<<code src:\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-get-match\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} stateTitle=\\\"$:/state/searchNreplace/quick-edit\\\"/>\\n\\n<$action-setfield $tiddler=\\\"$:/state/searchNreplace/replace\\\" $field=\\\"text\\\" $value={{$:/state/searchNreplace/quick-edit}}/>\\n\\\"\\\"\\\" language:\\\"tw\\\">>\"},\"正则表达式查找替换工具栏\":{\"title\":\"正则表达式查找替换工具栏\",\"created\":\"20240501035200913\",\"modified\":\"20240509133051445\",\"tags\":\"正则表达式查找替换\",\"text\":\"<span class=\\\"search-replace-btn-all\\\">\\n{{||更多设置按钮}}\\n{{||正则表达式查找保存唯一匹配结果按钮}}\\n{{||批量清空查找替换}}\\n</span>\\n\\n<span class=\\\"search-replace-btn-all\\\">\\n{{||正则表达式查找添加锚点按钮}}\\n{{||正则表达式查找清除锚点按钮}}\\n{{||正则表达式查找计数按钮}}\\n</span>\\n\\n<span class=\\\"search-replace-btn-all\\\">\\n{{||预置片段按钮}}\\n{{||撤销按钮}}\\n{{||重做按钮}}\\n{{||正则表达式查找替换按钮}}\\n</span>\"},\"正则表达式查找替换工具栏按钮汇总\":{\"title\":\"正则表达式查找替换工具栏按钮汇总\",\"created\":\"20240502035010875\",\"modified\":\"20240509115958560\",\"tags\":\"正则表达式查找替换\",\"text\":\"\\\"\\\"\\\"\\n[[正则表达式查找保存唯一匹配结果按钮]]\\n[[批量清空查找替换]]\\n[[正则表达式查找添加锚点按钮]]\\n[[正则表达式查找清除锚点按钮]]\\n[[正则表达式查找计数按钮]]\\n[[预置片段按钮]]\\n[[撤销按钮]]\\n[[重做按钮]]\\n[[粘贴复制内容到查找按钮]]\\n[[正则表达式查找替换按钮]]\\n[[更多设置按钮]]\\n[[每行添加定位锚点按钮]]\\n[[每行清除定位锚点按钮]]\\n\\\"\\\"\\\"\\n\\n\\\"\\\"\\\"\\n[[$:/core/ui/Buttons/search-replace]]\\n[[$:/core/ui/Buttons/search-replace-edit-tool]]\\n\\\"\\\"\\\"\"},\"正则表达式查找替换按钮\":{\"title\":\"正则表达式查找替换按钮\",\"created\":\"20240430125020741\",\"modified\":\"20240430185035210\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"确认替换\\\">\\n替换\\n\\n<$action-confirm $message=\\\"确认替换？\\\" $prompt={{查找替换是否弹出确认提示}}>\\n\\n<$action-sendmessage $message=\\\"tm-replace\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} replace={{$:/state/searchNreplace/replace}} global={{$:/state/searchNreplace/global}}\\nregex={{$:/state/searchNreplace/regex}} prefix={{$:/state/searchNreplace/prefix}} suffix={{$:/state/searchNreplace/suffix}}/>\\n\\n</$action-confirm>\\n\\n</$button>\\n</span>\"},\"正则表达式查找替换更新记录\":{\"title\":\"正则表达式查找替换更新记录\",\"created\":\"20240501031726813\",\"modified\":\"20240520021205490\",\"tags\":\"正则表达式查找替换\",\"text\":\"# 修复了替换的内容为空值时不生效的问题，如果替换内容为空值，则删除查找内容；\\n# 增加了确认替换提示；\\n# 可选多行文本框输入；\\n# 增加了查看工具栏按钮，查看模式下修改当前条目正文内容时不会影响阅读位置；\\n# 新增添加前缀和后缀功能，存在前缀后缀的值则执行添加而不是替换动作；\\n# 新增清空输入内容按钮；\\n# 新增查找计数；\\n# 新增开启/关闭编辑器工具栏查找替换按钮；\\n# 经测试，粘贴动作仅在电脑端生效，而且无法去除弹窗信息确认，手机端没反应；\\n# 按钮不太灵敏，有时要点两下才有反应；\\n# 新增撤销重做按钮。\\n# 使用js列出所有查找结果和快速跳转上一个下一个结果的功能未实现；已通过在查找结果后添加锚点进行条目内跳转，并可以单个删除锚点或一键清除所有锚点；跳转动作仅在查看模式下生效。\\n# 新增快速编辑功能，点击查找后如果只有唯一匹配结果，将会缓存这个结果，再点击编辑按钮，匹配结果内容将会被放置到替换输入框；\\n# 增加预置片段按钮，可以在弹窗页面 [[预置片段按钮弹出页面]] 添加更多设置；\\n# 可切换精简界面和完整界面，精简界面有bug暂时取消；\\n# 调整了操作界面大小，大屏最大宽度为350px，小屏最大宽度为65vw；\\n# 简化了定位锚点的显示，取消了图标和“00”前缀；\\n# 优化了 `replace.js`，使替换动作更流畅；\\n# 新增字数统计功能；\\n# 定位后点击对应的小编辑按钮，自动执行动作追加对应锚点到查找输入框，点击编辑按钮可抓取整个匹配内容到替换输入框，编辑完内容后点击替换则存回当前条目当前位置；\\n# 调整了定位锚点汇总样式；\\n# 点击清空按钮时计数结果和统计字数也清空；\\n# 新增给每一行/段落添加唯一锚点，空行不计数；\\n# 前缀后缀输入框可折叠；\\n# 不常用按钮和设置收入到 [[更多设置按钮弹出页面]]；\\n# 优化页面工具栏图标样式；\\n# 替换滚动动作为tm-scrollpage。\"},\"正则表达式查找替换测试\":{\"title\":\"正则表达式查找替换测试\",\"br\":\"2\",\"created\":\"20240501130212499\",\"modified\":\"20240509115651936\",\"tags\":\"正则表达式查找替换\",\"text\":\"　　莫言和你聊小说：真正的长篇小说，知音难觅\\n\\n　　莫言读书会@新文艺推介 2022-07-17 12:02\\n\\n　　大约是两年前，《长篇小说选刊》创刊，让我写几句话，推辞不过，斗胆写道：“长度、密度和难度，是长篇小说的标志，也是这伟大文体的尊严。”\\n\\n　　所谓长度，自然是指小说的篇幅。没有二十万字以上的篇幅，长篇小说就缺少应有的威严。就像金钱豹子，虽然也勇猛，虽然也剽悍，但终因体形稍逊，难成山中之王。\\n\\n　　我当然知道许多篇幅不长的小说其力量和价值都胜过某些臃肿的长篇，我当然也知道许多篇幅不长的小说已经成为经典，但那种犹如长江大河般的波澜壮阔之美，却是那些精巧的篇什所不具备的。\\n\\n　　长篇就是要长，不长算什么长篇？要把长篇写长，当然很不容易。我们惯常听到的是把长篇写短的呼吁，我却在这里呼吁：长篇就是要往长里写！\\n\\n　　当然，把长篇写长，并不是事件和字数的累加，而是一种胸中的大气象，一种艺术的大营造。\\n\\n　　那些能够营造精致的江南园林的建筑师，那些在假山上盖小亭子的建筑师，当然也很了不起，但他们大概营造不来故宫和金字塔，更主持不了万里长城那样的浩大工程。\\n\\n　　一个善写长篇小说的作家，并不一定要走短—中—长的道路，尽管许多作家包括我自己都是走的这样的道路。许多伟大的长篇小说作者，一开始上手就是长篇巨著，譬如曹雪芹、罗贯中等。\\n\\n　　我认为一个作家能否写出并且能够写好长篇小说，关键的是要具有“长篇胸怀”。“长篇胸怀”者，胸中有大沟壑、大山脉、大气象之谓也。要有莽荡之气，要有容纳百川之涵。\\n\\n　　所谓大家手笔，正是胸中之大沟壑、大山脉、大气象的外在表现也。大苦闷、大悲悯、大抱负、天马行空般的大精神，落了片白茫茫大地真干净的大感悟——这些都是“长篇胸怀”之内涵也。\\n\\n　　大苦闷、大抱负、大精神、大感悟，都不必展开来说，我想就“大悲悯”多说几句。\\n\\n　　长篇小说是包罗万象的庞大文体，这里边有羊羔也有小鸟，有狮子也有鳄鱼。你不能因为狮子吃了羊羔或者鳄鱼吞了小鸟就说它们不悲悯。你不能说它们捕杀猎物时展现了高超技巧、获得猎物时喜气洋洋就说它们残忍。\\n\\n　　只有羊羔和小鸟的世界不成世界；只有好人的小说不是小说。即便是羊羔，也要吃青草；即便是小鸟，也要吃昆虫；即便是好人，也有恶念头。站在高一点的角度往下看，好人和坏人，都是可怜的人。\\n\\n　　小悲悯只同情好人，大悲悯不但同情好人，而且也同情恶人。\\n\\n　　编造一个苦难故事，对于以写作为职业的人来说，不算什么难事，但那种在苦难中煎熬过的人才可能有的命运感，那种建立在人性无法克服的弱点基础上的悲悯，却不是能够凭借才华编造出来的。\\n\\n　　只描写别人留给自己的伤痕，不描写自己留给别人的伤痕，不是悲悯，甚至是无耻。只揭示别人心中的恶，不袒露自我心中的恶，不是悲悯，甚至是无耻。\\n\\n　　只有正视人类之恶，只有认识到自我之丑，只有描写了人类不可克服的弱点和病态人格导致的悲惨命运，才是真正的悲剧，才可能具有“拷问灵魂”的深度和力度，才是真正的大悲悯。\\n\\n　　长篇越来越短，与流行有关，与印刷与包装有关，与利益有关，与浮躁心态有关，也与那些盗版影碟有关。\\n\\n　　从苦难的生活中（这里的苦难并不仅仅是指物质生活的贫困，而更多是一种精神的苦难）和个人性格缺陷导致的悲剧中获得创作资源可以写出大作品，从盗版影碟中攫取创作资源，大概只能写出背离中国经验和中国感受的也许是精致的小玩意儿。\\n\\n　　也许会有人说，在当今这个时代，太长的小说谁人要看？其实，要看的人，再长也看；不看的人，再短也不看。长，不是影响那些优秀读者的根本原因。\\n\\n　　长不是抻面，不是注水，不是吹气，不是泡沫，不是通心粉，不是灯芯草，不是纸老虎；长是真家伙，是仙鹤之腿，不得不长，是不长不行的长，是必须这样长的长。万里长城，你为什么这样长？是背后壮阔的江山社稷要它这样长。\\n\\n　　长篇小说的密度，是指密集的事件、密集的人物、密集的思想。思想之潮汹涌澎湃，裹挟着事件、人物，排山倒海而来，让人目不暇接，不是那种用几句话就能说清的小说。\\n\\n　　密集的事件当然不是事件的简单罗列，当然不是流水账。海明威的“冰山理论”对这样的长篇小说同样适用。\\n\\n　　密集的人物当然不是沙丁鱼罐头式的密集，而是依然要个个鲜活、人人不同。一部好的长篇小说，主要人物应该能够进入文学人物的画廊，即便是次要人物，也应该是有血有肉的活人，而不是为了解决作家的叙述困难而拉来凑数的道具。\\n\\n　　密集的思想，是指多种思想的冲突和绞杀。如果一部小说只有所谓的善与高尚，或者只有简单的、公式化的善恶对立，那这部小说的价值就值得怀疑。\\n\\n　　好的长篇应该是“众声喧哗”，应该是多义多解，很多情况下应该与作家的主观意图背道而驰。\\n\\n　　在善与恶之间、美与丑之间、爱与恨之间，应该有一个模糊地带，而这里也许正是小说家施展才华的广阔天地。\\n\\n　　也可以说，具有密度的长篇小说，应该是可以被一代代人误读的小说。这里的误读当然是针对着作家的主观意图而言。文学的魅力，就在于它能被误读。一部作家的主观意图和读者的读后感觉吻合了的小说，可能是一本畅销书，但不会是一部“伟大的小说”。\\n\\n　　长篇小说的难度，是指艺术上的原创性。原创的总是陌生的，总是要求读者动点脑子的，总是要比阅读那些轻软滑溜的小说来得痛苦和艰难。难也是指结构上的难，语言上的难，思想上的难。\\n\\n　　长篇小说的结构，当然可以平铺直叙，这是那些批判现实主义的经典作家的习惯写法。这也是一种颇为省事的写法。\\n\\n　　结构从来就不是单纯的形式，它有时候就是内容。长篇小说的结构是长篇小说艺术的重要组成部分，是作家丰沛想象力的表现。好的结构，能够凸现故事的意义，也能够改变故事的单一意义。\\n\\n　　好的结构，可以超越故事，也可以解构故事。前几年我还说过，“结构就是政治”。如果要理解“结构就是政治”，请看我的《酒国》和《天堂蒜薹之歌》。我们之所以在那些长篇经典作家之后，还可以写作长篇，从某种意义上说，就在于我们还可以在长篇的结构方面展示才华。\\n\\n　　长篇小说的语言之难，当然是指具有鲜明个性的、陌生化的语言。但这陌生化的语言，应该是一种基本驯化的语言，不是故意地用方言土语制造阅读困难。\\n\\n　　方言土语自然是我们语言的富矿，但如果只局限在小说的对话部分使用方言土语，并希望借此实现人物语言的个性化，则是一个误区。把方言土语融入叙述语言，才是对语言的真正贡献。\\n\\n　　长篇小说的长度、密度和难度，造成了它的庄严气象。它排斥投机取巧，它笨拙、大度、泥沙俱下，没有肉麻和精明，不需献媚和撒娇。\\n\\n　　在当今这个时代，读者多追流俗，不愿动脑子。\\n\\n　　这当然没有什么不对。真正的长篇小说，知音难觅，但知音难觅是正常的。伟大的长篇小说，没有必要像宠物一样遍地打滚，也没有必要像鬣狗一样结群吠叫。\\n\\n　　它应该是鲸鱼，在深海里孤独地遨游着，响亮而沉重地呼吸着，波浪翻滚地交配着，血水浩荡地生产着，与成群结队的鲨鱼，保持着足够的距离。\\n\\n　　长篇小说不能为了迎合这个煽情的时代而牺牲自己应有的尊严。长篇小说不能为了适应某些读者而缩短自己的长度，减小自己的密度，降低自己的难度。我就是要这么长，就是要这么密，就是要这么难。愿意看就看，不愿意看就不看。哪怕只剩下一个读者，我也要这样写。\\n\\n　　本文选自莫言散文集《月光如水，马身如漆》。\\n\\n　　全文完\"},\"正则表达式查找添加锚点按钮\":{\"title\":\"正则表达式查找添加锚点按钮\",\"created\":\"20240501122026040\",\"modified\":\"20240502015418899\",\"tags\":\"正则表达式查找替换 按钮 锚点\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"查找结果添加跳转锚点\\\">\\n定位\\n\\n<$action-sendmessage $message=\\\"tm-add-suffix\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} countTitle=\\\"$:/state/searchNreplace/count\\\"/>\\n\\n</$button>\\n</span>\"},\"正则表达式查找清除锚点按钮\":{\"title\":\"正则表达式查找清除锚点按钮\",\"created\":\"20240501123848794\",\"modified\":\"20240502015357444\",\"tags\":\"正则表达式查找替换 按钮 锚点\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"清除所有锚点\\\">\\n取消\\n\\n<$action-sendmessage $message=\\\"tm-clear-suffix\\\" source=<<currentTiddler>>/>\\n\\n</$button>\\n</span>\"},\"正则表达式查找计数按钮\":{\"title\":\"正则表达式查找计数按钮\",\"created\":\"20240430184642226\",\"modified\":\"20240501155514824\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"查找并计数\\\">\\n查找\\n\\n<$action-sendmessage $message=\\\"tm-count\\\" source=<<currentTiddler>> search={{$:/state/searchNreplace/search}} regex={{$:/state/searchNreplace/regex}} countTitle=\\\"$:/state/searchNreplace/count\\\"/>\\n\\n</$button>\\n</span>\"},\"每行添加定位锚点按钮\":{\"title\":\"每行添加定位锚点按钮\",\"created\":\"20240508094152704\",\"modified\":\"20240508094522424\",\"tags\":\"正则表达式查找替换 按钮 锚点 行号\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"每行添加定位锚点\\\">\\n行号\\n\\n<$action-sendmessage $message=\\\"tm-add-line-anchors\\\" title=<<currentTiddler>>/>\\n</$button>\\n</span>\"},\"每行清除定位锚点按钮\":{\"title\":\"每行清除定位锚点按钮\",\"created\":\"20240509015610942\",\"modified\":\"20240509015634386\",\"tags\":\"正则表达式查找替换 按钮 锚点 行号\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"每行清除定位锚点\\\">\\n清除\\n\\n<$action-sendmessage $message=\\\"tm-clear-line-anchors\\\" title=<<currentTiddler>>/>\\n</$button>\\n</span>\"},\"添加行号测试\":{\"title\":\"添加行号测试\",\"created\":\"20240508094305122\",\"modified\":\"20240509121711440\",\"tags\":\"行号\",\"text\":\"第一行<<line-anchor \\\"1\\\">>\\n\\n　　第二行，首行缩进了两字符。<<line-anchor \\\"2\\\">>\\n\\n第三行<<line-anchor \\\"3\\\">>\\n\\n随便写点什么，这是一个长句子，换行了，相当于段落。随便写点什么，这是一个长句子，换行了，相当于段落。随便写点什么，这是一个长句子，换行了，相当于段落。随便写点什么，这是一个长句子，换行了，相当于段落。<<line-anchor \\\"4\\\">>\\n\\n　　这是第五行，首行缩进了两字符。<<line-anchor \\\"5\\\">>\"},\"粘贴复制内容到查找按钮\":{\"title\":\"粘贴复制内容到查找按钮\",\"created\":\"20240430195927787\",\"modified\":\"20240501155431817\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"粘贴复制内容到查找输入框\\\">\\n粘贴\\n\\n<$action-sendmessage $message=\\\"tm-paste\\\" pasteTitle=\\\"$:/state/searchNreplace/search\\\"/>\\n\\n</$button>\\n</span>\"},\"粘贴复制内容测试\":{\"title\":\"粘贴复制内容测试\",\"created\":\"20240430193009633\",\"modified\":\"20240501163808358\",\"tags\":\"正则表达式查找替换 测试\",\"text\":\"<$button class=\\\"tc-btn-invisible search-replace-btn\\\" tooltip=\\\"粘贴剪贴板内容\\\">\\n<$action-sendmessage $message=\\\"tm-paste\\\" pasteTitle=\\\"$:/state/ClipboardContent\\\"/>粘贴剪贴板内容\\n</$button>\\n\\n<!-- 创建一个新的tiddler来显示剪贴板内容 -->\\n<$edit-text tiddler=\\\"$:/state/ClipboardContent\\\" placeholder=\\\"剪贴板内容将显示在这里\\\" field=\\\"text\\\" tags=\\\"clipboard\\\" class=\\\"search-replace-textarea\\\"/>\\n\\n输出结果：\\n\\n<!-- 或者，如果你已经有一个tiddler来保存剪贴板内容，你可以这样显示它 -->\\n<$text text={{$:/state/ClipboardContent}} />\"},\"精简模式界面\":{\"title\":\"精简模式界面\",\"created\":\"20240502084225038\",\"modified\":\"20240502114225591\",\"simple\":\"no\",\"tags\":\"正则表达式查找替换\",\"text\":\"<$edit-text tiddler=\\\"$:/state/searchNreplace/search\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"查找\\\"/>\\n<$edit-text tiddler=\\\"$:/state/searchNreplace/replace\\\" tag=\\\"input\\\" class=\\\"search-replace-textarea\\\" default=\\\"\\\" placeholder=\\\"替换\\\"/>\\n\\n<span class=\\\"search-replace-btn-all\\\">\\n{{||撤销按钮}}\\n{{||重做按钮}}\\n{{||正则表达式查找替换按钮}}\\n</span>\"},\"统计字数按钮\":{\"title\":\"统计字数按钮\",\"created\":\"20240505132724787\",\"modified\":\"20240505133718603\",\"tags\":\"按钮 字数统计\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"统计字数\\\">\\n字数\\n\\n<$action-sendmessage $message=\\\"tm-count-characters\\\" title=<<currentTiddler>>/>\\n\\n</$button>\\n</span>\"},\"统计字数样式css\":{\"title\":\"统计字数样式css\",\"created\":\"20240505134727627\",\"modified\":\"20240505135410466\",\"tags\":\"字数统计 样式 $:/tags/Stylesheet\",\"text\":\".countnumber {\\n  font-size: 0.9em;\\n  color: #4a90e2; /* <<colour code-foreground>>; */\\n}\"},\"统计字数结果\":{\"title\":\"统计字数结果\",\"created\":\"20240505132855252\",\"modified\":\"20250523012108236\",\"tags\":\"字数统计\",\"words\":\"yes\",\"text\":\"\\\"\\\"\\\"\\n共计：<span class=\\\"countnumber\\\">{{$:/state/character-count/total}}</span> 个字符\\n包含：<span class=\\\"countnumber\\\">{{$:/state/character-count/words}}</span> 个字数\\n\\\"\\\"\\\"\\n<span class=\\\"countnumber\\\">{{$:/state/character-count/chinese}}</span> 个汉字\\n<span class=\\\"countnumber\\\">{{$:/state/character-count/punctuation}}</span> 个标点(全角)\\n<br/>\\n<span class=\\\"countnumber\\\">{{$:/state/character-count/letters}}</span> 个字母\\n<span class=\\\"countnumber\\\">{{$:/state/character-count/numbers}}</span> 个数字\"},\"行号\":{\"title\":\"行号\",\"created\":\"20240508094535636\",\"modified\":\"20240509114120949\",\"tags\":\"导出 正则表达式查找替换\",\"text\":\"<<filter-pill \\\"[tag[行号]][[行号]]\\\" 添加行号>>\"},\"输入框配置\":{\"title\":\"输入框配置\",\"created\":\"20240509114521530\",\"modified\":\"20240509114643433\",\"tags\":\"正则表达式查找替换\",\"text\":\"[[查找替换单行输入框]]\\n\\n[[查找替换多行文本框]]\\n\\n[[切换单行输入框和多行文本框]]\\n\\n[[替换内容带编辑器工具栏输入框]]\"},\"追加锚点到查找输入框宏\":{\"title\":\"追加锚点到查找输入框宏\",\"created\":\"20240506130140881\",\"modified\":\"20240506184806864\",\"tags\":\"查找结果汇总 $:/tags/Macro 正则表达式查找替换\",\"text\":\"<!-- 追加锚点到查找输入框 -->\\n\\\\define editresult(number)\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"编辑查找结果$number$\\\">{{$:/core/images/edit-button|0.9em}}\\n<$action-setfield $tiddler=\\\"$:/state/searchNreplace/search\\\" text={{{[[$:/state/searchNreplace/search]get[text]addsuffix[<<result ]addsuffix<__number__>addsuffix[>>]]}}}/>\\n</$button>\\n\\\\end\\n\\n<<editresult 1>>\"},\"重做按钮\":{\"title\":\"重做按钮\",\"created\":\"20240501032152974\",\"modified\":\"20240501033837344\",\"tags\":\"正则表达式查找替换\",\"text\":\"\\\\whitespace trim\\n<span class=\\\"search-replace-btn\\\">\\n<$button class=\\\"tc-btn-invisible\\\" tooltip=\\\"重做\\\">\\n重做\\n\\n<$action-sendmessage $message=\\\"tm-redo\\\" source=<<currentTiddler>>/>\\n\\n</$button>\\n</span>\"},\"预置片段按钮\":{\"title\":\"预置片段按钮\",\"created\":\"20240502033958435\",\"modified\":\"20240509133126942\",\"tags\":\"正则表达式查找替换 按钮\",\"text\":\"\\\\whitespace trim\\n\\n<$set value={{{ [<currentTiddler>addprefix[$:/temp/stamp-btn]] }}} name=\\\"open-stamp-btn\\\">\\n<span class=\\\"search-replace-btn\\\">\\n<$button popup=<<open-stamp-btn>> class=\\\"tc-btn-invisible\\\" tooltip=\\\"选择输入预置片段\\\">\\n预置\\n</$button>\\n</span>\\n<$reveal type=\\\"popup\\\" state=<<open-stamp-btn>> position=\\\"aboveright\\\" tag=\\\"div\\\" class=\\\"tc-popup-keep\\\">\\n\\n<div class=\\\"search-replace-body\\\">\\n<$transclude tiddler=\\\"预置片段按钮弹出页面\\\"/>\\n</div>\\n\\n</$reveal>\\n</$set>\\n\\n<!-- \\n弹出位置\\nbelowleft\\naboveright\\n -->\"},\"预置片段按钮弹出页面\":{\"title\":\"预置片段按钮弹出页面\",\"created\":\"20240502035308565\",\"modified\":\"20240509115844856\",\"tags\":\"正则表达式查找替换\",\"text\":\"<$transclude tiddler=\\\"查找替换行号内容正则表达式\\\"/>\\n\\n<$transclude tiddler=\\\"正则表达式匹配sidenote并替换内容\\\"/>\"}}}"}