{"title":"$:/plugins/bj/tiddlyclip","author":"Jeffrey Wilkinson (aka BJ)","core-version":">=5.1.17","dependents":"","description":"include web content","list":"readme LICENSE","plugin-type":"plugin","revision":"0","source":"https://github.com/buggyj/tiddlyclip-plugin","type":"application/json","version":"02.0.01","text":"{\"tiddlers\":{\"$:/plugins/bj/tiddlyclip/LICENSE\":{\"text\":\"The MIT License (MIT)\\n\\nCopyright (c) 2014 - 2021 Jeffrey Wikinson aka buggyj or bj\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\nsubject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\",\"type\":\"text/plain\",\"title\":\"$:/plugins/bj/tiddlyclip/LICENSE\"},\"$:/plugins/bj/tiddlyclip/tidpaste.js\":{\"text\":\"tiddlyclip={hello:\\\"hello\\\"};\\n\\n(function(){\\ntiddlyclip.modules={};\\n \\nvar log = function (x) {\\n\\talert(x);\\n}\\n\\tfunction status (param) {\\n\\t\\ttiddlyclip.log(param);\\n\\t\\t}\\nif (true) {\\n\\ntiddlyclip.modules.tPaste = (function () {\\n\\n\\tvar api = \\n\\t{\\n\\t\\tonLoad:onLoad,\\t\\t\\t\\tpaste:paste,\\t\\t\\t\\t\\n\\t\\thasMode:hasMode,\\t\\t\\tsetconfig:setconfig,\\n\\t\\tgetconfig:getconfig,\\t\\tdodock:dodock,\\n\\t\\thasModeBegining:hasModeBegining,setopts:setopts,\\n\\t\\tgetopts:getopts\\n\\t};\\n\\tvar   tiddlerObj, twobj,   defaults;\\n\\n\\tfunction onLoad() {\\n\\t\\ttiddlerAPI \\t= tiddlyclip.modules.tiddlerAPI;\\n\\t\\ttwobj\\t\\t= tiddlyclip.modules.twobj;\\n\\t\\tdefaults\\t= tiddlyclip.modules.defaults;\\n\\t}\\n/////////////////////////////////////////////////////////////////////////////\\n\\n function dodock(text,aux,extra) {\\n\\tvar message = document.createElement(\\\"div\\\") ,messageBox = document.getElementById(\\\"tiddlyclip-message-box\\\");\\n\\tif(messageBox) {\\n\\t\\tmessage.setAttribute(\\\"data-action\\\",\\\"dock\\\");\\n\\t\\tmessage.setAttribute(\\\"data-text\\\",text||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-aux\\\",aux||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-extra\\\",extra||document.title);\\n\\t\\t//add in the version - thru tcadapter\\n\\t\\tvar tidops = getopts();\\n\\t\\tvar noshowtids = tidops && tidops.noshowtids && tidops.noshowtids === \\\"yes\\\";\\n\\t\\tif (tiddlyclip.version && !noshowtids) {\\n\\t\\t\\tmessage.setAttribute(\\\"data-version\\\",tiddlyclip.version());\\n\\t\\t}\\n\\t\\tmessageBox.appendChild(message);\\n\\t\\t\\n\\t\\t// Create and dispatch the custom event to the extension\\n\\t\\tvar event = document.createEvent(\\\"Events\\\");\\n\\t\\tevent.initEvent(\\\"tc-send-event\\\",true,false);\\n\\t\\tmessage.dispatchEvent(event);\\n     return \\\"docked\\\";\\n\\t} else {\\n\\t\\treturn \\\"error no  extension found\\\";\\n\\t}\\n};\\n\\n\\n    var configName=\\\"\\\", config=\\\"\\\",optsName=\\\"\\\", opts=\\\"\\\";\\n\\tfunction findDefaultRule(rule) {\\n\\t\\treturn (rule.substring(0,7)==='default') ? defaults.getDefaultRule(rule):null;\\n\\t}\\n\\n\\tfunction findCategory (tableOfCats, category) {\\t\\n\\t\\tvar categoryRows = tableOfCats.split(\\\"\\\\n\\\");\\n\\t\\tvar cat = {}, tagsAndModes, pieces, catFound=false;\\n\\t\\tvar hasExt = false;\\n\\t\\t\\n\\t\\tfor (var i=0; i<categoryRows.length; i++) { \\n\\t\\t\\tpieces = categoryRows[i].split(\\\"|\\\");// row is = |Category|Tip|Tags|Rules Tid|Modes|\\n\\t\\t\\tif (pieces.length==1) continue; \\t//ingore blanklines\\n\\t\\t\\tif (pieces.length < 7) {\\n\\t\\t\\t\\talert('config table format error no of row incorrect '+categoryRows[i]);\\n\\t\\t\\t\\t return {valid:false};\\n\\t\\t\\t}\\n\\t\\t\\tif (pieces[1].substring(0,1)==='!') continue; //first row is column headings\\n\\t\\t\\tif (category == pieces[1]) {\\n\\t\\t\\t\\tcatFound = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} //loop end\\n\\t\\t\\n\\t\\tif (!catFound) {status (\\\"not found cat: \\\"+category);return {valid:false};}\\n\\t\\t\\n\\t\\tvar ruleDefs =  twobj.getTidContents(pieces[4].replace(/^\\\\[\\\\[([\\\\s\\\\S]*)\\\\]\\\\]/,\\\"$1\\\"));//remove wikiword parens if present\\n\\t\\t//if rule is not found use the default rules\\n\\t\\tif (!ruleDefs) {\\n\\t\\t\\tstatus (\\\"rules not found for cat: \\\"+category+\\\" was \\\"+pieces[4]);\\n\\t\\t\\truleDefs = findDefaultRule(pieces[4]);\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\tif (!!ruleDefs)  {\\t\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tcat = {rules:null,valid:false};\\t\\t\\n\\t\\t\\t\\tcat.rules=addSequenceOfRules(ruleDefs,category);//one or more\\n\\t\\t\\t\\tcat.modes= extractModes(pieces[5]);\\n\\t\\t\\t\\tcat.tags = pieces[3];\\n\\t\\t\\t\\tcat.tip  = pieces[2];\\n\\t\\t\\t\\tcat.valid= true;\\n\\t\\t\\t\\tstatus(\\\"found cat: \\\"+category)\\n\\t\\t\\t\\treturn cat;\\n\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\tstatus(\\\"caught error while adding rules for cat: \\\" + category);\\n\\t\\t\\t\\treturn {valid:false};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstatus (\\\"rules not found for cat: \\\"+category);\\n\\t\\treturn {valid:false}; \\n\\t}\\n\\n\\n\\tfunction setRules(cat)\\n\\t{\\n\\t\\tvar ruleDefs =  twobj.getTidContents(cat.title);\\n\\t\\t//if rule is not found use the default rules\\n\\t\\tif (!ruleDefs) {\\n\\t\\t\\tstatus (\\\"rules not found for cat: \\\"+category+\\\" was \\\"+cat.title);\\n\\t\\t\\truleDefs = findDefaultRule(cat.tile);\\n\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\tif (!!ruleDefs)  {\\t\\n\\t\\t\\ttry {\\t\\n\\t\\t\\t\\tcat.rules=addSequenceOfRules(ruleDefs);//one or more\\n\\t\\t\\t\\tstatus(\\\"found cat: \\\");\\n\\t\\t\\t\\tcat.valid =true;\\n\\t\\t\\t\\treturn cat;\\n\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\tstatus(\\\"caught error while adding rules for cat: \\\");\\n\\t\\t\\t\\treturn {valid:false};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstatus (\\\"rules not found for cat: \\\"+category);\\n\\t\\treturn {valid:false}; \\n\\t}\\n\\n\\tfunction findSection(activeSection,configTable) {\\n        var sectionStrgs;\\n\\t\\tvar content = configTable;\\n\\t\\tif (content != null) {\\n\\t\\t\\tsectionStrgs = content.split(defaults.getDefs().FOLDSTART+'['); //sections begin with a title, , followed by a table of categories\\n\\t\\t\\tif(sectionStrgs.length>1) {\\n\\t\\t\\t\\tstatus(\\\"found clip list format config\\\")\\t\\t \\n\\t\\t\\t\\tsectionStrgs.shift();\\t\\n\\t\\t\\t\\t//only load active categories \\n\\t\\t\\t\\treturn (sectionStrgs[activeSection].split('!/%%/\\\\n')[1]);//strip of section name from first line\\n\\t\\t\\t} else { \\n\\t\\t\\t\\tstatus(\\\"found straight config format\\\");\\n\\t\\t\\t\\tsectionStrgs = content.split('\\\\n!'); //sections begin with a title, eg !mysection, followed by a table of categories\\n\\t\\t\\t\\tfor (var  j = activeSection; j < sectionStrgs.length;  j++) { \\n\\t\\t\\t\\t\\tif ( sectionStrgs[j].indexOf('|') !== -1) {\\n\\t\\t\\t\\t\\t\\t// assumes that '|' means there is a def table otherwise move to next sections def table\\n\\t\\t\\t\\t\\t\\t//only load active categories\\n\\t\\t\\t\\t\\t\\treturn (sectionStrgs[j].replace(/(^\\\\|)*\\\\n/,''));//strip of section name from first line\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstatus(\\\"config tiddler missing table\\\");\\n\\t\\t\\t\\treturn ([]);//not found\\n\\t\\t\\t}\\n\\n\\t\\t}else {\\n\\t\\t\\tstatus(\\\"config tiddler not found try with default values\\\");\\n\\t\\t\\treturn defaults.getDefaultCategories().join(\\\"\\\\n\\\");\\n\\t\\t}\\n\\t}\\n//////////////////////////////////////////////////////////\\n\\tfunction extractModes(tagString) {\\n\\t\\tvar modes =[], tList = tagString.split(' ');\\n\\t\\tfor (var i=0; i< tList.length; i++) {\\n\\t\\t\\tmodes[i] = tList[i].trim();\\n\\t\\t}\\n\\t\\treturn modes;\\n\\t}\\n\\n\\tfunction hasMode (cat,mode) {\\n\\t\\t\\tif (!cat.modes) return false;\\n\\t\\tfor (var i=0; i< cat.modes.length;i++)\\n\\t\\t\\tif (mode === cat.modes[i]) return true;\\n\\t\\treturn false;\\n\\t}\\n\\tfunction hasModeBegining (cat,mode) {\\n\\t\\t\\tif (!cat.modes) return false;\\n\\t\\tfor (var i=0; i< cat.modes.length;i++)\\n\\t\\t\\tif (mode === cat.modes[i].substr(0,mode.length)) return true;\\n\\t\\treturn false;\\n\\t}\\n//////////////////////////////////////\\t\\t\\n\\tfunction addSequenceOfRules(tiddler,cat) { \\t\\t\\n\\t\\tvar ruleDefs = tiddler.trim().split(\\\"\\\\n\\\");\\n\\t\\tvar arrayOfRules =[];\\n\\t\\tvar firstRow=0,firstrule=0;\\n/*\\n        if (ruleDefs[firstRow].substring(0,2)==='|!') firstRow += 1;// row  maybe column titles, ie the string |!Title|!Body|!Tags|!Modes|\\n\\t\\tfor (var i=firstrule,j=firstRow; j<ruleDefs.length; i++,j++) {\\n\\t\\t\\tarrayOfRules[i]=new Rule(ruleDefs[j]);\\n\\t\\t}\\n*/\\n\\t\\tvar j = 0;\\n\\t\\tfor (var i = 0;i < ruleDefs.length;i++) {\\n\\t\\t\\t if (ruleDefs[i].charAt(0) !== \\\"|\\\" || ruleDefs[i].charAt(1) === \\\"!\\\") continue;//row maybe column titles, ie the string |!Title|!Body|!Tags|!Modes| or a comment\\n\\t\\t\\t arrayOfRules[j]=new Rule(ruleDefs[i]);\\n\\t\\t\\t j++;\\n\\t\\t}\\n\\n\\t\\treturn arrayOfRules;\\n\\t}\\n\\n\\tfunction Rule(defRule, modes) {\\n\\t\\t//INPUT DEF:\\n\\t\\t//defRule is a string of the form '|Title|Body|Tags|Fields|Init values|Modes|' or a struture {\\ttitle:'..', body:'..', tags:'..'}\\n\\t\\t//extracts subst patterns for title, body, tags. Also extracts modes\\n\\t\\tvar Tid;\\n\\t\\tvar whiteSpace = /^\\\\s+|\\\\s+$/g;//use trim\\n\\t\\tvar isLinked = /^\\\\[\\\\[([\\\\s|\\\\S]*)\\\\]\\\\]$/;\\n\\t\\tif ((typeof defRule) =='string' ) { //we has a row definition\\n\\t\\t\\t//remove triple quotes around any | - these were needed to stop TW thinking they were table elements\\n\\t\\t\\tvar pieces = defRule.replace(/\\\\\\\"\\\\\\\"\\\\\\\"\\\\|\\\\\\\"\\\\\\\"\\\\\\\"/g,\\\"&bar;\\\").split(\\\"|\\\");\\n\\t\\t\\tif  (pieces.length <7) {error('short:'+defRule);throw new Error('Invalid Rule');} //error malformeed TODO: inform the user\\n\\t\\t\\tvar tidops = getopts();\\n\\t\\t\\tfor (var i=1;i<7;i++) {\\n\\t\\t\\t\\tpieces[i]= pieces[i].replace(\\\"&bar;\\\",\\\"|\\\"); \\n\\t\\t\\t\\tif (pieces[i] == null) {\\n\\t\\t\\t\\t\\tif (i==1) throw new Error('Invlid Rule');//must define a name for the tid\\n\\t\\t\\t\\t} else \\tif (i!=3 && isLinked.test(pieces[i])) { // -there is a definition in a seperated tiddler - go get it\\n\\t\\t\\t\\t    var temp=pieces[i].replace (/^\\\\[\\\\[([\\\\s|\\\\S]*)\\\\]\\\\]$/,\\\"$1\\\"); //remove  brackets\\n\\t\\t\\t\\t\\t\\t temp =twobj.getTidrules(temp); //this.body contains the name of the tiddler\\n\\t\\t\\t\\t\\t\\t if (temp != null) pieces[i] = temp;\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t} else{\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif (i==6)  \\t\\t\\t\\tpieces[i] = '[{\\\"#newdata\\\":\\\"'+pieces[i]+'\\\"}]';//modes\\t\\n\\t\\t\\t\\t\\telse if (i==4||i==5)\\tpieces[i] = '['+pieces[i]+']';\\t\\n\\t\\t\\t\\t\\telse if (i==3) {\\n\\t\\t\\t\\t\\t\\t  \\n\\t\\t\\t\\t\\t\\t  if (tidops && tidops.noautoextratags && tidops.noautoextratags === \\\"yes\\\") {\\n\\t\\t\\t\\t\\t\\t\\t  if (pieces[i]) \\tpieces[i] = '[{\\\"#space\\\":\\\" \\\"},{\\\"$tags\\\":\\\"((*@exists($tags)*??*$tags*))((*@exists($tags)*??*#space*))'+pieces[i]+'\\\"}]'; \\n\\t\\t\\t\\t\\t\\t\\t  else \\t\\t\\t\\tpieces[i] ='[]'; // don't modify/create\\n\\t\\t\\t\\t\\t\\t  } else {\\n\\t\\t\\t\\t\\t\\t\\t  if (pieces[i]) \\tpieces[i] = '[{\\\"#space\\\":\\\" \\\"},{\\\"$tags\\\":\\\"((*@exists($tags)*??*$tags*))((*@exists($tags)*??*#space*))((*@exists(@extraTags)*??*@extraTags*)) '+pieces[i]+'\\\"}]'; \\n\\t\\t\\t\\t\\t\\t\\t  else \\t\\t\\t\\tpieces[i] ='[{\\\"$tags\\\":\\\"((*@exists(@extraTags)*??*@extraTags*)) ((*@abort(@extraTags)*)) ((*@exists($tags)*??*$tags*))\\\"}]'; \\t\\t\\t\\t\\t\\t\\t  \\n\\t\\t\\t\\t\\t\\t  }\\n\\t\\t\\t\\t\\t\\t  \\n\\t\\t\\t\\t\\t   }\\n\\t\\t\\t\\t\\telse if (i==2) {\\n\\t\\t\\t\\t\\t\\tif (tidops && tidops.legacybody && tidops.legacybody === \\\"yes\\\")\\n\\t\\t\\t\\t\\t\\t \\t\\tpieces[i] = '[{\\\"#newdata\\\":\\\"'+pieces[i]+'\\\"}]';//text\\t\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\tpieces[i] =  JSON.stringify([{\\\"#newdata\\\":pieces[i].replaceAll(\\\"\\\\\\\\n\\\",\\\"\\\\n\\\")}]);//text\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\t\\n\\t\\t\\t\\t\\telse if (i==1){\\n\\t\\t\\t\\t\\t\\t  if (pieces[i]) \\tpieces[i] = '[{\\\"$title\\\":\\\"'+pieces[i]+'\\\"}]';\\n\\t\\t\\t\\t\\t\\t  else \\t\\t\\t\\tpieces[i] ='[]'; // don't modify/create\\n\\t\\t\\t\\t\\t   }  \\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tthis.title =pieces[1];\\n\\t\\t\\tthis.body  =pieces[2];\\n\\t\\t\\tthis.tags = pieces[3];\\n\\t\\t\\tthis.fields =pieces[4]; \\n\\t\\t\\tthis.InitVals=pieces[5];\\t\\n\\t\\t\\tthis.modes =pieces[6];\\n\\t\\t}\\t\\n\\t\\telse { // we are passed a structure\\n\\t\\t\\tthis.title =defRule.title;\\n\\t\\t\\tthis.body  =defRule.body;\\n\\t\\t\\tthis.tags  =defRule.tags;\\n\\t\\t\\tthis.fields ='';\\n\\t\\t\\tthis.InitVals=\\\"\\\";\\t\\n\\t\\t\\tthis.modes = modes;\\t\\n\\t\\t}\\t\\n\\t}\\n\\n\\tfunction userInput(source){ //replace  % delimited strings with user input\\n\\n\\t\\treturn source.replace(/%\\\\[\\\\$(.*?)\\\\]%/g,function(m,key,offset,str){\\n\\t\\t\\t\\n\\t\\t\\tvar parts=key.split(\\\"::\\\");\\n\\t\\t\\tvar userString={value:\\\" \\\"};\\n\\t\\t\\t//alert(parts[0]+\\\"::\\\"+parts[1]);\\n\\t\\t\\tif (parts.length !==2) {\\n\\t\\t\\t\\t//use as a single field\\n\\t\\t\\t\\treturn  m;\\n\\t\\t\\t}\\n\\t\\t\\t//tcBrowser.UserInputDialog(parts[1],userString);\\n\\t\\t\\t\\n\\t\\t\\treturn (userString.value);\\n\\t\\t}\\n\\t)};\\n\\t function decodeutf8(source) {\\n\\n\\t\\t var chr1,chr2,chr3,result=\\\"\\\",i=0;\\n\\t\\t while (i <source.length){\\n\\t\\t\\t chr1= source.charCodeAt(i);\\n\\t\\t\\t if (chr1<128) {result+= String.fromCharCode(chr1);i++;}\\n\\t\\t\\t else {\\n\\t\\t\\t\\t chr2=source.charCodeAt(i+1);\\n\\t\\t\\t\\t if ((chr1 > 191) && (chr1 < 224)){result+= String.fromCharCode(((chr1 & 31) << 6) | (chr2 & 63));i+=2;}\\n\\t\\t\\t\\t else {\\n\\t\\t\\t\\t\\t chr3=source.charCodeAt(i+2);\\n\\t\\t\\t\\t\\t result+= String.fromCharCode(((chr1 & 15) << 12) | ((chr2 & 63) << 6) | (chr3 & 63));\\n\\t\\t\\t\\t\\t i+=3;\\n\\t\\t\\t\\t }\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t return result;\\n\\t}\\n\\n\\tfunction firstRemoteTid(pageData) {\\n\\t\\tpageData.remoteTidIndex = 0;\\n\\t\\treturn pageData.remoteTidArr[0];\\n\\t}\\n\\t\\n\\tfunction hasNextRemoteTid(pageData) {//alert(api.remoteTidArr.length + \\\" len \\\"+api.remoteTidIndex );\\n\\t\\treturn (pageData.remoteTidIndex < pageData.remoteTidArr.length);\\n\\t}\\n\\t\\n\\tfunction nextRemoteTid(pageData) {\\n\\t\\tpageData.remoteTidIndex += 1;\\n\\t\\tif (pageData.remoteTidIndex === pageData.remoteTidArr.length) return null;\\n\\t\\treturn pageData.remoteTidArr[pageData.remoteTidIndex];\\t\\n\\t}\\t\\n//  BJ! TODO ADD A LOG THAT IS ONLY WRITTEN WHEN SAVING THE TW - this needs to be done in the finish() function of the shim\\n    function performAction(cat,pageData) {\\n\\t\\tdefaults.defaultCommands[cat].command(pageData);\\n\\t}\\n\\tfunction getconfig() {\\n\\t\\tif (config) return config;\\n\\t\\tif (!configName) return twobj.getTidContents(\\\"TiddlyClipConfig\\\");\\n\\t\\treturn twobj.getTidContents(configName)||null; \\n\\t\\t\\n\\t}\\n\\tfunction setconfig (text,name) {\\n\\t\\tconfig = text;\\n\\t\\tconfigName = name;\\n\\t}\\n\\tfunction loadOpts(ClipOpts) {\\n\\t\\t\\t//load additional prefs from targetTW\\t\\t\\n\\t\\t\\tvar pieces =ClipOpts, opts={};\\n\\t\\t\\tif (!pieces) {\\n\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tpieces.split(/\\\\r?\\\\n/mg).forEach(function(line) {\\n\\t\\t\\t\\tif(line.charAt(0) !== \\\"#\\\") {\\n\\t\\t\\t\\t\\tvar p = line.indexOf(\\\":\\\");\\n\\t\\t\\t\\t\\tif(p !== -1) {\\n\\t\\t\\t\\t\\t\\tvar field = line.substr(0, p).trim(),\\n\\t\\t\\t\\t\\t\\t\\tvalue = line.substr(p+1).trim();\\n\\t\\t\\t\\t\\t\\topts[field] = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn opts;\\n\\t\\t };\\n\\t\\t \\n\\tfunction getopts() {\\n\\t\\tif (opts) return opts;\\n\\t\\tif (!optsName) return twobj.getTiddlerData(\\\"TiddlyClipOpts\\\");\\n\\t\\treturn twobj.getTiddlerData(optsName)||null; \\n\\t}\\n\\tfunction setopts (op,name) {\\n\\t\\topts = loadOpts(op);\\n\\t\\toptsName = name;\\n\\t}\\t\\n\\t// This is the function called when clicking the context menu item.\\n\\tfunction paste(catName,pageData, section, substitutionTiddler ,setCat)\\n\\t{  \\n\\t\\tvar cat;\\n\\t\\t\\n\\t\\tstatus (\\\"paste enter\\\");\\n\\t\\tif (!setCat) {\\n\\t\\t\\tif (substitutionTiddler) {\\n\\t\\t\\t\\tcat = findCategory (twobj.getTidContents(substitutionTiddler), catName);\\n\\t\\t\\t} else if (pageData.data.section === \\\"__sys__\\\") { //from addon - change of focused tw\\n\\t\\t\\t\\tcat = findCategory (findSection(section,twobj.getTidContents(\\\"TiddlyClipSys\\\")), catName);\\n\\t\\t\\t} else if (pageData.data.section === \\\"__sysdock__\\\") {//from addon to solicite dock \\n\\t\\t\\t\\tvar tidclipconfigtext = twobj.getTidContents(\\\"TiddlyClipConfig\\\");\\n\\t\\t\\t\\tvar tcconf = JSON.stringify({text:tidclipconfigtext,title:'TiddlyClipConfig'});\\n\\t\\t\\t\\tvar tidclipconfigopts = twobj.getTidContents(\\\"TiddlyClipOpts\\\");\\n\\t\\t\\t\\tvar tcopts = JSON.stringify({text:tidclipconfigopts,title:'TiddlyClipOpts'});\\n\\t\\t\\t\\ttiddlyclip.modules.tPaste.setconfig(tidclipconfigtext,'TiddlyClipConfig');\\n\\t\\t\\t\\ttiddlyclip.modules.tPaste.setopts(tidclipconfigopts,'TiddlyClipOpts');\\n\\t\\t\\t\\tstatus (dodock(tcconf,tcopts));\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcat = findCategory (findSection(section,getconfig()), catName);\\n\\t\\t\\t}\\n\\t\\t\\t//find the table denoted by the section (a header in the TiddlyClipConfig ), then find the row (cat)\\n\\t\\t\\tif (!cat.valid) {\\n\\t\\t\\t\\t\\tcat = findCategory (findSection(section), catName);//look for default rule\\n\\t\\t\\t}\\n\\t\\t}else {\\n\\t\\t\\tcat = setRules(setCat);\\n\\t\\t}\\n\\t\\tif (!cat.valid) {\\t\\t\\t\\n\\t\\t\\tstatus(\\\"not valid category\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tstatus (\\\"valid category\\\");\\n\\t\\t//could check for type of cat.rules if function then run -- allows module plugin with Tw5\\n\\t\\tvar cancelled = {val:false};\\n\\t\\tvar tiddlers = [],tideditMode=[];//list of tids to store\\n\\t\\tvar catTags = cat.tags;//main config tags \\n\\t\\tvar patterns = cat.rules;\\n\\t\\tvar startrule=0;\\n\\n\\t\\tif(hasMode(cat,\\\"nosub\\\")) return;\\n\\t\\t//now loop over each tiddler to be created(defined in the category's extension entry)\\n\\t\\t//if a list of tiddlers are to be copied from a page then we will have to loop over them as well\\n\\t\\ttiddlerAPI.parserReset();\\n\\t\\tstatus (\\\"before subst loop\\\");\\n\\t\\tif (!hasModeBegining(cat,\\\"tiddler\\\"))  { //user has not selected  tiddler mode\\n\\t\\t\\tfor(var i=startrule; i<patterns.length; i++)  {\\t\\n\\t\\t\\t\\tvar tiddlerObj, writeMode;\\n\\t\\t\\t\\ttiddlerObj = new tiddlerAPI.Tiddler();\\n\\t\\t\\t\\tstatus (\\\"before subst\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\ttiddlerObj.setPageVars(pageData);\\n\\t\\t\\t\\ttiddlerObj.setNormal(patterns[i],pageData);\\n\\t\\t\\t\\ttiddlerObj.subst(patterns[i],pageData);\\n\\n\\t\\t\\t\\tstatus (\\\"after subst\\\");\\t\\n\\t\\t\\t\\t//tiddlerObj.text=userInput(tiddlerObj.text); //not used at present\\n\\t\\t\\t\\ttiddlerObj.addTags(catTags);\\n\\t\\t\\t\\tstatus (\\\"after addTags\\\");\\n\\t\\t\\t\\tif (cancelled.val==true) {return;}\\n\\t\\t\\t\\t//if (pageData.data.WriteMode !=\\\"none\\\") writeMode=pageData.data.WriteMode;\\n\\t\\t\\t\\t//add tiddlers one by one to our list of edits\\n\\t\\t\\t\\ttiddlers.push(tiddlerObj);\\n\\n\\t\\t\\t\\tstatus (\\\"after push to list\\\");\\n\\t\\t\\t}\\n\\t\\t} else { \\n\\t\\t\\tvar tid;\\n\\t\\t\\tfor (tid=firstRemoteTid(pageData); hasNextRemoteTid(pageData);tid=nextRemoteTid(pageData)){\\n\\t\\t\\t\\tif (!hasMode(cat,\\\"tiddlerscopy\\\")) {\\n\\t\\t\\t\\t\\tfor(var i=startrule; i<patterns.length; i++)  {\\t\\n\\t\\t\\t\\t\\t\\tvar tiddlerObj, writeMode;\\n\\t\\t\\t\\t\\t\\ttiddlerObj = new tiddlerAPI.Tiddler(tid);\\n\\t\\t\\t\\t\\t\\tstatus (\\\"before subst\\\");\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\ttiddlerObj.setPageVars(pageData);\\n\\t\\t\\t\\t\\t\\ttiddlerObj.setTids(patterns[i],pageData);\\n\\t\\t\\t\\t\\t\\tif (tiddlerObj.hasMode(\\\"nontid\\\")) {\\n\\t\\t\\t\\t\\t\\t\\ttiddlerObj.fields={};\\n\\t\\t\\t\\t\\t\\t\\ttiddlerObj.setPageVars(pageData);\\n\\t\\t\\t\\t\\t\\t\\ttiddlerObj.setNormal(patterns[i],pageData);\\n\\t\\t\\t\\t\\t\\t} \\n\\t\\t\\t\\t\\t\\ttiddlerObj.subst(patterns[i],pageData);\\n\\t\\t\\t\\t\\t\\tstatus (\\\"after subst\\\");\\t\\n\\t\\t\\t\\t\\t\\t//tiddlerObj.text=userInput(tiddlerObj.text); //not used at present\\n\\t\\t\\t\\t\\t\\ttiddlerObj.addTags(catTags);\\n\\t\\t\\t\\t\\t\\tstatus (\\\"after addTags\\\");\\n\\t\\t\\t\\t\\t\\tif (cancelled.val==true) {return;}\\n\\t\\t\\t\\t\\t\\t//if (pageData.data.WriteMode !=\\\"none\\\") writeMode=pageData.data.WriteMode;\\n\\t\\t\\t\\t\\t\\t//add tiddlers one by one to our list of edits\\n\\t\\t\\t\\t\\t\\ttiddlers.push(tiddlerObj);\\n\\n\\t\\t\\t\\t\\t\\tstatus (\\\"after push to list\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\ttiddlerObj=new tiddlerAPI.Tiddler(tid);\\n\\t\\t\\t\\t\\tvar writeMode;//no editmode\\n\\t\\t\\t\\t\\ttiddlerObj.addTags(catTags);\\n\\t\\t\\t\\t\\ttiddlers.push(tiddlerObj);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\tif(hasMode(cat,\\\"immediate\\\")) {\\n\\t\\t\\tstatus (\\\"before immediate tids to tw\\\");\\n\\t\\t\\tvar tidimmdiate=[];\\n\\t\\t\\tfor (var i =0; i< tiddlers.length; i++) {\\n\\t\\t\\t\\ttidimmdiate.push(twobj.immediatetids(tiddlers[i]));\\n\\t\\t\\t}\\n\\t\\t\\treturn tidimmdiate;\\n\\t\\t}\\n\\t\\tif(hasMode(cat,\\\"nosave\\\")) return;\\n\\t\\tstatus (\\\"before adding to tw\\\");\\n\\t\\tvar tidnames=[];\\n\\t\\tfor (var i =0; i< tiddlers.length; i++) {\\n\\t\\t\\tif (!tiddlers[i].noSave()){\\n\\t\\t\\t\\taddTiddlerToTW(tiddlers[i]);\\n\\t\\t\\t\\tif(tiddlers[i].hasMode(\\\"open\\\")) tidnames.push(tiddlers[i].fields.title)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(hasMode(cat,\\\"nofin\\\")) return;\\n\\t\\ttwobj.finish(tidnames);\\n\\t}  \\n     \\n    function save(tiddlerObj) {\\n\\t\\tswitch (tiddlerObj.getSaveMode()) {\\n\\t\\t\\tcase 'add/import':\\n\\t\\t\\t\\tif (twobj.tiddlerExists(tiddlerObj.fields.title))  twobj.importtids(tiddlerObj);\\n\\t\\t\\t\\telse twobj.modifyTW(tiddlerObj);\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase 'add':\\n\\t\\t\\t\\ttwobj.modifyTW(tiddlerObj);\\n\\t\\t\\tbreak;\\n\\t\\t\\tdefault: //import\\n\\t\\t\\t\\ttwobj.importtids(tiddlerObj);\\n\\t\\t}\\n\\t}\\n\\t\\t\\n\\tfunction addTiddlerToTW( tiddlerObj) { \\n\\n\\t\\tswitch (tiddlerObj.getWriteMode()) {\\n\\t\\t\\tcase 'once':\\n\\t\\t\\t\\tvar oldtid = twobj.getTiddler(tiddlerObj.fields.title);//retrieve existing version\\n\\t\\t\\t\\tif (!!oldtid) break;\\n\\t\\t\\t\\tsave(tiddlerObj);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'move':\\n\\t\\t\\t\\tvar oldtid = twobj.getTiddler(tiddlerObj.fields.title);//retrieve existing version\\n\\t\\t\\t\\tif (!!oldtid)  {\\n\\t\\t\\t\\t\\toldtid.fields.title =oldtid.fields.title +'/'+ new Date();//move old tid by appending the date to its title\\n\\t\\t\\t\\t\\toldtid.modes = tiddlerObj.modes //need to know the save mode\\n\\t\\t\\t\\t\\tsave(oldtid);//move out the way\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsave(tiddlerObj);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'inc':\\n\\t\\t\\t\\ttiddlerObj.fields.title = twobj.getNewTitle(tiddlerObj.fields.title); \\n\\t\\t\\t\\tsave(tiddlerObj);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'delete':\\n\\t\\t\\t\\ttiddlerObj.fields.title = twobj.deleteTiddler(tiddlerObj.fields.title); \\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault: //import\\n\\t\\t\\t\\tsave(tiddlerObj);\\n\\n\\t\\t}\\n\\t}\\n\\n\\treturn api;\\n}());\\n///end tPaste ///\\ntiddlyclip.modules.twobj = (function () {\\n\\n\\tvar api = \\n\\t{\\n\\t\\tonLoad:onLoad, \\t\\t\\ttiddlerExists:tiddlerExists,\\n\\t\\tmodifyTW:modifyTW,\\t\\tgetTiddler:getTiddler,\\n\\t\\tgetTidContents:getTidContents,finish:finish,\\n\\t\\timporttids:importtids,\\tgetNewTitle:getNewTitle,\\n\\t\\tgetTidrules:getTidrules, getTiddlerData:getTiddlerData,\\n\\t\\timmediatetids:immediatetids,deleteTiddler:deleteTiddler\\n\\t}\\n\\tvar   tiddlerAPI;\\n\\tfunction onLoad () {\\n\\t\\t\\t\\ttiddlerAPI \\t= tiddlyclip.modules.tiddlerAPI;\\n\\t}\\n\\tvar tw =null;\\n\\tvar storeStart;\\t\\t\\n\\n\\tfunction getTidContents(tidname) {\\n\\t\\t\\treturn tiddlyclip.getTidContents(tidname);\\n\\t}\\n    \\n    function getTiddlerData(tid) {\\n\\t\\t\\treturn tiddlyclip.getTiddlerData(tid);\\n\\t}\\n\\n    function deleteTiddler(tid) {\\n\\t\\t\\treturn tiddlyclip.deleteTiddler(tid);\\n\\t}\\n\\t\\n\\tfunction getTidrules(tidname) {\\n\\t\\t\\treturn tiddlyclip.getTidrules(tidname);\\n\\t}\\n\\t\\t\\n\\tfunction getNewTitle(tidname) {\\n\\t\\t\\treturn tiddlyclip.getNewTitle(tidname);\\n\\t}\\n\\tfunction getTiddler(tidname) {\\t\\n\\t\\tvar storedTid=tiddlyclip.getTiddler(tidname);\\n\\t\\tif (storedTid) {\\n\\t\\t\\treturn (new tiddlerAPI.Tiddler(storedTid,true));\\n\\t\\t}\\n\\t\\telse return null;\\n\\t}\\t\\t\\n\\tfunction modifyTW(t)\\n\\t{\\n\\t    var fields={}; \\n\\t\\tt.attribs = t.attribs.filter(function(i) {return t.toRemove.indexOf(i) < 0;});\\n\\t\\tfor (var i = 0; i < t.attribs.length;i++) {\\n\\t\\t\\t\\tfields[t.attribs[i]]=t.fields[t.attribs[i]];//put extended fields into a group\\n\\t\\t}\\n\\t\\ttiddlyclip.modifyTW(fields);\\n\\t}\\t\\t\\n\\n\\tfunction importtids(t){\\n\\t    var fields={}; \\n\\t\\tt.attribs = t.attribs.filter(function(i) {return t.toRemove.indexOf(i) < 0;});\\n\\t\\tfor (var i = 0; i < t.attribs.length;i++) {\\n\\t\\t\\t\\tfields[t.attribs[i]]=t.fields[t.attribs[i]];//put fields into a group\\n\\t\\t}\\n\\t\\ttiddlyclip.importTids(fields);\\n\\t}\\t\\n\\t\\n\\tfunction immediatetids(t){\\n\\t    var fields={}; \\n\\t\\tt.attribs = t.attribs.filter(function(i) {return t.toRemove.indexOf(i) < 0;});\\n\\t\\tfor (var i = 0; i < t.attribs.length;i++) {\\n\\t\\t\\t\\tfields[t.attribs[i]]=t.fields[t.attribs[i]];//put fields into a group\\n\\t\\t}\\n\\t\\treturn fields;\\n\\t}\\n\\t\\t   \\t\\t\\t   \\n\\tfunction tiddlerExists(title) {\\n\\t\\t\\treturn tiddlyclip.tiddlerExists(title);\\n\\t}\\t\\n\\n\\tfunction finish(tids) \\n\\t{\\n\\t\\ttiddlyclip.finish(tids);\\n\\t}\\n\\t\\t\\t   \\t\\t\\t   \\n\\treturn api;\\n}());\\n///end twobj///\\n\\ntiddlyclip.modules.tiddlerAPI = (function () {\\n\\n\\tvar api = \\n\\t{\\n\\t\\tonLoad:onLoad, Tiddler:Tiddler, parserReset:parserReset\\n\\t}\\n\\tvar tcBrowser, twobj,pref, util, table;\\n\\t\\n\\tfunction onLoad(doc) {\\n\\t\\ttcBrowser\\t= tiddlyclip.modules.tcBrowser;\\n\\t\\ttwobj\\t\\t= tiddlyclip.modules.twobj;\\t\\n\\t\\tdefaults\\t= tiddlyclip.modules.defaults;\\n\\t}\\n\\tfunction parserReset() {\\n\\t\\ttable={'%':{}};\\n\\t}\\n\\tfunction createDiv(){\\n\\t\\treturn document.createElement(\\\"div\\\");\\n\\t}\\n\\t// Static method to bracket a string with double square brackets if it contains a space\\n\\tfunction encodeTiddlyLink(title)\\n\\t{\\n\\t\\treturn title.indexOf(\\\" \\\") == -1 ? title : \\\"[[\\\" + title + \\\"]]\\\";\\n\\t};\\n\\n\\t// Static method to encodeTiddlyLink for every item in an array and join them with spaces\\n\\tfunction encodeTiddlyLinkList(list)\\n\\t{\\n\\t\\tif(list) {\\n\\t\\t\\tvar t,results = [];\\n\\t\\t\\tfor(t=0; t<list.length; t++)\\n\\t\\t\\t\\tresults.push(encodeTiddlyLink(list[t]));\\n\\t\\t\\treturn results.join(\\\" \\\");\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\t};\\n\\tfunction removeDuplicates(names) {\\n\\t\\tvar i,j,dup,nams = []; \\n\\n\\t\\t// Parse a string array from a bracketted list. For example \\\"OneTiddler [[Another Tiddler]] LastOne\\\"\\n\\t\\tvar parseStringArray = function(value) {\\n\\t\\t\\tif(typeof value === \\\"string\\\") {\\n\\t\\t\\t\\tvar memberRegExp = /(?:^|[^\\\\S\\\\xA0])(?:\\\\[\\\\[(.*?)\\\\]\\\\])(?=[^\\\\S\\\\xA0]|$)|([\\\\S\\\\xA0]+)/mg,\\n\\t\\t\\t\\t\\tresults = [],\\n\\t\\t\\t\\t\\tmatch;\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\tmatch = memberRegExp.exec(value);\\n\\t\\t\\t\\t\\tif(match) {\\n\\t\\t\\t\\t\\t\\tvar item = match[1] || match[2];\\n\\t\\t\\t\\t\\t\\tif(item !== undefined && results.indexOf(item) === -1) {\\n\\t\\t\\t\\t\\t\\t\\tresults.push(item);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} while(match);\\n\\t\\t\\t\\treturn results;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tnlist = parseStringArray(names);\\n\\t\\t/*\\n\\t\\tfor ( i=0; i < nlist.length; i++)\\n\\t\\t\\tnlist[i] = nlist[i].trim();\\n\\t\\tfor ( i=0; i < nlist.length; i++){\\n\\t\\t\\tdup = false;\\n\\t\\t\\tfor ( j = i ; j > 0; j--) {\\n\\t\\t\\t\\tif (nlist[i] === nlist[j-1]){\\n\\t\\t\\t\\t\\tdup = true;// alert(\\\"dup\\\");\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (!dup) nams.push(nlist[i]);\\n\\t\\t}\\n\\t\\t*/\\n\\t\\treturn encodeTiddlyLinkList(nlist);\\n\\t}\\n\\tfunction Tiddler(el,truetid) {\\n\\t\\tthis.attribs = [\\\"text\\\"];\\n\\t\\tthis.toRemove =[];\\n\\t\\tvar current = this;\\n\\t\\tcurrent.fields = {};\\n\\t\\tcurrent.fields.text =\\\"\\\";\\n\\t\\t//current.fields.title =\\\"\\\";\\t\\n\\t\\t\\n\\t\\tfunction convertedFromJSON(el) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tvar tid =JSON.parse(el);\\n\\t\\t\\t\\t\\tfor (var atr in tid){\\n\\t\\t\\t\\t\\t\\tcurrent.fields[atr]=tid[atr];\\n\\t\\t\\t\\t\\t\\tcurrent.attribs.push(atr);\\t\\t\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} catch(e){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!el) { \\n\\t\\t\\tel =  tiddlyclip.newProtoTiddler();\\n\\t\\t\\tfor (var atr in el.fields){ \\n\\t\\t\\t\\t\\tcurrent.fields[atr]=el.fields[atr];\\n\\t\\t\\t\\t\\tcurrent.attribs.push(atr);\\t\\t\\n\\t\\t\\t}\\t\\t\\t\\n\\n\\t\\t    this.fields.tags=\\\"\\\";//BJ FIX remove or move to adapter\\n\\t\\t} else if (!truetid) {\\n\\t\\t\\tif((typeof el) ===\\\"string\\\"){ \\n\\t\\t\\t\\tif (convertedFromJSON(el)) return this; //conversion complete\\n\\t\\t\\t\\t//convert html to dom ;\\n\\t\\t\\t\\tvar wrapper= createDiv();\\n\\t\\t\\t\\twrapper.innerHTML= el;\\n\\t\\t\\t\\tel= wrapper.firstChild;\\n\\t\\t\\t\\twrapper = {};//release div\\n\\t\\t\\t}\\t\\t\\t\\t\\t\\t\\t\\t \\t\\t\\t\\t\\n\\t\\t\\tthis.fields.text = undoHtmlEncode(el.innerHTML.\\n\\t\\t\\t\\t\\treplace(/\\\\n<pre xmlns=\\\"http:\\\\/\\\\/www.w3.org\\\\/1999\\\\/xhtml\\\">([\\\\s|\\\\S]*)<\\\\/pre>\\\\n/mg,\\\"$1\\\").\\n\\t\\t\\t\\t\\treplace(/\\\\n<pre>([\\\\s|\\\\S]*)<\\\\/pre>\\\\n/mg,\\\"$1\\\"));\\n\\t\\t\\tvar  j = el.attributes, m, extraTags='';\\n\\t\\t\\tfor (var i = j.length; i!== 0; i--) {\\n\\t\\t\\t\\tm=j[i-1].nodeName; \\n\\t\\t\\t\\tv=j[i-1].value;\\n\\t\\t\\t\\tthis.attribs.push(m);\\n\\t\\t\\t\\tthis.fields[m] = undoHtmlEncode(v) ;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tfor (var atr in el.fields){ \\n\\t\\t\\t\\tcurrent.fields[atr]=el.fields[atr];\\n\\t\\t\\t\\tcurrent.attribs.push(atr);\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\tif (!!this.fields.tags) this.fields.tags = (this.fields.tags instanceof Array)?this.fields.tags.join(' '):this.fields.tags;\\n\\t\\t    else this.fields.tags=\\\"\\\";\\n\\t\\t\\t//this.body =   this.text;\\n\\t\\t} \\n\\t\\t\\n\\t\\treturn this;\\n\\t}\\n\\t\\n\\tTiddler.prototype.addMimeType=function(mime){\\n\\t\\tthis.attribs.push('type');\\n\\t\\tthis.fields.type = mime;\\n\\t}\\n\\t\\n\\tTiddler.prototype.exportFieldsTo=function(obj){\\n\\t\\tif (!obj) return null;\\n\\t\\tfor (var i = 0; i<this.attribs.length; i++){ \\n\\t\\t\\tvar atr = this.attribs[i];\\n\\t\\t\\tobj[atr]=this.fields[atr]; \\t\\n\\t\\t};\\t\\t\\t\\t\\t \\n\\t\\treturn obj;\\n\\t}\\t\\n\\n\\tTiddler.prototype.noSave=function(){\\n\\t\\treturn (!this.fields.title ||this.hasMode(\\\"nosave\\\"));\\n\\t}\\n\\t\\t\\n\\tTiddler.prototype.addTags=function(tags){\\n\\t\\tif (!tags) return;\\n\\t\\tif (!this.fields.tags) {\\n\\t\\t\\tthis.fields.tags = removeDuplicates(tags);\\n\\t\\t\\tthis.attribs.push(\\\"tags\\\");\\t\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tthis.fields.tags = removeDuplicates(this.fields.tags + ' '+ tags);\\n\\t\\t}\\n\\t}\\n\\n\\tTiddler.prototype.applyEdits = function(fields) {\\n\\t\\tfor (var i in fields){\\t\\t\\t\\t\\n\\t\\t\\tif (!this.hasOwnProperty(i)) this.attribs.push(i);//add to list of fields to update. BJ should be this.attribs.hasOwnProperty(i)??\\n\\t\\t\\tthis.fields[i] = fields[i];\\n\\t\\t}\\n\\t}\\n\\t\\n\\tTiddler.prototype.removeField = function(field) {\\n\\t\\t\\tthis.toRemove.push(field);\\n\\t}\\n\\n\\tTiddler.prototype.hasMode=function(mode){\\n\\t\\tif (!this.modes) return false;\\n\\t\\tfor (var i=0; i< this.modes.length;i++)\\n\\t\\t\\tif (mode === this.modes[i]) return true;\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\tTiddler.prototype.getWriteMode=function(mode){\\n\\t\\tvar writeMode = 'normal';\\n\\t\\tif (!this.modes) return writeMode;\\n\\t\\tif (this.hasMode(\\\"move\\\")) return \\\"move\\\";\\n\\t\\telse if (this.hasMode(\\\"once\\\")) return \\\"once\\\";\\n\\t\\telse if (this.hasMode(\\\"inc\\\")) return \\\"inc\\\";\\n\\t\\telse if (this.hasMode(\\\"delete\\\")) return \\\"delete\\\";\\n\\t\\treturn writeMode;\\n\\t}\\n\\t\\n\\tTiddler.prototype.getSaveMode=function(mode) {\\n\\t\\tif (!this.modes) return 'import';\\n\\t\\telse if (this.hasMode(\\\"add/import\\\")) return \\\"add/import\\\";\\n\\t\\telse if (this.hasMode(\\\"add\\\")) return \\\"add\\\";\\n\\t\\treturn 'import';\\n\\t}\\n\\t\\n\\tfunction undoHtmlEncode( input ) {\\n\\t\\tinput =input\\n        .replace(/&bar;/g, '|')\\n        .replace(/&quot;/g, '\\\"')\\n        .replace(/&lt;/g, '<')\\n        .replace(/&gt;/g, '>')\\n        .replace(/&amp;/g, '&');\\n        return (input);   \\n\\t}\\n\\n\\tfunction extractModes(tagString) {\\n\\t\\tvar modes =[], tList = tagString.split(' ');\\n\\t\\tfor (var i=0; i< tList.length; i++) {\\n\\t\\t\\tmodes[i] = tList[i].trim();\\n\\t\\t}\\n\\t\\treturn modes;\\n\\t}\\n\\tTiddler.prototype.setPageVars  =\\tfunction (pageData){\\n\\t\\tvar dateLong=    'DDD, MMM DDth, YYYY';\\n\\t\\tvar dateTimeLong='DDD, MMM DDth, YYYY at hh12:0mm:0ss am';\\t\\n\\t\\tvar dateShort=   'DD MMM YYYY';//journal form\\n\\t\\tvar dateTimeShort=   'YYYY/MM/DD 0hh:0mm:0ss';//journal form\\n\\n\\t\\tvar dates =tiddlyclip.dates();\\n\\t\\tfor (var atr in dates){ \\n\\t\\t\\tpageData.data[atr]=dates[atr];\\n\\t\\t}\\n\\t\\tif (!!pageData.data.category) {\\n\\t\\t\\tpageData.data.category1stWord=pageData.data.category.replace(/(.*) (.*)/,\\\"$1\\\");\\n\\t\\t}\\n\\t\\tvar macrosx =defaults.getDefs();\\n\\t\\ttable['$']={};table['#']={};table['@']={};\\n\\t\\tfor (var n in pageData.data) {table['@'][n]= pageData.data[n];}\\n\\t\\tfor (var n in macrosx) {table['@'][n]= macrosx[n];}\\n\\t}\\n\\n\\tTiddler.prototype.setTids  =\\tfunction (rule,pageData){\\n\\n\\t\\t//---first determine the title\\n\\t\\ttable['#']={};\\t\\n\\t\\tthis.exportFieldsTo(table['$']);\\n\\t\\tthis.parseStructure(rule.title);\\n\\t\\tvar title = table['$'].title;\\t\\t\\t \\n\\t\\ttable['@']['newtiddler']= 'false';\\n\\n\\t\\t//xecute mode rule and obtain (possibly) modified modes\\n\\t\\tthis.parseStructure(rule.modes);\\t\\t\\t \\n\\t\\tthis.modes=extractModes(table['#']['newdata']);\\n\\t\\t//---modes are now determined \\n\\t}\\n\\t\\n\\tTiddler.prototype.setNormal  =\\tfunction (rule,pageData){\\n\\n\\t\\t//---first determine the title\\n\\t\\tthis.parseStructure(rule.title);\\n\\t\\tvar title = table['$'].title;\\t\\t\\t \\n\\t\\ttable['#']={};\\t\\t\\n\\t\\t//---next we need to find the modes before we can decide how to update\\n\\t\\t//-----1- does tiddler exist already?\\n\\t\\tvar storedTid=twobj.getTiddler(title);\\n\\t\\tif (storedTid) {\\n\\t\\t\\tstoredTid.exportFieldsTo(table['$']);\\n\\t\\t\\ttable['@']['newtiddler']= 'false';\\n\\t\\t} else {\\n\\t\\t\\ttable['@']['newtiddler']= 'true';\\n\\t\\t\\tthis.exportFieldsTo(table['$']);\\n\\t\\t}\\n\\t\\t//-----2- execute mode rule and obtain (possibly) modified modes\\n\\t\\tthis.parseStructure(rule.modes);\\t\\t\\t \\n\\t\\tthis.modes=extractModes(table['#']['newdata']);\\n\\t\\t//---modes are now determined \\n\\t\\ttable['#']={};\\n\\t\\ttable['$']={};\\n\\n\\t\\t//---expose whether this is a new tiddler\\n\\t\\tif (this.hasMode('append')||this.hasMode('prepend')||this.hasMode('modify')) {\\n\\t\\t\\tvar storedTid=twobj.getTiddler(title);\\n\\t\\t\\tif (storedTid) {\\n\\t\\t\\t\\tstoredTid.exportFieldsTo(table['$']);\\n\\t\\t\\t\\ttable['@']['newtiddler']= 'false';\\n\\t\\t\\t} else { \\n\\t\\t\\t\\tthis.exportFieldsTo(table['$']);\\n\\t\\t\\t\\tthis.parseStructure(rule.InitVals);\\n\\t\\t\\t\\ttable['@']['newtiddler']= 'true';\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse \\n\\t\\t{\\n\\t\\t\\tthis.exportFieldsTo(table['$']);\\n\\t\\t\\tthis.parseStructure(rule.InitVals);\\n\\t\\t\\ttable['@']['newtiddler']= 'true';\\n\\t\\t}\\n\\t\\ttable['$'].title=title;\\n\\t}\\n\\tTiddler.prototype.subst  =\\tfunction (rule,pageData){\\n\\t\\t//---apply rules\\n\\t\\ttable['#']={};\\n\\t\\tthis.parseStructure(rule.body);\\t\\n\\t\\t//---check to see if user will handle insertion of new text\\t\\t \\n\\t\\tif (!this.hasMode('no-textsaver')) {\\n\\t\\t\\tvar data = table['#']['newdata'], prepend =this.hasMode('prepend');\\n\\t\\t\\tstatus (\\\"not textsaver with data \\\"+ data+\\\" olddata \\\"+\\ttable['$']['text']);\\n\\t\\t\\t//BJ does this.fields.text exist with a new tiddler? \\n\\t\\t\\ttable['$']['text'] = (!!prepend)?data + table['$']['text'] :table['$']['text'] + data;\\n\\t\\t}\\n\\t\\ttable['#']={};\\n\\t\\tthis.parseStructure(rule.tags);\\t\\n\\n\\t\\ttable['#']={};\\n\\t\\ttable['@'].fields=table['$'];\\n\\t\\tif (table['@']['#nofieldupdates'] !=='true') this.parseStructure(rule.fields);\\n\\t\\t//---move data from parser table into tiddler\\n\\t\\tthis.applyEdits(table['$']);\\n\\t\\treturn this;\\n\\t}\\n\\t///////////////// parser implementation /////////////////\\n\\tvar error=function (message) {\\n\\t\\t alert(message);\\n\\t}\\n\\n    function setStatus(x) {\\n\\t\\ttable['@']['$$']=x;\\n\\t}\\n\\n\\tfunction getSimpleVarFrom (n ) {\\n\\t\\tn = n.trim();\\n\\t\\tvar type = n.substring(0,1);\\n\\t\\tif (type !== '#' &&type !=='$' && type !=='@'&& type !=='%') error(\\\"variable: invalid name \\\"+n);\\n        else return {type:type, leftSide:n.substring(1)};\\n\\t}\\n\\tfunction valOf(n, test) {\\n\\t\\tvar val, type = n.substring(0,1);\\n\\t\\tif (type !== '#' &&type !=='$'&&type !=='@'&& type !=='%'){\\n\\t\\t\\tif (!test) error(\\\"source: invalid name\\\"+n);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tval=table[type][n.substring(1)];\\n\\t\\t\\tif (val == undefined) { \\n\\t\\t\\t\\tif (!test)  error(\\\"source: invalid val \\\"+n);\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\treturn val;\\n\\t\\t}\\n\\t }\\n\\tfunction toValues(sources,test) {\\n\\t\\tvar values = [], returned;\\n\\t\\tfor (var i = 0 ; i < sources.length ;i++) {\\n\\t\\t\\tif ((values[i]= valOf(sources[i],test))==null) return null;\\n\\t\\t}\\n\\t\\treturn  values;\\n\\t}\\n\\tfunction makeInt (value) {\\n\\t\\tif(/^(\\\\-|\\\\+)?([0-9]+)$/.test(value)) {\\n\\t\\t\\treturn Number(value);\\n\\t\\t}\\n\\t\\treturn NaN;\\n\\t}\\n\\n\\tTiddler.prototype.parseStructure=function(cb,localonly) {\\n\\t\\t//updates the global 'table'\\n\\t\\tvar target, b;\\n\\t\\ttry {\\n\\t\\tb=JSON.parse(cb);\\n\\t\\t} catch(e) {\\n\\t\\t\\terror(cb+\\\" is not a json\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tfor (var i=0; i < b.length; i++) {\\n\\t\\t\\tvar moreThanOne = 0,replaceOp;\\n\\t\\t\\tfor (var n in b[i]) {//n is our nodes combined target/operator string - eg #x#EQ\\n\\t\\t\\t\\tif (moreThanOne) error (\\\"general:more than one subterm in node\\\");\\n\\t\\t\\t\\tvar rightSide =b[i][n];\\n\\t\\t\\t\\tif (typeof rightSide === \\\"object\\\") {\\n\\t\\t\\t\\t\\t//lookup parser\\n\\t\\t\\t\\t\\tvar parser = tiddlyclip.oparser[rightSide.parser];\\n\\t\\t\\t\\t\\tif (parser) {\\n\\t\\t\\t\\t\\t\\treplaceOp= this.replaceALL(rightSide.text);\\n\\t\\t\\t\\t\\t\\tif (!replaceOp.abort) rightSide =  this.replaceALL(parser (replaceOp.result)).result;\\n\\t\\t\\t\\t\\t\\telse  {\\n\\t\\t\\t\\t\\t\\t\\tmoreThanOne++;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse error(\\\"source: invalid type object\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (typeof rightSide === \\\"string\\\") {\\n\\t\\t\\t\\t\\treplaceOp= this.replaceALL(rightSide);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif (!replaceOp.abort) rightSide = replaceOp.result;\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tmoreThanOne++;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else error(\\\"source: invalid type\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tvar returedVals =  getSimpleVarFrom (n);\\n\\t\\t\\t\\tvar leftSide =  returedVals.leftSide;\\n\\t\\t\\t\\tvar type \\t =  returedVals.type;\\n\\t\\t\\t\\tif (type !== '#' &&type !=='$' &&type !=='%' &&type !=='@'){ \\n\\t\\t\\t\\t\\terror(\\\"target: invalid name \\\"+n);\\t\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\t\\t\\n\\t\\t\\t\\tif (!localonly)  table[type][leftSide] = rightSide;\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tif (type=='#') table[type][leftSide] = rightSide;\\n\\t\\t\\t\\t\\telse error(\\\"target: invalid assignment\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmoreThanOne++;\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction handleBinaryForm(leftSide,operator,rightSide) {\\n\\t\\tswitch (operator) {\\n\\t\\t\\tcase 'PS':\\n\\t\\t\\tcase 'MS':\\n\\t\\t\\t\\trightSide = makeInt(rightSide);\\n\\t\\t\\t\\tif ( isNaN(rightSide)) {error(\\\"rightside: can only add integers\\\"); return null;}\\n\\t\\t\\t\\tleftSide = makeInt(leftSide);\\n\\t\\t\\t\\tif (isNaN(leftSide)) {error(\\\"leftside: can only add integers\\\"); return null;}\\n\\t\\t\\t\\treturn ((operator==='PS')?leftSide+rightSide:leftSide-rightSide);\\t\\t\\t\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'EQ':\\n\\t\\t\\tcase 'NQ':\\n\\t\\t\\t//alert(leftSide+\\\" cmp \\\"+rightSide);\\n\\t\\t\\t\\treturn ((operator==='EQ')?leftSide==rightSide:leftSide!=rightSide);\\t\\t\\t\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault: error(\\\"operator not found\\\");\\n\\t\\t\\t\\t\\t return null;\\n\\t\\t}\\t\\n\\t}\\n\\t Tiddler.prototype.abort=function(source) {\\n\\t\\tif (/@abort\\\\(/.test(source) ){ return true;}\\n\\t\\treturn false;\\n\\t}\\n\\t Tiddler.prototype.handleFunction=function(source) {\\n\\t\\tvar self = this, abort=false;\\n\\t\\tfunction alertAll() {\\n\\t\\t\\tvar args = Array.prototype.slice.call(arguments);\\n\\t\\t\\targs.unshift('alertAll');\\n\\t\\t\\talert(args.join(' '));\\n\\t\\t}\\n\\t\\tif (!/@(.*)\\\\(([\\\\S\\\\s]*?)\\\\)/.test(source) )return {result:null,abort:abort};\\n\\t\\t//abort macro\\n\\t\\treturn {result:source.replace(/@(.*)\\\\(([\\\\S\\\\s]*?)\\\\)/g,function(m,key1,key2,offset,str){\\n\\t\\t\\tif (key1==\\\"delete\\\") {\\n\\t\\t\\t\\tself.removeField(key2.substring(1));\\n\\t\\t\\t\\treturn \\\"deleted \\\"+key2;\\n\\t\\t\\t}\\n\\t\\t\\tif (key1==\\\"abort\\\") {\\n\\t\\t\\t\\tif (!key2) {abort=true;return null;} //empty params means abort whatever\\n\\t\\t\\t\\tif (valOf(key2, true) == null) {abort=true;return null;} //if val not exist abort\\n\\t\\t\\t\\tif (valOf(key2) === 'false'){abort=true;return null;}\\n\\t\\t\\t\\treturn \\\"\\\";//otherwise just remove the abort() token\\n\\t\\t\\t}\\n\\t\\t\\tif (key1==\\\"exists\\\") {\\n\\t\\t\\t\\tif (valOf(key2, true) != null)\\n\\t\\t\\t\\t\\treturn \\\"true\\\";\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treturn \\\"false\\\"\\n\\t\\t\\t}\\n\\t\\t\\tif (key1==\\\"alert\\\") {\\n\\t\\t\\t\\tif (valOf(key2,true) == null)\\n\\t\\t\\t\\t\\talert(key2+\\\" null\\\");\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\talert(valOf(key2));\\n\\t\\t\\t\\treturn \\\"alerted\\\";\\n\\t\\t\\t}\\n\\n\\t\\t\\t//handle normal functions\\n\\t\\t\\tvar vals;\\n\\t\\t\\tif (!!key2) vals = toValues(key2.split(/\\\\s*,\\\\s*/));\\n\\t\\t\\telse vals = null;\\n\\t\\t\\tif (key1==\\\"alertAll\\\") {\\n\\t\\t\\t\\t\\talertAll.apply(null,vals);\\n\\t\\t\\t\\t\\treturn \\\"all alerted\\\";\\n\\t\\t\\t}\\n\\t\\t\\ttry {\\n\\t\\t\\t\\treturn tiddlyclip.macro[key1].apply(null,vals);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(e) {\\n\\t\\t\\t\\talert (key1 + \\\"marco not found\\\");\\t\\n\\t\\t\\t}\\n/*\\n\\t\\t\\ttry {\\n\\t\\t\\t\\treturn tiddlyclip[key1](val);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\terror (\\\"macro \\\"+key1 +\\\" not found\\\");\\n\\t\\t\\t\\treturn \\\"macro \\\" + key1 + \\\" not found\\\";\\n\\t\\t\\t} \\n*/\\t\\t\\t\\t\\n\\t\\t\\treturn m;\\n\\t\\t}),abort:abort};\\n\\t}\\n\\t\\n\\tTiddler.prototype.replaceALL=function(source, data){ //replace all ((* *)) delimited strings\\n\\t\\tvar self = this, abort=false;\\n\\t\\treturn {result:source.replace(/\\\\(\\\\(\\\\*([\\\\S\\\\s]*?)\\\\*\\\\)\\\\)/g,function(m,key,offset,str){ \\n\\t\\t\\tvar parts, vals, res, firstterm, firstparts, testedTrue = true;\\n\\t\\t\\t// check for  ((*conditional*??*Use this variable*??*or use this variable*))\\n\\t\\t\\tfirstparts= key.split(\\\"*??*\\\");\\n\\t\\t\\t//handle conditional string\\n\\t\\t\\tif (firstparts.length >1) {\\t\\n\\t\\t\\t\\tvar negate=(firstparts[0].substring(0,1)== '!');\\n\\t\\t\\t\\tif (negate) {\\n\\t\\t\\t\\t\\tfirstterm = firstparts[0].substring(1);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfirstterm = firstparts[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// regex condition\\n\\t\\t\\t\\tif ((parts= firstterm.split(\\\"/\\\")).length ==3) {\\n\\t\\t\\t\\t\\tif ((vals = toValues(parts)) == null) return m;\\n\\t\\t\\t\\t\\tvar regParts = (valOf(parts[1])).split(\\\"/\\\");\\n\\t\\t\\t\\t\\tvar pattern=new RegExp(regParts[1],regParts[2]);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif (negate&&pattern.test(vals[0])) testedTrue = false;\\n\\t\\t\\t\\t\\telse if (!negate&&!pattern.test(vals[0]))testedTrue = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// comparision\\n\\t\\t\\t\\telse if ((parts= firstterm.split(\\\"==\\\")).length ==2) {\\n\\t\\t\\t\\t\\tif ((vals =toValues(parts))==null) return m;\\n\\t\\t\\t\\t\\tif ((res=handleBinaryForm(vals[0],negate?\\\"NQ\\\":\\\"EQ\\\",vals[1]))==null) return m;\\n\\t\\t\\t\\t\\telse if (!res) testedTrue = false; \\n\\t\\t\\t\\t} \\n\\t\\t\\t\\t// macro\\n\\t\\t\\t\\telse if ((res = self.handleFunction(firstterm).result) != null) { // a function\\n\\t\\t\\t\\t\\tif ( negate && res===\\\"true\\\") \\t{testedTrue = false;}\\n\\t\\t\\t\\t\\tif (!negate && res===\\\"false\\\") {testedTrue = false;}\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// boolean variable\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tif ((vals =valOf(firstterm))==null)  return m;\\n\\t\\t\\t\\t\\tif ( negate && vals===\\\"true\\\") \\ttestedTrue = false;\\n\\t\\t\\t\\t\\tif (!negate && vals===\\\"false\\\") testedTrue = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (testedTrue) {\\n\\t\\t\\t\\t\\tkey = firstparts[1];\\n\\t\\t\\t\\t} \\n\\t\\t\\t\\telse { \\n\\t\\t\\t\\t\\tif (firstparts.length == 2) return '';//no 'else' defined\\n\\t\\t\\t\\t\\tkey = firstparts[2];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// end of handling conditional string part\\n\\t\\t\\tvar parts;\\n\\t\\t\\t// regex ((*@PageRef/#rule/#term*)) or ((*.....*??*@PageRef/#rule/#term*))\\n\\t\\t\\tif ((parts = key.split(\\\"/\\\")).length ==3) {\\n\\t\\t\\t\\tif ((vals = toValues(parts)) == null) return m;\\n\\t\\t\\t\\tvar regParts = (valOf(parts[1]));\\n\\t\\t\\t\\tvar regexBody = regParts.replace(/\\\\/([\\\\s\\\\S]*)\\\\/.*$/,\\\"$1\\\");\\n\\t\\t\\t\\tvar regexflags = regParts.replace(/.*\\\\/(.*?)$/,\\\"$1\\\");\\n\\t\\t\\t\\tvar pattern=new RegExp(regexBody,regexflags);\\n\\t\\t\\t\\tsetStatus(null);\\n\\t\\t\\treturn vals[0].replace(pattern, function(match){setStatus(\\\"r\\\"); return match.replace(new RegExp(regexBody,regexflags), vals[2]);});\\n\\t\\t\\t}\\n\\t\\t\\t// substitute\\n\\t\\t\\tif ((parts = key.split(\\\":\\\")).length ==3) {\\n\\t\\t\\t\\tif ((vals = toValues(parts)) == null) return m;\\t\\t\\n\\t\\t\\t\\t//var strg = str.replace(/i/g, function(token){replaced = true; return '!';});\\n\\t\\t\\t\\tsetStatus(null);\\n\\t\\t\\t\\treturn vals[0].replace(vals[1], function(token){setStatus(\\\"r\\\"); return vals[2];});\\n\\t\\t\\t}\\n\\t\\t\\t// add \\n\\t\\t\\tif ((parts = key.split(\\\"+\\\")).length == 2) {\\n\\t\\t\\t\\tif ((vals = toValues(parts)) == null) return m;\\n\\t\\t\\t\\tif ((res = handleBinaryForm(vals[0],\\\"PS\\\",vals[1])) == null) return m;\\n\\t\\t\\t\\treturn res.toString();\\n\\t\\t\\t}\\t\\n\\t\\t\\t// subtract\\t\\n\\t\\t\\tif ((parts= key.split(\\\"-\\\")).length ==2) {\\n\\t\\t\\t\\tif ((vals = toValues(parts,true)) != null) {\\n\\t\\t\\t\\t\\tif ((res = handleBinaryForm(vals[0],\\\"MS\\\",vals[1])) == null) return m;\\n\\t\\t\\t\\t\\treturn res.toString();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// macro\\n\\t\\t\\tvar returned = self.handleFunction(key);\\n\\t\\t\\tif (returned.abort) {abort=true; return null};//abort replaceAll completely\\n\\t\\t\\tif ((res = returned.result) != null) return res;\\n\\t\\t\\telse \\n\\t\\t\\t// vanilla variable\\n\\t\\t\\tif ((res = valOf(key,true)) != null) return res;\\n                        else return \\\"\\\";\\n\\t\\t\\t// error\\n\\t\\t\\treturn m;\\n\\t\\t}),abort:abort};\\n    }\\n\\t///////////////// parser implementation end/////////////////\\n\\treturn api;\\n\\t\\n}());\\n///end tiddlerObj///\\n tiddlyclip.modules.defaults = (function () {\\n\\tvar defaultCommands = {\\n\\t\\tsearch:{tip:'search selection in tw', command:function(){alert(\\\"mysearch\\\")}}\\n\\t};\\n\\tvar tPaste, twobj;\\n\\tfunction onLoad() {\\n\\t\\ttwobj=tiddlyclip.modules.twobj;\\n\\t}\\n\\tvar api = \\n\\t{\\n\\t\\tonLoad:onLoad, getDefaultRule:getDefaultRule, \\n\\t\\tgetDefaultCategories:getDefaultCategories,\\n\\t\\tgetDefs:getDefs,\\n\\t\\tdefaultCommands:defaultCommands\\n\\t}\\t\\n\\n\\tfunction getDefs(){\\n\\t\\tif (!twobj.tiddlerExists(\\\"TiddlyClipDefs\\\"))  return tiddlyclip.defs;\\n\\n\\t\\tvar content = twobj.getTidContents(\\\"TiddlyClipDefs\\\");//where all marcos are defined\\t\\n\\t\\ttry {\\n\\t\\t\\tif (content ==\\\"\\\") return tiddlyclip.defs;\\n\\t\\t\\tvar values =JSON.parse(content);\\n\\t\\t\\tif (!!values) {return values;}\\n\\t\\t}catch(e){\\t\\n\\t\\t}\\n\\t\\treturn tiddlyclip.defs; \\n\\t}\\n\\t\\n\\tfunction getDefaultCategories() {\\n\\t\\treturn tiddlyclip.defaultCategories;\\n\\t}\\t\\t\\n \\n\\tfunction getDefaultRule(ruleName) {\\n\\t\\treturn tiddlyclip.getDefaultRule(ruleName);\\n\\t}\\n \\treturn api;\\n}());\\n///end defaults///\\n\\n\\nvar MODULES = tiddlyclip.modules;\\nfor (var mod in MODULES) {\\n\\tMODULES[mod].onLoad();\\n}\\n\\n} \\n\\n}());\\n\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/tidpaste.js\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/convert.js\":{\"text\":\"exports.name =\\\"htmlToTW2\\\";\\nexports.run  = function(text)\\n\\t{\\n\\n\\n\\t\\n\\tvar toTW  =(function() {\\n\\t  var ELEMENT = this.Node?Node.ELEMENT_NODE:1,\\n\\t\\t\\t TEXT = this.Node?Node.TEXT_NODE:   3,\\n\\t\\t\\t CDATA= this.Node?Node.CDATA_SECTION_NODE:4,\\n\\t\\t   COMMENT= this.Node?Node.COMMENT_NODE:  8;\\n\\t\\n\\t\\tvar Tname = {\\n\\t\\t//need to add a flag the says only add a \\\\n if not preceeded by \\\\n\\n\\t\\t\\n\\t\\t// -- table --\\n\\t\\ttable   :[handleTabBg,handleTabEnd,''],//todo add handle end to add footer '\\n\\t\\tthead\\t:[handleTheadBg, \\\"\\\",\\\"\\\"],\\n\\t\\ttbody\\t:[handleTbodyBg, \\\"\\\",\\\"\\\"],\\n\\t\\ttfoot\\t:[handleTfootBg, \\\"\\\",\\\"\\\"],\\n\\t\\ttr\\t\\t:[trStart,trEnd,''],\\n\\t\\ttd\\t\\t:[tdStart,tdEnd,''],\\n\\t\\tth\\t\\t:[tdStart,tdEnd,'th'],\\n\\n\\t\\t// -- heading --\\n\\n\\t\\th1:[\\\"\\\\newline!\\\"\\t\\t\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\th2:[\\\"\\\\newline!!\\\"\\t\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\th3:[\\\"\\\\newline!!!\\\"\\t\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\th4:[\\\"\\\\newline!!!!\\\"\\t\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\th5:[\\\"\\\\newline!!!!!\\\"\\t\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\th6:[\\\"\\\\newline!!!!!!\\\"\\t,\\\"\\\\n\\\",\\\"\\\"],\\n\\t\\t\\n\\t\\t// -- list --\\n\\t\\tul\\t\\t:[\\\"\\\"\\t\\t\\t,\\\"\\\\newline\\\",\\\"ul\\\"],\\n\\t\\tol\\t\\t:[\\\"\\\"\\t\\t\\t,\\\"\\\\newline\\\",\\\"ol\\\"],\\n\\t\\tdl\\t\\t:[\\\"\\\"\\t\\t\\t,\\\"\\\\newline\\\",\\\"dl\\\"],\\n\\t\\tli\\t\\t:[handleBullit\\t,\\\"\\\",\\\"li\\\"],\\n\\t\\tdt\\t\\t:[handleBullit\\t,\\\"\\\",\\\"dt\\\"],\\n\\t\\tdd\\t\\t:[handleBullit\\t,\\\"\\\",\\\"dd\\\"],\\n\\t\\t\\n\\t\\t// -- quoteByBlock --\\t\\t\\n\\t\\t// -- quoteByLine --\\n\\t\\tblockquote:[handlebq, \\\"\\\\newline\\\",\\\"bq\\\"],\\n\\t\\t\\n\\t\\t// -- rule --\\n\\t\\t// -- monospacedByLine --\\n\\t\\t// -- wikifyComment --\\t\\n\\t\\t// -- macro --\\n\\t\\t// -- prettyLink --\\n\\t\\t// -- wikiLink --\\n\\t\\t// -- urlLink --\\n\\t\\ta\\t\\t:[\\\"[[\\\"\\t\\t\\t,handleLink,\\\"\\\"], \\n\\t\\t\\n\\t\\t// -- image --\\n\\t\\timg\\t\\t:[handleImg, '',''],\\n\\t\\t\\n\\t\\t// -- html --\\n\\t\\t// -- commentByBlock --\\n\\t\\t// -- characterFormat --\\n\\t\\tb      :[ \\\"''\\\",  \\\"''\\\" ,\\\"\\\"],\\n\\t\\tstrong :[ \\\"''\\\",  \\\"''\\\" ,\\\"\\\"],\\n\\t\\ti      :[ \\\"//\\\",  \\\"//\\\" ,\\\"\\\"],\\n\\t\\tem     :[ \\\"//\\\",  \\\"//\\\" ,\\\"\\\"],\\n\\t\\tu      :[ \\\"__\\\",  \\\"__\\\",\\\"\\\"],\\n\\t\\tsub    :[ \\\"~~\\\",  \\\"~~\\\",\\\"\\\"],\\n\\t\\tsup    :[ \\\"^^\\\",  \\\"^^\\\",\\\"\\\"],\\n\\t\\tstrike :[ \\\"--\\\",  \\\"--\\\",\\\"\\\"],\\n\\t\\t\\n\\t\\t// -- customFormat --\\n\\t\\tspan:[handleSPAN\\t\\t,endDIV,\\\"\\\"],\\t\\n\\t\\tdiv:[handleDIV\\t\\t\\t,endDIV,\\\"\\\"],\\t\\n\\t\\t// -- mdash --\\n\\t\\thr:[\\\"<hr>\\\"\\t,\\\"\\\",\\\"\\\"],\\t\\t\\n\\t\\t// -- lineBreak --\\n\\n\\t\\tbr\\t\\t:[handleBreak,\\t\\\"\\\",\\\"\\\"],\\n\\t\\t\\n\\t\\t// -- rawText --\\n\\t\\t// -- htmlEntitiesEncoding --\\n\\n\\t\\tcode   :[ \\\"{{{\\\",  \\\"}}}\\\",\\\"\\\"],\\n\\t\\ttt     :[ \\\"{{{\\\",  \\\"}}}\\\",\\\"\\\"],\\n\\t\\tpre   :[ \\\"\\\\newline{{{\\\\n\\\",  \\\"\\\\newline}}}\\\\n\\\",\\\"\\\"]\\n\\n\\t\\t}\\t\\n\\t\\tvar MAXCOL=20;\\n\\t\\tvar spanDwCounters = new Array(MAXCOL);\\n\\t\\tvar colCount =0;\\t\\n\\t\\tvar intable=false;\\n\\t\\tvar foot,tofoot,head,footer;\\n\\t\\tvar divStackEmpty =[];\\n\\t\\t\\t\\t\\n\\t  return function tw(el, outer, LOCALE,parentbullit) {\\n\\t\\t\\tvar i = 0, j = el.childNodes, k='', m, n,\\n\\t\\t\\t\\tl = j.length;\\n\\t\\t\\tvar nodeFound=false, ind, bullit = [];\\n\\t\\t\\tif (!parentbullit) parentbullit = [];\\n\\t\\t\\tfor (ind = 0; ind < parentbullit.length;ind++) bullit.push(parentbullit[ind]);\\n\\t\\t\\t\\n\\t\\t\\tif (outer) \\n\\t\\t\\t{\\n\\t\\t\\t\\tm = el.nodeName.toLowerCase();\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tfor (var name in Tname) {\\n\\n\\t\\t\\t\\t\\tif (name === m) {\\n\\t\\t\\t\\t\\t\\tk = typeof Tname[name][0] == \\\"function\\\"?\\n\\t\\t\\t\\t\\t\\t\\t\\tTname[name][0](el, outer, LOCALE,parentbullit):Tname[name][0];\\t\\t\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t//alert( \\\"m=\\\"+m+\\\" \\\"+k);\\n\\t\\t\\t\\t\\t\\tbullit.push(Tname[name][2]);//pass on tag to child for bulit list\\n\\t\\t\\t\\t\\t\\tnodeFound = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tvar temp='';\\n\\t\\t\\twhile(i !== l) switch((n = j[i++]).nodeType) {\\n\\n\\t\\t\\t  case ELEMENT: temp +=tw(n, true, LOCALE,bullit); break;\\n\\t\\t\\t  case TEXT:    temp += doTrim(m,n.nodeValue); break;\\n\\t\\t\\t  case COMMENT: temp += \\\"/% \\\" +n.nodeValue +\\\" %/\\\";break;\\n\\t\\t\\t  \\n\\n\\t\\t\\t} \\n\\t\\t\\tif (tofoot===true) footer += temp; else k += temp;\\n\\t\\t\\t\\n\\t\\t\\tvar kk='blank';\\n\\t\\t\\tif (!outer) return trimNl(k);\\n\\t\\t\\tfor (var name in Tname) {\\n\\t\\t\\t\\tif (name === m) {\\n\\t\\t\\t\\t\\tkk = (typeof Tname[name][1] == \\\"function\\\"?\\n\\t\\t\\t\\t\\t\\t\\t\\tTname[name][1](el, outer, LOCALE):Tname[name][1]);\\n\\t\\t\\t\\t\\t//return (k+Tname[name][1]);\\n\\t\\t\\t\\t\\t//alert ('kk '+kk);\\n\\t\\t\\t\\t\\treturn k+kk;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn k;\\n\\t\\t}; \\n\\t\\tfunction attr(el,LOCALE) {\\n\\t\\t\\tvar i = 0, j = el.attributes, k = new Array(l = j.length), l, nm,v;\\n\\t\\t\\twhile(i !== l) {\\n\\t\\t\\t\\tnm = j[i].nodeName ;\\n\\t\\t\\t\\tv = j[i].value;\\n\\t\\t\\t\\tk[i]='';\\n\\t\\t\\t\\t//check to see if src is local, add path if it is \\n\\t\\t\\t\\tif ((nm==='src')||(nm==='href')){\\n\\t\\t\\t\\t\\tvar pathStart = v.substring(0,4);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif ((pathStart==='file') ||(pathStart === 'http'))\\n\\t\\t\\t\\t\\t\\tk[i] +=nm + '=\\\"'+ v + '\\\"'; \\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tif (nm==='src') {\\n\\t\\t\\t\\t\\t\\t\\tif (!!LOCALE) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar locale = LOCALE.split('//');\\n\\t\\t\\t\\t\\t\\t\\t\\tlocale = locale[0]+'//'+locale[1].split('/')[0];\\n\\t\\t\\t\\t\\t\\t\\t\\tk[i] +=nm +  '=\\\"'+ locale+v + '\\\"';\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\telse k[i] +=nm +  '=\\\"'+v + '\\\"';\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\tk[i] +=nm +  '=\\\"'+ LOCALE+v + '\\\"';\\t\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tk[i] +=nm + '=\\\"'+ v +'\\\"';\\n\\t\\t\\t\\t//alert(nm+\\\" =\\\"+v);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\treturn (l?\\\" \\\":\\\"\\\") + k.join(\\\" \\\");\\n\\t  }\\n\\t\\t  \\n\\t\\tfunction handleSPAN(el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tvar k = '{{\\\"', style = '';\\n\\t\\t\\tvar attrlist = attr(el,LOCALE);\\n\\t\\t\\tvar empty = true;\\n\\t\\t\\tfor (var i= 0;i< attrlist.length;i++) { \\n\\t\\t\\t\\titem = attrlist[i].split(':');\\n\\n\\t\\t\\t\\tif (item[0] ==='style'){\\n\\t\\t\\t\\t\\tk +=attrlist[i].substring(6,attrlist[i].length-1).replace(/\\\"/g,\\\"'\\\")+\\\";\\\";\\n\\t\\t\\t\\t   empty = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdivStackEmpty.push(empty);\\n\\t\\t\\tif (empty === true) return '';\\n\\t\\t\\treturn k+'\\\"{\\\\newline';\\n\\t\\t}\\n\\n\\t\\tfunction handleDIV(el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tvar k = '{{\\\"', align = 'left',style = '';\\n\\t\\t\\tvar attrlist = attr(el,LOCALE);\\n\\t\\t\\tvar empty = true;\\n\\t\\t\\tfor (var i= 0;i< attrlist.length;i++) { \\n\\t\\t\\t\\titem = attrlist[i].split(':');\\n\\t\\t\\t\\tif (item[0] ==='align'){ \\n\\t\\t\\t\\t\\tk +='align:'+item[1]+\\\";\\\";\\n\\t\\t\\t\\t\\tempty = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (item[0] ==='style') {\\n\\t\\t\\t\\t\\tk +=attrlist[i].substring(6,attrlist[i].length-1).replace(/\\\"/g,\\\"'\\\")+\\\";\\\";\\n\\t\\t\\t\\t\\tempty = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdivStackEmpty.push(empty);\\n\\t\\t\\tif (empty === true) return '';\\n\\t\\t\\treturn k+'\\\"{\\\\newline';\\n\\t\\t}\\n\\t\\tfunction endDIV() {\\n\\t\\t\\tif (divStackEmpty.pop() === true) return \\\"\\\";\\n\\t\\t\\treturn '}}}';\\n\\t\\t}\\t\\n\\t\\tfunction doTrim(name, content) {\\n\\t\\t\\tvar whiteSpace = /^\\\\s+|\\\\s+$/g;\\n\\t\\t\\tif (name!=='pre') return content.replace(whiteSpace, ' ');\\n\\t\\t\\treturn content;\\n\\t\\t}\\n\\t   function trimNl(k)\\n\\t   {\\n\\t\\t   return k.replace (/(\\\\newline)+/g,\\\"\\\\newline\\\").replace (/\\\\n\\\\newline/g,\\\"\\\\n\\\").\\n\\t\\t\\t\\t\\treplace(/\\\\newline/g,\\\"\\\\n\\\").          replace(/\\\\n.*?\\\\trim\\\\|/g,\\\"\\\\n|\\\").\\n\\t\\t\\t\\t\\treplace(/\\\\|([h,f])\\\\trim.*?\\\\n/g,\\\"|$1\\\\n\\\").     replace(/\\\\trim/g,\\\"\\\");//replace(/\\\\trim/g,\\\"\\\\n\\\");tiddler\\tfunction\\n\\t\\t  }\\n\\t\\tfunction trimNewLines(k,term) { \\n\\t\\t\\tif ((term.length >6) &&(term.substring(0,7) === '\\\\newline')) {\\n\\t\\t\\t\\ttt = term.substring(7,term.length);\\n\\t\\t\\t\\tif ((k.length > 1) &&(k.substring(k.length-1,k.length)==='\\\\n')) return k + tt;\\n\\t\\t\\t\\telse return (k + '\\\\n' + tt);\\n\\t\\t\\t}\\n\\t\\t\\treturn k + term;\\n\\t\\t}\\n\\t\\t\\n\\t\\tfunction handleBreak (el, outer, LOCALE,parentbullit,bullitstack) \\t{\\n\\t\\t\\tif (intable === true) return '<<br>>';\\n\\t\\t\\treturn \\\"\\\\n\\\";\\n\\t\\t}\\n\\t\\t\\n\\t\\tfunction handleBullit(el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tvar bullit;// = parentbullit[parentbullit.length-1];\\n\\t\\t\\tfor (var i =0 ; i < parentbullit.length; i++) {\\n\\t\\t\\t\\tbullit = parentbullit[parentbullit.length-1-i];\\n\\t\\t\\t\\tif ((bullit === 'dl')||(bullit === 'ul')||(bullit === 'ol')) break;\\n\\t\\t\\t}\\n\\t\\t\\t//if (i === parentbullit.length) alert (\\\"error\\\");\\n\\n\\t\\t\\tif ((this[2] ==='dt')&&(bullit === 'dl')){ return '\\\\newline'+handleBullitList(parentbullit)+';';}\\n\\t\\t\\tif (bullit === 'ul') { return '\\\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i) +'*';}\\n\\t\\t\\tif (bullit === 'ol') { return '\\\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i)+'#';}\\n\\t\\t\\tif (bullit === 'dl') { return '\\\\newline'+handleBullitList(parentbullit,parentbullit.length-1-i)+':';}\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\n\\n\\t\\tfunction handleBullitList(parentbullit,end) {\\n\\t\\t\\tif (parentbullit.length < 1) return;\\n\\t\\t\\t\\n\\t\\t\\tvar bullitInner = parentbullit[end-1];\\n\\t\\t\\tfor (var i =end-1 ; i>-1; i--) {\\n\\t\\t\\t\\tbullitInner = parentbullit[i];\\n\\t\\t\\t\\tif ((bullitInner === 'dt')||(bullitInner === 'li')||(bullitInner === 'dd')) break;\\n\\t\\t\\t}\\n\\t\\t\\tif (i === end) { alert (\\\"error\\\"); return;}\\n\\t\\t\\tend = i;\\n\\t\\t\\tvar bullitOuter = parentbullit[end-1];\\n\\t\\t\\tfor (var i =end-1 ; i>-1; i--) {\\n\\t\\t\\t\\tbullitOuter = parentbullit[i];\\n\\t\\t\\t\\tif ((bullitOuter === 'dl')||(bullitOuter === 'ul')||(bullitOuter === 'ol')) break;\\n\\t\\t\\t}\\n\\t\\t\\tif (i === end) { alert (\\\"error\\\"); return;}\\n\\t\\t\\t//parentbullit=parentbullit.substring(0,parentbullit.length-4);\\n\\t\\t\\t\\n\\t\\t\\tif ((bullitInner ==='dt')&&(bullitOuter === 'dl')){ return handleBullitList(parentbullit,i)+';';}\\n\\t\\t\\tif (bullitOuter === 'ul') { return handleBullitList(parentbullit,i)+'*';}\\n\\t\\t\\tif (bullitOuter === 'ol') { return handleBullitList(parentbullit,i)+'#';}\\n\\t\\t\\tif (bullitOuter === 'dl') { return handleBullitList(parentbullit,i)+':';}\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction handleLink (el, outer, LOCALE) {\\n\\t\\t\\treturn  '|' +el.getAttribute(\\\"href\\\") +']]';\\n\\t\\t}\\n\\t\\tfunction handlebq (el, outer, LOCALE,parentbullit,bullitstack)\\t{\\n\\t\\t\\tvar bullit;// = parentbullit[parentbullit.length-1];\\n\\t\\t\\tvar outline = '\\\\newline>';\\n\\t\\t\\tfor (var i =parentbullit.length-1 ; i >-1; i--) {\\n\\t\\t\\t\\tbullit = parentbullit[i];\\n\\t\\t\\t\\tif (bullit === 'bq') outline += '>';\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn outline;\\n\\t\\t}\\n\\n\\n\\t\\tfunction handleTabBg (el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tfor (var i = 0; i < MAXCOL; i++) spanDwCounters[i]=0;\\n\\t\\t\\tfoot = false;\\n\\t\\t\\ttofoot = false;\\n\\t\\t\\thead = false;\\n\\t\\t\\tfooter = '';\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction handleTheadBg() {\\n\\t\\t\\thead = true; //flag to put header char on each of row\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction handleTbodyBg() {\\n\\t\\t\\ttofoot=false;\\n\\t\\t\\thead = false;\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction handleTfootBg() {\\n\\t\\t\\tfoot = true; //flag to put foot char on each of row\\n\\t\\t\\ttofoot =true;//when footer html is before body save to temp area then append\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction handleTabEnd(){\\n\\t\\t\\tif (foot===true)\\n\\t\\t\\treturn footer + \\\"f\\\\newline\\\"; //move footer to end of table\\n\\t\\t\\telse return '\\\\newline';\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction trStart (el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tcolCount =0;\\n\\t\\t\\tif (tofoot===true) footer+='\\\\newline'; else  return '\\\\newline';\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\tfunction trEnd (){\\n\\t\\t    if (tofoot===true) { footer+='|f\\\\trim';return '';}\\n\\t\\t    if (head===true) return  '|h\\\\trim';\\n\\t\\t    return '|\\\\trim';\\n\\t\\t}\\n\\t\\tfunction tdStart (el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tvar k ='|';\\n\\t\\t\\tintable = true; //<br> are converted to <<br>> not newline due to tw formatting\\n\\t\\t\\tif (colCount === 0) k='\\\\trim|';\\n\\t\\t\\tif \\t(spanDwCounters[colCount] >1) {\\n\\t\\t\\t\\tk +='~|';\\n\\t\\t\\t\\tspanDwCounters[colCount]--;\\n\\t\\t\\t} else\\n\\t\\t\\t\\tif (this[2]==='th') k +='!';\\n\\t\\t\\tvar rowspan =  parseInt( el.getAttribute('rowspan'))|| 1;\\n\\t\\t\\tspanDwCounters[colCount]= rowspan;\\n\\t\\t\\t\\n\\t\\t\\tvar colspan =  parseInt(el.getAttribute('colspan') )|| 1;\\n\\t\\t\\t//alert(\\\"colspan \\\"+colspan);\\n\\t\\t\\tfor (var i = 0; i<colspan-1; i++) k+='>|';\\n\\t\\t\\t\\n\\t\\t\\tvar align = el.getAttribute('align') || 'none';\\n\\t\\t\\tvar style = el.getAttribute('style') || '';\\n\\t\\t\\tif (style === 'text-align: center;') align = 'center';\\n\\t\\t\\tif (style ==='text-align: right;')   align = 'right' ;\\n\\t\\t\\tif ((align ==='center')||(align ==='right')) k+=' ';\\n\\t\\t\\tif (tofoot===true)footer+=k; else return k;\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\t\\t\\n\\t\\tfunction tdEnd (el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tcolCount +=1;\\n\\t\\t\\tintable = false;\\n\\t\\t\\tvar align =  el.getAttribute('align') || 'none';\\n\\t\\t\\tvar style = el.getAttribute('style') || '';\\n\\t\\t\\tif (style === 'text-align: center;') align = 'center';\\n\\t\\t\\tif (style ==='text-align: left;')   align = 'left' ;\\n\\n\\t\\t\\tif (align ==='center') if (tofoot===true)footer+=' ';else return ' ';\\t\\n\\t\\t\\tif (align ==='left') if (tofoot===true)footer+=' '; else return ' ';\\n\\t\\t\\tif (tofoot===true)footer+='';else return '';\\n\\t\\t\\treturn '';\\n\\t\\t\\t//if (tofoot===true) alert (footer);\\n\\t\\t}\\n\\n\\t\\tfunction handleImg(el, outer, LOCALE,parentbullit,bullitstack) {\\n\\t\\t\\tvar img = el.getAttribute('src');\\n\\t\\t\\tif (!img) return '';\\n\\n\\t\\t\\tvar pathStart = img.substring(0,4);\\n\\n\\t\\t\\tif ((pathStart!=='file') && (pathStart !== 'http'))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar locale = LOCALE.split('//');\\n\\t\\t\\t\\tlocale = locale[0]+'//'+locale[1].split('/')[0];\\n\\t\\t\\t\\timg= locale+img;\\t\\n\\t\\t\\t}\\t\\n\\t\\t\\tvar alt = el.getAttribute('alt');\\n\\t\\t\\tvar align = el.getAttribute('align');\\n\\t\\t\\tvar title = el.getAttribute('title');\\n\\n\\t\\t\\tvar ret = \\\"[\\\";\\n\\t\\t\\tif (align === 'left') ret += \\\"<\\\" ;\\n\\t\\t\\tif (align === 'right') ret += \\\">\\\" ;\\n\\t\\t\\tret += \\\"img[\\\";\\n\\t\\t\\tif (title) ret += \\\"$title|\\\" \\n\\t\\t\\tret += (img+\\\"]]\\\");\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\t})(); \\n\\t\\tvar content = \\\"<html><body>\\\" + text + \\\"</body></html>\\\";\\n\\t\\t// Create the iframe\\n\\t\\tvar iframe = document.createElement(\\\"iframe\\\");\\n\\t\\tiframe.style.display = \\\"none\\\";\\n\\t\\tdocument.body.appendChild(iframe);\\n\\t\\tvar doc = iframe.document;\\n\\t\\tif(iframe.contentDocument)\\n\\t\\t\\tdoc = iframe.contentDocument; \\n\\t\\telse if(iframe.contentWindow)\\n\\t\\t\\tdoc = iframe.contentWindow.document; \\n\\t\\t// Put the content in the iframe\\n\\t\\tdoc.open();\\n\\t\\tdoc.writeln(content);\\n\\t\\tdoc.close();\\n\\t\\t// convert to tiddlytext\\n\\t\\tvar twcontent = toTW(doc.body);\\n\\t\\tiframe.parentNode.removeChild(iframe);\\n\\t\\treturn twcontent;\\n}\\n///end convert///\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/convert.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/sublink.js\":{\"text\":\"exports.name =\\\"sublink\\\";\\nexports.run  = function(link,global) {\\n\\tvar here = (this.document.location.toString().split(\\\"#\\\")[0]).replace(/(.*)\\\\/.*?$/,\\\"$1\\\");\\n\\tvar  pos = -1;\\n\\tpos = link.indexOf(here);\\n\\tif (!global && pos === 0) return \\\"./\\\" + link.substr(here.length+1);\\n\\treturn link;\\n}\\n\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/sublink.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/multitid.js\":{\"text\":\"exports.name =\\\"tomultid\\\";\\nexports.run  = function(IMPORT_TITLE,tiddler,field,value)\\n\\t{\\n\\n\\tvar tiddlers = [tiddler],\\n\\t\\tfield = field||\\\"multitid-type\\\",\\n\\t\\tvalue = value||\\\"vault\\\";\\n\\n\\t// Get the current $:/Import tiddler\\n\\tvar importTiddler = $tw.wiki.getTiddler(IMPORT_TITLE),\\n\\t\\timportData = $tw.wiki.getTiddlerData(IMPORT_TITLE,{}),\\n\\t\\tnewFields = new Object({\\n\\t\\t\\ttitle: IMPORT_TITLE,\\n\\t\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\tfield: value\\n\\t\\t}),\\n\\t\\tincomingTiddlers = [];\\n\\t// Process each tiddler\\n\\timportData.tiddlers = importData.tiddlers || {};\\n\\t$tw.utils.each(tiddlers,function(tiddlerFields) {\\n\\t\\tvar title = tiddlerFields.title;\\n\\t\\tif(title) {\\n\\t\\t\\tincomingTiddlers.push(title);\\n\\t\\t\\timportData.tiddlers[title] = tiddlerFields;\\n\\t\\t}\\n\\t});\\n\\n\\t// Save the $:/Import tiddler\\n\\tnewFields.text = JSON.stringify(importData,null,$tw.config.preferences.jsonSpaces);\\n\\t$tw.wiki.addTiddler(new $tw.Tiddler(importTiddler,newFields));\\n\\t// Update the story and history details\\n\\n\\treturn \\\"saved\\\";\\n};\\n\\n\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/multitid.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/newtitle.js\":{\"text\":\"var tiddlerExists= function(tidname) {\\n\\n\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(tidname);\\n\\t\\t\\treturn(!!tiddler);\\n\\t}\\n\\n\\nexports.name =\\\"newtitle\\\";\\nexports.run  = function(baseTitle,ext) {\\n\\tvar i,dot=\\\"\\\";\\n\\tbaseTitle =  baseTitle.replace(/#|<|>|\\\\:|\\\\\\\"|\\\\||\\\\?|\\\\*|\\\\/|\\\\\\\\|\\\\^/g,\\\"_\\\");\\n\\tif (ext) dot = \\\".\\\";\\n\\text = ext ||\\\"\\\";\\n\\tvar c = 0,\\n\\ttitle = baseTitle +dot+ ext;\\n\\twhile(tiddlerExists(title) ) {\\n\\t\\ttitle = baseTitle + \\\"-\\\" + (++c) +dot+ ext;\\n\\t}\\n\\treturn title;\\n}\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/newtitle.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/csaver.js\":{\"text\":\"function save (text,method,callback,options) {\\n\\toptions = options || {};\\n\\t// Get the current filename\\n\\tvar filename = options.variables.filename;\\n\\tif(!filename) {\\n\\t\\tvar p = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tfilename = document.location.pathname.substr(p+1);\\n\\t\\t}\\n\\t}\\n\\tif(!filename) {\\n\\t\\tfilename = \\\"tiddlywiki.html\\\";\\n\\t}\\n\\t// Set up the link\\n\\tvar link = document.createElement(\\\"a\\\");\\n\\n\\tlink.setAttribute(\\\"href\\\",\\\"data:image/png;base64,\\\"+text);\\n\\n\\tlink.setAttribute(\\\"download\\\",filename);\\n\\tdocument.body.appendChild(link);\\n\\tlink.click();\\n\\tdocument.body.removeChild(link);\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n\\n\\n function csaver(text,cname,subdir,callback) {\\n\\tvar messageBox = document.getElementById(\\\"csaver-message-box\\\");\\n\\tif(messageBox) {\\n\\t\\tcname = cname.replace(/<|>|\\\\:|\\\\\\\"|\\\\||\\\\?|\\\\*|\\\\/|\\\\\\\\|\\\\^/g,\\\"_\\\");\\n\\t\\t// Create the message element and put it in the message box\\n\\t\\tvar message = document.createElement(\\\"div\\\");\\n\\t\\tmessage.setAttribute(\\\"data-csaver-contentname\\\",decodeURIComponent(cname));\\n\\t\\tmessage.setAttribute(\\\"data-csaver-content\\\",text);\\n\\t\\tmessage.setAttribute(\\\"data-csaver-subdir\\\",subdir);\\n\\t\\tmessage.setAttribute(\\\"data-csaver-taget-type\\\",\\\"image/png\\\");\\n\\t\\tmessageBox.appendChild(message);\\n\\t\\t// Add an event handler for when the file has been saved\\n\\t\\tmessage.addEventListener(\\\"csaver-have-saved-file\\\",function(event) {\\n\\t\\t\\tcallback(null);\\n\\t\\t}, false);\\n\\t\\t// Create and dispatch the custom event to the extension\\n\\t\\tvar event = document.createEvent(\\\"Events\\\");\\n\\t\\tevent.initEvent(\\\"csaver-save-file\\\",true,false);\\n\\t\\tmessage.dispatchEvent(event);\\n     return subdir?subdir+'/'+cname:cname;\\n\\t} else {\\n\\t\\treturn \\\"error no saver extension found\\\";\\n\\t}\\n};\\n\\n\\n\\n\\nexports.name =\\\"csaver\\\";\\nexports.run  = function(title,text)\\n\\t{\\nvar subdir = \\\"media\\\";\\nif (!text) return \\\"\\\";\\nreturn csaver(text,title,subdir,function (){alert(\\\"dl'ed\\\")});\\n\\n\\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/csaver.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/send.js\":{\"text\":\" function send(action,text,aux,extra) {\\n\\tvar message = document.createElement(\\\"div\\\") ,messageBox = document.getElementById(\\\"tiddlyclip-message-box\\\");\\n\\tif(messageBox) {\\n\\t\\tmessage.setAttribute(\\\"data-action\\\",action);\\n\\t\\tmessage.setAttribute(\\\"data-text\\\",text||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-aux\\\",aux||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-extra\\\",extra||\\\"\\\");\\n\\t\\tmessageBox.appendChild(message);\\n\\t\\t\\n\\t\\t// Create and dispatch the custom event to the extension\\n\\t\\tvar event = document.createEvent(\\\"Events\\\");\\n\\t\\tevent.initEvent(\\\"tc-send-event\\\",true,false);\\n\\t\\tmessage.dispatchEvent(event);\\n     return \\\"sent\\\";\\n\\t} else {\\n\\t\\treturn \\\"error no  extension found\\\";\\n\\t}\\n};\\n\\n\\n\\n\\nexports.name =\\\"send\\\";\\nexports.run  = function(action,text,aux,extra) {\\n\\tif (!action) return \\\"nothing to do!\\\";\\n\\t//if docking, set the config to this table for mapping returned clips\\n\\tif (action === \\\"dock\\\") {\\n\\t\\tvar ob = JSON.parse(text),opts = JSON.parse(aux);\\n\\t\\ttiddlyclip.modules.tPaste.setconfig(ob.text,ob.title);\\n\\t\\ttiddlyclip.modules.tPaste.setopts(opts.text,opts.title);\\n\\t\\textra = extra || document.title;\\n\\t}\\n\\treturn  send(action,text,aux,extra);\\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/send.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/senddelayed.js\":{\"text\":\" function send(action,text,aux,extra) {\\n\\n\\n\\tvar message = document.createElement(\\\"div\\\") ,messageBox = document.getElementById(\\\"tiddlyclip-message-box\\\");\\n\\tif(messageBox) {\\n\\t\\tmessage.setAttribute(\\\"data-action\\\",action);\\n\\t\\tmessage.setAttribute(\\\"data-text\\\",text||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-aux\\\",aux||\\\"\\\");\\n\\t\\tmessage.setAttribute(\\\"data-extra\\\",extra||\\\"\\\");\\n\\t\\tmessageBox.appendChild(message);\\n\\t\\t\\n\\t\\t// Create and dispatch the custom event to the extension\\n\\t\\tvar event = document.createEvent(\\\"Events\\\");\\n\\t\\tevent.initEvent(\\\"tc-send-event\\\",true,false);\\n\\t\\tmessage.dispatchEvent(event);\\n     return \\\"sent\\\";\\n\\t} else {\\n\\t\\treturn \\\"error no  extension found\\\";\\n\\t}\\n};\\n\\n\\n\\n\\nexports.name =\\\"senddelayed\\\";\\nexports.run  = function(delay,action,text,aux,extra) {\\n\\tthisDelay = parseInt(delay,10);\\n\\tif (!action) return \\\"nothing to do!\\\";\\n\\t//if docking, set the config to this table for mapping returned clips\\n\\tif (action === \\\"dock\\\") {\\n\\t\\tvar ob = JSON.parse(text),opts = JSON.parse(aux);\\n\\t\\ttiddlyclip.modules.tPaste.setconfig(ob.text,ob.title);\\n\\t\\ttiddlyclip.modules.tPaste.setopts(opts.text,opts.title);\\n\\t\\textra = extra || document.title;\\n\\t}\\nsetTimeout(function(){ send(action,text,aux,extra);}, thisDelay);\\n\\treturn  'delayed'\\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/senddelayed.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/makeobj.js\":{\"text\":\"exports.name =\\\"makeobj\\\";\\nexports.run  = function(text,title) {\\n\\nreturn JSON.stringify({text:text,title:title});\\n \\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/makeobj.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/addsets.js\":{\"text\":\"exports.name =\\\"addsets\\\";\\nexports.run  = function(base,ext) {\\n\\tvar found, i, j, list=ext.split(' '), oldbase=base.split(' ');\\n\\tfor (i=0;i<list.length;i++) {\\n              found = false;\\n               for (j=0;j<oldbase.length;j++) {\\n                      if (oldbase[j].trim()===list[i].trim()) found = true;\\n               }\\n              if (!found) base = base + ' ' + list[i];\\n}\\n\\n\\treturn base.trim();\\n}\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/addsets.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/subtractset.js\":{\"text\":\"exports.name =\\\"subtractset\\\";\\nexports.run  = function(base,ext) {\\n\\tvar found, i, j,newbase='', list=ext.split(' '), oldbase=base.split(' ');\\n\\tfor (i=0;i<oldbase.length;i++) {\\n              found = false;\\n               for (j=0;j<list.length;j++) {\\n                      if (oldbase[i].trim()===list[j].trim()) found = true;\\n               }\\n              if (!found) newbase = newbase + ' ' + oldbase[i];\\n}\\n\\n\\treturn newbase.trim();\\n}\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/subtractset.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/dock.js\":{\"text\":\"\\nexports.name =\\\"dock\\\";\\nexports.run  = function(configobj,aux,name) {\\nvar config = $tw.wiki.getTiddler(configobj) || {fields:{}};\\nvar other =  $tw.wiki.getTiddler(aux) || {fields:{}};\\nname = name || document.title;\\ntPaste.setconfig(config.fields.text,config.fields.title);\\nreturn tiddlyclip.modules.dodock(JSON.stringify(config.fields),name,JSON.stringify(other.fields));\\n\\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/dock.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/download.js\":{\"text\":\"exports.name =\\\"download\\\";\\nexports.run  = function(title,text)\\n\\t{\\n\\nsave(text,\\\"download\\\",function (){/*alert(\\\"dl'ed\\\")*/},{variables: {filename: title}});\\nconsole.log(\\\"download\\\");\\n\\treturn \\\"saving\\\";\\n};\\n\\n\\nfunction save (text,method,callback,options) {\\n\\toptions = options || {};\\n\\t// Get the current filename\\n\\tvar filename = options.variables.filename;\\n\\tif(!filename) {\\n\\t\\tvar p = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tfilename = document.location.pathname.substr(p+1);\\n\\t\\t}\\n\\t}\\n\\tif(!filename) {\\n\\t\\tfilename = \\\"tiddlywiki.html\\\";\\n\\t}\\n\\t// Set up the link\\n\\tvar link = document.createElement(\\\"a\\\");\\n\\n\\tlink.setAttribute(\\\"href\\\",text);\\n\\n\\tlink.setAttribute(\\\"download\\\",filename);\\n\\tdocument.body.appendChild(link);\\n\\tlink.click();\\n\\tdocument.body.removeChild(link);\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/download.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/assign.js\":{\"text\":\"/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar widget = new Widget();\\nwidget.wiki = $tw.wiki;\\nvar doAssign = function(str) {\\nvar x, contents = str.replace(/\\\\{\\\\{(.+)\\\\}\\\\}/,\\\"$1\\\").trim();\\n\\t\\n\\tx= compute(contents,widget);\\n    if (typeof x === 'string') return x;\\n    return str+\\\" is undefined\\\";\\n\\n};\\n\\nvar compute = function (str, widget) {\\n    var x, subtid = str.split('->');\\n    if (subtid.length ===2) {\\n        x=widget.wiki.getSubTiddler(subtid [0],subtid [1]);console.log(JSON.stringify(x));\\n        return x? (x.fields.text) : \\\"\\\";\\n    };\\n\\treturn widget.wiki.getTextReference(str);\\n}\\n\\nexports.run = doAssign;\\nexports.symbol = ':';\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/assign.js\",\"tags\":\"$:/tags/tiddlyclipparser\",\"module-type\":\"library\"},\"$:/plugins/bj/tiddlyclip/makejsontids.js\":{\"text\":\"exports.name =\\\"mkjsontids\\\";\\r\\nexports.run = function(filter) \\r\\n{\\r\\n    var tids=[], tiddlers = $tw.wiki.filterTiddlers(filter);\\r\\n    for(var t=0;t<tiddlers.length; t++) {\\r\\n        var tiddler = $tw.wiki.getTiddler(tiddlers[t]);\\r\\n        if(tiddler) {\\r\\n            var fields = new Object();\\r\\n            for(var field in tiddler.fields) {\\r\\n                fields[field] = tiddler.getFieldString(field);\\r\\n            }\\r\\n            tids.push(fields);\\r\\n        }\\r\\n    }\\r\\n    return JSON.stringify(tids);\\r\\n};\\r\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/bj/tiddlyclip/makejsontids.js\",\"tags\":\"$:/tags/tiddlyclip\",\"module-type\":\"library\"},\"SnapRuleMode\":{\"title\":\"SnapRuleMode\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[{\\\"#nosnap\\\":\\\"nosave\\\"\\t},{\\\"#newdata\\\":\\\"((*!@exists(@snap)*??*#nosnap*)) inc add\\\"}]\\n\"},\"TcSysDetail\":{\"title\":\"TcSysDetail\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\n|LogClip|((*@dateTimeShort*))\\\\n\\\\n((*@wikifile*))\\\\n\\\\n((*@wikititle*))\\\\n\\\\n||{\\\"$when\\\":\\\"((*@dateTimeShort*))\\\"}||append add nosave|\\n\\t\\t\\t\\n\"},\"TiddlyClipConfig\":{\"title\":\"TiddlyClipConfig\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!default\\n|!Category|!Tip|!Tags|!Rule Tid|!Modes|\\n|Tid|copy tids||[[defaultTid]]|tiddlers|\\n|Snip|copy||[[defaultSnip]]||\\n|Pin|pin it||[[defaultPin]]||\\n|Snap|screen shot||[[defaultSnap]]|snap|\\n\"},\"TiddlyClipSys\":{\"title\":\"TiddlyClipSys\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!sys\\r\\n|!Category|!Tip|!Tags|!Rule Tid|!Modes|\\r\\n|refocused|||[[TcSysDetail]]||\\r\\n|tcfltreq|||[[filterReqDetail]]||\\r\\n\"},\"$:/config/EditorTypeMappings/application/json\":{\"title\":\"$:/config/EditorTypeMappings/application/json\",\"text\":\"json\\n\"},\"$:/bj/tiddlyclip/textparser.js\":{\"title\":\"$:/bj/tiddlyclip/textparser.js\",\"text\":\"/*\\\\\\ntitle: $:/bj/tiddlyclip/textparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe plain text parser processes blocks of source text into a degenerate parse tree consisting of a single text node\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar TextParser = function(type,text,options) {\\n\\tthis.tree = [{\\n\\t\\ttype: \\\"codeblock\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tcode: {type: \\\"string\\\", value: text},\\n\\t\\t\\tlanguage: {type: \\\"string\\\", value: type}\\n\\t\\t}\\n\\t}];\\n};\\n\\n\\nexports[\\\"application/x-bclip\\\"] = TextParser;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/plugins/bj/tiddlyclip/ui/Buttons/tiddlyclip\":{\"title\":\"$:/plugins/bj/tiddlyclip/ui/Buttons/tiddlyclip\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"Clip Content\",\"description\":\"configure tiddlyclip\",\"text\":\"<$button to=\\\"TiddlyClipConfig\\\" title=\\\"top  clip table\\\" aria-label=\\\"top  clip table\\\" class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>prefix[yes]]\\\">\\n{{$:/plugins/bj/tiddlyclip/icon}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>prefix[yes]]\\\">\\n<$text text=\\\"top  clip table\\\"/>\\n</$list>\\n</$button>\\n\"},\"$:/plugins/bj/tiddlyclip/icon\":{\"title\":\"$:/plugins/bj/tiddlyclip/icon\",\"tags\":\"$:/tags/Image\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\n<svg  class=\\\"tc-image-import-button tc-image-button\\\"  preserveAspectRatio=\\\"none\\\"\\n width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 32 28\\\"\\n  >  \\n   <g\\n     transform=\\\"matrix(0.06516688,0,0,0.08453159,-13.159611,-17.662411)\\\"\\n     id=\\\"layer1\\\"\\n     style=\\\"fill:#241f1c\\\">\\n    <path\\n       d=\\\"m 557.14285,368.07648 a 142.85715,150 0 1 1 -285.71429,0 142.85715,150 0 1 1 285.71429,0 z\\\"\\n       id=\\\"path3010\\\"\\n       style=\\\"fill:#241f1c;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\\\" />\\n  </g>\\n  <g\\n     transform=\\\"matrix(0.08280307,-0.10351736,0.08103997,0.10535593,3.3717294,13.619584)\\\"\\n     id=\\\"g3460\\\"\\n     style=\\\"fill:#ffffff;fill-rule:evenodd\\\">\\n    <path\\n       d=\\\"m 105.44944,94.213895 c 0,0 4.60002,-0.02418 4.60002,5.188716 0,5.212899 -4.88621,5.212899 -4.88621,5.212899 l -60.155743,0.54232 c 0,0 -44.6399752,1.13201 -44.63997463,-38.512909 C 0.36753293,27 45.042825,27 45.042825,27 l 60.489665,0 c 0,0 33.46425,-1.326501 33.46425,28.177187 0,29.503688 -33.26964,27.668566 -33.26964,27.668566 l -49.553591,0 c 0,0 -33.483586,2.304269 -33.483586,-16.754378 0,-19.058647 33.483586,-16.753074 33.483586,-16.753074 l 49.553591,0 c 0,0 5.51811,10e-7 5.51811,5.484811 0,5.484809 -5.51811,5.68434 -5.51811,5.68434 l -49.553591,0 c 0,0 -18.684379,10e-7 -18.684379,6.137467 0,6.137467 18.684379,5.031683 18.684379,5.031683 l 49.553591,10e-7 c 0,0 22.10845,1.464544 22.10845,-16.499416 0,-19.646785 -22.10845,-16.873655 -22.10845,-16.873655 l -60.684275,0 c 0,0 -33.514097,-10e-7 -33.514097,28.341389 0,28.341389 33.514096,27.313047 33.514096,27.313047 l 60.406616,0.255927 z\\\"\\n       transform=\\\"matrix(0.70710678,-0.70710678,0.70710678,0.70710678,-26.351768,68.381205)\\\"\\n       id=\\\"path3462\\\"\\n       style=\\\"fill:#ffffff\\\" />\\n\\n\\n  </g>\\n</svg>\\n\"},\"defaultPin\":{\"title\":\"defaultPin\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\n|((*@pageTitle*))|((*@pageRef*))\\\\n\\\\n[img[((*@onImage*??*@imageURL*??*@largestImgURL*))]]\\\\n\\\\n((*@text*))\\\\n\\\\n((*@exists(@userstring)*??*@userstring*))|||[[$:/bj/tc/snipmetadata]]|inc add|\\n\"},\"defaultSnap\":{\"title\":\"defaultSnap\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\n|((*@pageTitle*))/thumbprint|((*@exists(@snap)*??*@snap*))|ClippedImage||[[$:/bj/tc/snapmetadata]]|[[$:/bj/tc/SnapRuleMode]]|\\n|((*@pageTitle*))|((*@pageRef*))\\\\n\\\\n{{((*@pageTitle*))/thumbprint}}\\\\n\\\\n((*@text*))\\\\n\\\\n|||[[$:/bj/tc/snipmetadata]]|append add|\\n\"},\"defaultSnip\":{\"title\":\"defaultSnip\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\n|((*@pageTitle*))|((*@pageRef*))\\\\n\\\\n((*@text*))\\\\n\\\\n|||[[$:/bj/tc/snipmetadata]]|append add|\\n\\t\\t\\t\\t\\t\\t\\n\"},\"defaultTid\":{\"title\":\"defaultTid\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\n||||[[$:/bj/tc/tidmetadata]]||no-textsaver import|\\n\\n\\n\"},\"filterReqDetail\":{\"title\":\"filterReqDetail\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\rules only table wikilink prettylink\\n\\n|!Title|!Body|!Tags|!Fields modifiers|!field initials|!Modes|\\r\\n|filterRequest||||[[$:/bj/tcfilterrequest]]|nosave|\\r\\n\\t\\t\\t\\r\\n\"},\"$:/plugins/bj/tiddlyclip/readme\":{\"title\":\"$:/plugins/bj/tiddlyclip/readme\",\"text\":\"tiddlyclip webcontent clipper\\n\"},\"$:/bj/tc/snapmetadata\":{\"title\":\"$:/bj/tc/snapmetadata\",\"type\":\"application/x-bclip\",\"text\":\"$type=image/png\\n$when=((*@dateTimeShort*))\\n$location=((*@pageRef*))\\n$caption=((*@pageTitle*))\\n\"},\"$:/bj/tc/SnapRuleMode\":{\"title\":\"$:/bj/tc/SnapRuleMode\",\"type\":\"application/x-bclip\",\"text\":\"#nosnap=nosave\\n#newdata=((*!@exists(@snap)*??*#nosnap*)) inc add\\n\"},\"$:/bj/tc/snipmetadata\":{\"title\":\"$:/bj/tc/snipmetadata\",\"type\":\"application/x-bclip\",\"text\":\"$when=((*@dateTimeShort*))\\n$location=((*@pageRef*))\\n$caption=((*@pageTitle*))\\n\"},\"$:/plugins/bj/tiddlyclip/tcadapter.js\":{\"title\":\"$:/plugins/bj/tiddlyclip/tcadapter.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/bj/tiddlyclip/tcadapter.js\\r\\ntype: application/javascript\\r\\nmodule-type: widget\\r\\n\\\\*/\\r\\n\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\r\\n\\r\\nif($tw.browser) {\\r\\n\\trequire(\\\"$:/plugins/bj/tiddlyclip/tidpaste.js\\\");\\r\\n}\\r\\nvar CreateTiddlerWidget = function(parseTreeNode,options) {\\r\\n\\tthis.initialise(parseTreeNode,options);\\r\\n\\tthis.addEventListeners([\\r\\n\\t\\t{type: \\\"tiddlyclip-create\\\", handler: \\\"handleTiddlyclipEvent\\\"}\\r\\n\\t]);\\r\\n};\\r\\n\\r\\nfunction getModificationFields(fields) {\\r\\n\\tif(fields && typeof fields.modified === \\\"string\\\") return {};\\r\\n\\treturn $tw.wiki.getModificationFields();\\r\\n}\\r\\n/*\\r\\nInherit from the base widget class\\r\\n*/\\r\\nCreateTiddlerWidget.prototype = new Widget();\\r\\n\\r\\n/*\\r\\nRender this widget into the DOM\\r\\n*/\\r\\nCreateTiddlerWidget.prototype.render = function(parent,nextSibling) {\\r\\n\\tthis.parentDomNode = parent;\\r\\n\\tthis.computeAttributes();\\r\\n\\tthis.execute();\\r\\n\\tthis.renderChildren(parent,nextSibling);\\r\\n}\\r\\n\\r\\nCreateTiddlerWidget.prototype.getTiddlerList = function() {\\r\\n\\tvar defaultFilter = \\\"[all[shadows+tiddlers]tag[$:/tags/tiddlyclip]]\\\";\\r\\n\\treturn this.wiki.filterTiddlers(defaultFilter,this);\\r\\n}\\r\\n\\r\\nCreateTiddlerWidget.prototype.getTiddlerOparserList = function() {\\r\\n\\tvar defaultFilter = \\\"[all[shadows+tiddlers]tag[$:/tags/tiddlyclipparser]]\\\";\\r\\n\\treturn this.wiki.filterTiddlers(defaultFilter,this);\\r\\n}\\r\\n/*\\r\\nCompute the internal state of the widget\\r\\n*/\\r\\nCreateTiddlerWidget.prototype.execute = function() {\\r\\n\\tvar self = this;\\r\\n\\t// Get our parameters here we could allow an module to modify the plugin\\r\\n\\t// Get the commands and place them in the tiddlyclip structure to expose them to the user\\r\\n\\ttiddlyclip.dates=function(){\\r\\n\\t\\tvar dates ={};\\r\\n\\t\\tvar dateLong=    'DDD, MMM DDth, YYYY';\\r\\n\\t\\tvar dateTimeLong='DDD, MMM DDth, YYYY at hh12:0mm:0ss am';\\t\\r\\n\\t\\tvar dateShort=   'DD MMM YYYY';//journal form\\r\\n\\t\\tvar dateTimeShort=   'YYYY/MM/DD 0hh:0mm:0ss';//journal form\\r\\n\\t\\tvar hours = \\\"0hh\\\";\\r\\n\\t\\tvar minutes = \\\"0mm\\\";\\r\\n\\t\\t\\r\\n\\t\\tdates.yearMonth=$tw.utils.stringifyDate(new Date()).replace(/(.*)\\\\.(.*)/,\\\"$1\\\").substr(0,6);\\r\\n\\t\\tdates.dateTimeLong=   $tw.utils.formatDateString(new Date(),dateTimeLong);\\t\\r\\n\\t\\tdates.dateLong=       $tw.utils.formatDateString(new Date(),dateLong);\\t\\t\\r\\n\\t\\tdates.dateShort=      $tw.utils.formatDateString(new Date(),dateShort);\\t       \\r\\n\\t\\tdates.dateComma=     dates.dateShort.toString().replace(/ /g,':');\\r\\n\\t\\tdates.dateTimeShort=  $tw.utils.formatDateString(new Date(),dateTimeShort);\\r\\n\\t\\tdates.nowhours=  \\t$tw.utils.formatDateString(new Date(),hours);\\r\\n\\t\\tdates.nowminutes=  \\t$tw.utils.formatDateString(new Date(),minutes);\\r\\n\\t\\treturn dates;\\r\\n\\t}\\r\\n\\ttiddlyclip.getDefaultRule=function (ruleName) {\\r\\n\\t\\tvar defaultRules = {\\r\\n\\t\\t\\tdefaultTid:'||||{\\\"#type\\\":\\\"text/x-tiddlywiki\\\"},{\\\"$type\\\":\\\"((*@classic*??*#type*??*@abort()*))\\\"}||no-textsaver import|',\\r\\n\\t\\t\\tdefaultSnip:\\r\\n\\t\\t\\t'|((*@pageTitle*))/thumbprint|((*@exists(@snap)*??*@snap*))|ClippedImage|'+\\r\\n\\t\\t\\t'|{\\\"$type\\\":\\\"image/png\\\"},{\\\"$when\\\":\\\"((*@dateTimeShort*))\\\"},{\\\"$location\\\":\\\"((*@pageRef*))\\\"}|[[SnapRuleMode]]|'+\\r\\n\\t\\t\\t'|((*@pageTitle*))|((*@pageRef*))\\\\\\\\n\\\\\\\\n{{((*@pageTitle*))/thumbprint}}\\\\\\\\n\\\\\\\\n((*@text*))\\\\\\\\n\\\\\\\\n||'+\\r\\n\\t\\t\\t'|{\\\"$location\\\":\\\"((*@pageRef*))\\\"},{\\\"$caption\\\":\\\"((*@pageTitle*))\\\"},{\\\"$when\\\":\\\"((*@dateTimeShort*))\\\"}||',\\r\\n\\t\\t\\tdefaultPin: '|((*@pageTitle*))|((*@pageRef*))\\\\\\\\n\\\\\\\\n[img[((*@onImage*??*@imageURL*??*@largestImgURL*))]]\\\\\\\\n\\\\\\\\n((*@text*))\\\\\\\\n\\\\\\\\n((*@exists(@userstring)*??*@userstring*))||'+\\r\\n\\t\\t\\t\\t\\t\\t'|{\\\"$location\\\":\\\"((*@pageRef*))\\\"},{\\\"$caption\\\":\\\"((*@pageTitle*))\\\"},{\\\"$when\\\":\\\"((*@dateTimeShort*))\\\"}|inc|'\\r\\n\\t\\t}\\r\\n\\t\\treturn defaultRules[ruleName];\\r\\n\\t}\\r\\n\\ttiddlyclip.defaultCategories = [\\r\\n\\t\\t\\\"|Tid|copy tids||defaultTid|tiddlers|\\\",\\r\\n\\t\\t\\\"|Snip|copy||defaultSnip||\\\",\\r\\n\\t\\t\\\"|Pin|Pin it||defaultPin||\\\"\\r\\n\\t];\\r\\n\\r\\n\\ttiddlyclip.defs = {\\r\\n\\t}\\r\\n\\ttiddlyclip.getMultiTidTitle = function(title) {\\r\\n\\t\\tvar p = title.indexOf(\\\"->\\\"), container, tid;\\r\\n\\t\\tif(p !== -1 && title.substr(0, 8) !== \\\"Draft of\\\") {\\r\\n\\t\\t\\tcontainer = title.substr(0, p).trim();\\r\\n\\t\\t\\ttid = title.substr(p+2).trim();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttid = title;\\r\\n\\t\\t}\\r\\n\\t\\treturn {container:container, title:tid};\\r\\n\\t}\\r\\n\\ttiddlyclip.newProtoTiddler = function (){\\r\\n\\t\\tvar tid = new $tw.Tiddler($tw.wiki.getCreationFields(),getModificationFields({}));\\r\\n\\t\\tvar current = {fields:{}};\\r\\n\\t\\tfor (var atr in tid.fields){ \\r\\n\\t\\t\\tcurrent.fields[atr]=tid.getFieldString(atr);\\t\\r\\n\\t\\t}\\r\\n\\t\\treturn current;\\t\\r\\n\\t}\\r\\n\\ttiddlyclip.modifyTW= function(fields){\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(fields.title), tid;\\r\\n\\t\\tif(!tiddler.container) {\\r\\n\\t\\t\\tthis.modifyTWsimple(fields);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t//remove container from title\\t\\r\\n\\t\\tfields.title = \\ttiddler.title;\\r\\n\\t\\tvar container =  $tw.wiki.getTiddler(tiddler.container), text;\\r\\n\\t\\tif (container) {\\r\\n\\t\\t\\ttext = JSON.parse(container.fields.text);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttext = {tiddlers:{}};\\r\\n\\t\\t}\\r\\n\\t\\t//add the new subtiddler\\r\\n\\t\\ttext.tiddlers[tiddler.title] = fields;\\r\\n\\t\\t//modify name to be the subtiddler\\r\\n\\t\\ttext.tiddlers[tiddler.title].title = tiddler.title;\\r\\n\\t\\tvar updateFields = {\\r\\n\\t\\t\\ttitle: tiddler.container,\\r\\n\\t\\t\\ttext: JSON.stringify(text)\\r\\n\\t\\t};\\t\\r\\n\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),container,updateFields,getModificationFields()));\\t\\r\\n\\r\\n\\t}\\r\\n\\ttiddlyclip.modifyTWsimple= function(fields){\\t\\r\\n\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(fields,getModificationFields(fields)));\\r\\n\\t}\\r\\n\\ttiddlyclip.getNewTitle= function(baseTitle,options) {\\r\\n\\t\\toptions = options || {};\\r\\n\\t\\tvar c = 0,\\r\\n\\t\\t\\ttitle = baseTitle;\\r\\n\\t\\twhile(this.tiddlerExists(title) ) {\\r\\n\\t\\t\\ttitle = baseTitle + \\r\\n\\t\\t\\t\\t(options.prefix || \\\"-\\\") + \\r\\n\\t\\t\\t\\t(++c);\\r\\n\\t\\t}\\r\\n\\t\\treturn title;\\r\\n\\t}\\r\\n\\ttiddlyclip.getTidContents= function(tidname) {\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(tidname);\\r\\n\\t\\tif(tiddler.container) {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getSubTiddler(tiddler.container,tiddler.title);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getTiddler(tiddler.title);\\r\\n\\t\\t}\\r\\n\\t\\tif (tiddler && tiddler.fields) {\\r\\n\\t\\t\\treturn tiddler.fields.text;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\ttiddlyclip.getTiddlerData = $tw.wiki.getTiddlerData;\\r\\n\\t\\r\\n\\ttiddlyclip.deleteTiddler = function (tid){$tw.wiki.deleteTiddler(tid);}\\r\\n\\t\\r\\ntiddlyclip.parseListFields = \\\":<\\\";\\r\\n\\r\\ntiddlyclip.parseListField = function(text) {\\r\\n\\tvar fields = [];\\r\\n\\ttext.split(/\\\\r?\\\\n/mg).forEach(function(line) {\\r\\n\\r\\n\\t\\tvar p = line.indexOf(\\\"=\\\"),field,value,text,q,otype=null;\\r\\n\\t\\tif(p > 0) {\\r\\n\\t\\t\\tq = p;\\r\\n\\t\\t\\totype = line.charAt(p-1);\\r\\n\\t\\t\\tif (tiddlyclip.parseListFields.indexOf(otype)!==-1) { \\r\\n\\t\\t\\t\\tp--;\\r\\n\\t\\t\\t\\ttext = line.substr(q+1).replace(\\\"\\\\\\\\n\\\",\\\"\\\\n\\\");\\r\\n\\t\\t\\t\\tvalue = {};\\r\\n\\t\\t\\t\\tvalue.parser = otype;\\r\\n\\t\\t\\t\\tvalue.text = text;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tvalue = line.substr(q+1).replace(/\\\\\\\\n/g,\\\"\\\\n\\\");\\r\\n\\t\\t\\t}\\t\\t\\t\\r\\n\\t\\t\\tfield = line.substr(0, p).trim();\\r\\n\\r\\n\\t\\t\\tif(field) {\\r\\n\\t\\t\\t\\tvar x ={};\\r\\n\\t\\t\\t\\tx[field] = value;\\r\\n\\t\\t\\t\\tfields.push(x);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\treturn fields;\\r\\n};\\r\\n\\r\\n\\t\\r\\n\\ttiddlyclip.getTidrules= function(tidname) {\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(tidname), data;\\r\\n\\t\\tif(tiddler.container) {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getSubTiddler(tiddler.container,tiddler.title);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getTiddler(tiddler.title);\\r\\n\\t\\t}\\r\\n\\t\\tif (tiddler && tiddler.fields) {\\r\\n\\t\\t\\tif (tiddler.fields.type == \\\"application/x-bclip\\\")\\t{\\r\\n\\t\\t\\t\\tvar tot =  this.parseListField(tiddler.fields.text);\\r\\n\\t\\t\\tdata = JSON.stringify(tot);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tdata = tiddler.fields.text;\\r\\n\\t\\t}\\r\\n\\t\\t\\treturn data;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t//$tw.wiki.my.logEnable= function() {tiddlyclip.logit=true};\\r\\n\\t//$tw.wiki.my.logDisable= function() {tiddlyclip.logit=false};\\r\\n\\ttiddlyclip.log= function(x) {\\r\\n\\t\\t//if (tiddlyclip.logit) \\r\\n\\t\\t//alert(x);\\r\\n\\t};\\r\\n\\ttiddlyclip.tiddlerExists= function(tidname) {\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(tidname);\\r\\n\\t\\tif(tiddler.container) {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getSubTiddler(tiddler.container,tiddler.title);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttiddler = $tw.wiki.getTiddler(tiddler.title);\\r\\n\\t\\t}\\r\\n\\t\\t\\treturn(!!tiddler);\\r\\n\\t}\\t\\r\\n\\ttiddlyclip.getTiddler= function (title) {\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(title), tid;\\r\\n\\t\\tif(tiddler.container) {\\r\\n\\t\\t\\ttid = $tw.wiki.getSubTiddler(tiddler.container,tiddler.title);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttid = $tw.wiki.getTiddler(tiddler.title);\\r\\n\\t\\t}\\r\\n\\t\\tif (!tid){\\r\\n\\t\\t\\treturn null;\\r\\n\\t\\t}\\r\\n\\t\\tvar current = {fields:{}};\\r\\n\\t\\tfor (var atr in tid.fields){ \\r\\n\\t\\t\\tcurrent.fields[atr]=tid.getFieldString(atr);\\t\\r\\n\\t\\t}\\r\\n\\t\\treturn current;\\t\\r\\n\\t}\\t\\r\\n\\ttiddlyclip.finish=function (tids) {\\r\\n\\t\\tfor (var i = 0; i < tids.length; i++){\\r\\n\\t\\t\\t self.dispatchEvent({type: \\\"tm-navigate\\\", navigateTo:tids[i]});\\r\\n\\t\\t\\t //alert(\\\"open \\\"+tids[i])\\r\\n\\t\\t }\\r\\n\\t\\tself.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"}); \\r\\n\\t}\\r\\n\\ttiddlyclip.importTids =function (fields) {\\r\\n\\t\\tvar tiddler = this.getMultiTidTitle(fields.title), tid;\\r\\n\\t\\tif(!tiddler.container) {\\r\\n\\t\\t\\tthis.importTidsSimple(fields);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t//remove container from title\\t\\r\\n\\t\\tfields.title = \\ttiddler.title;\\r\\n\\t\\tvar container =  $tw.wiki.getTiddler(tiddler.container), text;\\r\\n\\t\\tif (container) {\\r\\n\\t\\t\\ttext = JSON.parse(container.fields.text);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttext = {tiddlers:{}};\\r\\n\\t\\t}\\r\\n\\t\\t//add the new subtiddler\\r\\n\\t\\ttext.tiddlers[tiddler.title] = fields;\\r\\n\\t\\t//modify name to be the subtiddler\\r\\n\\t\\ttext.tiddlers[tiddler.title].title = tiddler.title;\\r\\n\\t\\tvar updateFields = {\\r\\n\\t\\t\\ttitle: tiddler.container,\\r\\n\\t\\t\\ttext: JSON.stringify(text)\\r\\n\\t\\t};\\t\\r\\n\\t\\tvar tid = new $tw.Tiddler($tw.wiki.getCreationFields(),container,updateFields,getModificationFields());\\t\\r\\n\\t\\t//alert(JSON.stringify(tid))\\r\\n        var tiddlerFieldsArray = [tid.fields];\\t\\t\\t\\t\\t\\r\\n\\t\\tself.dispatchEvent({type: \\\"tm-import-tiddlers\\\", param: JSON.stringify(tiddlerFieldsArray)});\\t\\r\\n\\t}\\r\\n\\ttiddlyclip.importTidsSimple =function (tidfields) {\\r\\n\\t\\t//tiddlyclip.log(\\\"savefile at last!\\\");\\r\\n\\t\\t// Get the details from the message\\r\\n        var tiddlerFieldsArray = [tidfields];\\t\\t\\t\\t\\t\\r\\n\\t\\tself.dispatchEvent({type: \\\"tm-import-tiddlers\\\", param: JSON.stringify(tiddlerFieldsArray)});\\t\\r\\n\\t}\\r\\n\\tthis.list = this.getTiddlerList();\\r\\n\\ttiddlyclip.macro={};\\r\\n\\t$tw.utils.each(this.list,function(title,index) {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tvar func = require(title);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\ttiddlyclip.macro[func.name]=func.run;\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\talert(\\\"tc: problem with command \\\" + title);\\r\\n\\t\\t} \\r\\n\\t});\\t\\r\\n\\tthis.list = this.getTiddlerOparserList();\\r\\n\\ttiddlyclip.oparser={};\\r\\n\\t$tw.utils.each(this.list,function(title,index) {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tvar func = require(title);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\ttiddlyclip.oparser[func.symbol]=func.run;\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\talert(\\\"tc: problem with command \\\" + title);\\r\\n\\t\\t} \\r\\n\\t});\\t\\t\\r\\n\\tthis.tabletid = this.getAttribute(\\\"$tabletid\\\");\\r\\n\\tthis.catname = this.getAttribute(\\\"$catname\\\");\\r\\n\\tthis.cattid = this.getAttribute(\\\"$cattid\\\");\\r\\n    this.localrefresh = [];\\r\\n\\tif ((this.tabletid && this.catname)||this.cattid) {\\r\\n\\t\\tvar pagedata = {data:{}},cat,self = this;\\r\\n\\t\\t$tw.utils.each(this.attributes,function(attribute,name) {\\r\\n\\t\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\r\\n                if (attribute.charAt(0) === \\\"@\\\" && attribute.charAt(attribute.length-1) === \\\"@\\\"){//tiddler ref\\r\\n                    attribute = attribute.substring (1,attribute.length-1);\\r\\n                    self.localrefresh.push(attribute);\\r\\n                }\\r\\n\\t\\t\\t\\tpagedata.data[name] = attribute;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tif (this.cattid) {\\r\\n\\t\\t\\tcat = {title:this.cattid,modes:[\\\"immediate\\\"]};\\r\\n\\t\\t}\\r\\n\\t\\tpagedata.data.category=this.catname;\\r\\n\\t\\tvar temptids = tiddlyclip.modules.tPaste.paste(this.catname,pagedata,null,this.tabletid,cat);\\r\\n\\t\\tfor (var i =0; i< temptids.length; i++) {\\t\\r\\n\\t\\t\\tvar title = temptids[i].title;\\r\\n\\t\\t\\tself.setVariable(title,temptids[i].text);\\t\\r\\n\\t\\t\\t$tw.utils.each(temptids[i],function(val,key) {\\r\\n\\t\\t\\t\\t//build tiddler field references \\r\\n\\t\\t\\t\\tvar newkey = title+'!!'+key;\\r\\n\\t\\t\\t\\tself.setVariable(newkey,val);\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\ttiddlyclip.version = function () {\\r\\n\\t\\tvar versiontid = this.getTiddler(\\\"$:/plugins/bj/tiddlyclip\\\");\\r\\n\\t\\tif (versiontid && versiontid.fields && versiontid.fields.version){\\r\\n\\t\\t\\treturn versiontid.fields.version\\r\\n\\t\\t}\\r\\n\\t\\treturn null;\\r\\n\\t}\\t\\r\\n\\tthis.makeChildWidgets();\\r\\n};\\r\\n\\r\\nfunction settimers (delay, callback) {\\r\\n\\tvar next = new Date(), timejson = {}, interval = 0;\\r\\n\\tinterval = parseInt(delay);\\r\\n\\tif (interval > 0) {\\r\\n\\t\\tnext.setSeconds(next.getSeconds() + interval);\\t\\r\\n\\t\\ttimejson.timeout = next.toJSON() ;\\r\\n\\t\\ttimejson.onTimeout = callback;\\r\\n\\t\\tif (!$tw.utils.bjGlogalTimer) {\\r\\n\\t\\t\\talert (\\\"bjGlogalTimer missing\\\");\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t$tw.utils.bjGlogalTimer.register(timejson);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nCreateTiddlerWidget.prototype.handleTiddlyclipEvent = function(event) {\\r\\n\\tif (event.localsection) {\\r\\n\\t\\tif (event.delay) {\\r\\n\\t\\t\\tsettimers (event.delay, function (){\\r\\n\\t\\t\\t\\ttiddlyclip.modules.tPaste.paste(event.category,event.pagedata,null,event.localsection);\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttiddlyclip.modules.tPaste.paste(event.category,event.pagedata,null,event.localsection);\\r\\n\\t\\t}\\r\\n\\t} else {\\r\\n\\t\\ttiddlyclip.modules.tPaste.paste(event.category,event.pagedata,event.currentsection);\\t\\r\\n\\t}\\r\\n\\treturn false;\\r\\n};\\r\\n\\t\\t\\r\\n/*\\r\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\r\\n*/\\r\\nCreateTiddlerWidget.prototype.refresh = function(changedTiddlers) {\\r\\n\\tvar changedAttributes = this.computeAttributes();\\r\\n\\tif(Object.keys(changedAttributes).length) {\\r\\n\\t\\tthis.refreshSelf();\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n    for (var atr in changedTiddlers){\\r\\n        if (this.localrefresh.indexOf(atr) !== -1) {\\r\\n            this.refreshSelf();\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\treturn this.refreshChildren(changedTiddlers);\\r\\n};\\r\\nexports.createclip = CreateTiddlerWidget;\\r\\n\\r\\n})();\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\r\\n\\r\\nvar tcWidget = function(parseTreeNode,options) {\\r\\n\\tthis.initialise(parseTreeNode,options);\\r\\n};\\r\\n\\r\\n/*\\r\\nInherit from the base widget class\\r\\n*/\\r\\ntcWidget.prototype = new Widget();\\r\\n\\r\\n/*\\r\\nRender this widget into the DOM\\r\\n*/\\r\\nvar onSaveFileBound = null;\\r\\n\\r\\ntcWidget.prototype.render = function(parent,nextSibling) {\\r\\n\\tvar doc = document;\\r\\n\\tvar self =this;\\r\\n\\t{\\r\\n\\t\\t// Inject the message box\\r\\n\\t\\tvar messageBox = doc.getElementById(\\\"tiddlyclip-message-box\\\");\\r\\n\\t\\t\\r\\n\\t\\tif(!messageBox) {\\r\\n\\t\\t\\tmessageBox = doc.createElement(\\\"div\\\");\\r\\n\\t\\t\\tmessageBox.id = \\\"tiddlyclip-message-box\\\";\\r\\n\\t\\t\\tmessageBox.style.display = \\\"none\\\";\\r\\n\\t\\t\\tdoc.body.appendChild(messageBox);\\r\\n\\t\\t}\\r\\n\\t\\t// Attach the event handler to the message box\\r\\n\\t\\tmessageBox.removeEventListener(\\\"tiddlyclip-save-file\\\",onSaveFileBound,false);//if the widget is re-render remove old version\\r\\n\\t\\tmessageBox.addEventListener(\\\"tiddlyclip-save-file\\\", onSaveFileBound = this.onSaveFile.bind(self),false);\\r\\n\\t};\\r\\n\\t\\r\\n}\\r\\n\\r\\ntcWidget.prototype.onSaveFile = function(event) {\\r\\n\\t\\t//tiddlyclip.log(\\\"savefile at last!\\\");\\r\\n\\t\\t// Get the details from the message\\r\\n\\t\\tvar message = event.target;\\r\\n\\t    var category = message.getAttribute(\\\"data-tiddlyclip-category\\\");\\r\\n\\t    var pageData = message.getAttribute(\\\"data-tiddlyclip-pageData\\\");\\r\\n\\t    var transformed =  JSON.parse(pageData);\\r\\n\\t    if (!transformed.data) alert(\\\"not data\\\");\\r\\n\\t    var currentsection = message.getAttribute(\\\"data-tiddlyclip-currentsection\\\");\\r\\n\\t    message.parentNode.removeChild(message);\\r\\n\\t\\tthis.dispatchEvent({type: \\\"tiddlyclip-create\\\", category:category, pagedata: transformed, currentsection:currentsection});\\t\\r\\n\\t}\\r\\n\\r\\n/*\\r\\nCompute the internal state of the widget\\r\\n*/\\r\\ntcWidget.prototype.execute = function() {\\r\\n\\r\\n};\\r\\n/*\\r\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\r\\n*/\\r\\ntcWidget.prototype.refresh = function(changedTiddlers) {\\r\\n\\r\\n\\t\\treturn false;\\t\\t\\r\\n\\r\\n};\\r\\n\\r\\nexports[\\\"tcadapter\\\"] = tcWidget;\\r\\n\\r\\n})();\\r\\n\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw: false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\r\\n\\r\\nvar ToDoWidget = function(parseTreeNode,options) {\\r\\n\\tthis.initialise(parseTreeNode,options);\\r\\n};\\r\\n\\r\\n/*\\r\\nInherit from the base widget class\\r\\n*/\\r\\nToDoWidget.prototype = new Widget();\\r\\n\\r\\n/*\\r\\nRender this widget into the DOM\\r\\n*/\\r\\nToDoWidget.prototype.render = function(parent,nextSibling) {\\r\\n\\tthis.computeAttributes();\\r\\n\\tthis.execute();\\r\\n};\\r\\n\\r\\n/*\\r\\nCompute the internal state of the widget\\r\\n*/\\r\\nToDoWidget.prototype.execute = function() {\\r\\n\\tthis.tabletid = this.getAttribute(\\\"$tabletid\\\");\\r\\n\\tthis.catname = this.getAttribute(\\\"$catname\\\");\\r\\n\\tthis.delay = this.getAttribute(\\\"$delay\\\")||null;\\r\\n\\tif (this.delay) this.delay *= 60; //mins to seconds\\r\\n};\\r\\n\\r\\n/*\\r\\nRefresh the widget by ensuring our attributes are up to date\\r\\n*/\\r\\nToDoWidget.prototype.refresh = function(changedTiddlers) {\\r\\n\\tvar changedAttributes = this.computeAttributes();\\r\\n\\tif(changedAttributes[\\\"$tabletid\\\"] || changedAttributes[\\\"$catname\\\"]|| changedAttributes[\\\"$delay\\\"]) {\\r\\n\\t\\tthis.refreshSelf();\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\treturn this.refreshChildren(changedTiddlers);\\r\\n};\\r\\n\\r\\n/*\\r\\nInvoke the action associated with this widget\\r\\n*/\\r\\nToDoWidget.prototype.invokeAction = function(triggeringWidget,event) {\\r\\n\\tvar self = this,\\r\\n\\t\\toptions = {};\\r\\n\\tvar pagedata = {data:{}};\\r\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\r\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\r\\n\\t\\t\\tpagedata.data[name] = attribute;\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\tpagedata.data.category=this.catname;\\r\\n\\tself.dispatchEvent({type: \\\"tiddlyclip-create\\\", category:this.catname, pagedata: pagedata, currentsection:null, localsection:this.tabletid, delay:this.delay});\\r\\n\\treturn true; // Action was invoked\\r\\n};\\r\\n\\r\\nToDoWidget.prototype.invokeMsgAction = function(param) {\\r\\n\\treturn this.invokeAction(this); \\r\\n}\\r\\n\\r\\nexports[\\\"action-tiddlydo\\\"] = ToDoWidget;\\r\\n\\r\\n})();\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/bj/tcfilterrequest\":{\"title\":\"$:/bj/tcfilterrequest\",\"type\":\"application/x-bclip\",\"text\":\"#txt=((*@mkjsontids(@name)*))\\r\\n#aux=\\r\\n$test=((*@send(@callback,#txt,#aux)*))\\r\\n\"},\"$:/plugins/bj/tiddlyclip/template\":{\"title\":\"$:/plugins/bj/tiddlyclip/template\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"<$createclip>\\n<$tcadapter>\\n</$tcadapter>\\n</$createclip>\\n\"},\"$:/bj/tc/tidmetadata\":{\"title\":\"$:/bj/tc/tidmetadata\",\"type\":\"application/x-bclip\",\"text\":\"#type=text/x-tiddlywiki\\n$type=((*@classic*??*#type*??*@abort()*))\\n\"}}}","name":"tiddlyclip"}