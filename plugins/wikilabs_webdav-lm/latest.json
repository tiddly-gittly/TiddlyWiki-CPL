{"title":"$:/plugins/wikilabs/webdav-lm","name":"WegDav lm","description":"WebDav PUT saver - takes precedence","author":"Mario Pietsch","core-version":">=5.1.14","version":"0.1.4-beta","list":"readme history license","stability":"STABILITY_1_EXPERIMENTAL","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/wikilabs/webdav-lm/history\":{\"title\":\"$:/plugins/wikilabs/webdav-lm/history\",\"text\":\"V 0.1.4-beta - 2024-05-23\\n\\n* Add stability badges\\n** The development status of a plugin: deprecated, experimental, stable, or legacy\\n\\nV 0.1.3 - 2020.12.27\\n\\n* update to TW v5.2.2\\n\\nV 0.1.2 - 2020.12.25\\n\\n* update license\\n\\nV 0.1.1 - 2020.01.19\\n\\n* Update license link/text\\n\\nV 0.1.0 - 2019.03.18\\n\\n* Initial release\\n* use `last-modified` and `If-Unmodified-Since` instead of `etag` to determine file \\\"date\\\" inconsistencies.\\n\"},\"$:/plugins/wikilabs/webdav-lm/license\":{\"title\":\"$:/plugins/wikilabs/webdav-lm/license\",\"text\":\"[[WebDav-lm-Plugin|https://wikilabs.github.io/#webdav-lm]] (c) Mario Pietsch - 2019-<<now YYYY>>\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"},\"$:/plugins/wikilabs/webdav-lm/put-last-modified.js\":{\"title\":\"$:/plugins/wikilabs/webdav-lm/put-last-modified.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/wikilabs/webdav-lm/put-last-modified.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves wiki by performing a PUT request to the server\\n\\nWorks with any server which accepts a PUT request\\nto the current URL, such as a WebDAV server.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nRetrieve last-modified if available\\n*/\\nvar getLastMod = function(self) {\\n\\tvar headers = { \\\"Accept\\\": \\\"*/*\\\"};\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: self.uri(),\\n\\t\\ttype: \\\"HEAD\\\",\\n\\t\\theaders: headers,\\n\\t\\tcallback: function(err, data, xhr) {\\n\\t\\t\\tvar lastMod = xhr.getResponseHeader(\\\"last-modified\\\");\\n\\t\\t\\tif(!err && lastMod) {\\n\\t\\t\\t\\tself.lastMod = lastMod;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar PutSaver = function(wiki) {\\n\\tthis.putEnabled = true;\\n\\tthis.wiki = wiki;\\n\\tvar self = this;\\n\\tvar uri = this.uri();\\n\\t// Async server probe. Until probe finishes, save will fail fast\\n\\t// See also https://github.com/Jermolene/TiddlyWiki5/issues/2276\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri,\\n\\t\\ttype: \\\"OPTIONS\\\",\\n\\t\\tcallback: function(err, data, xhr) {\\n\\t\\t\\t// Check DAV header http://www.webdav.org/specs/rfc2518.html#rfc.section.9.1\\n\\t\\t\\tif(!err) {\\n\\t\\t\\t\\tself.serverAcceptsPuts = xhr.status === 200 && !!xhr.getResponseHeader(\\\"dav\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\nPutSaver.prototype.uri = function() {\\n\\treturn document.location.toString().split(\\\"#\\\")[0];\\n};\\n\\n// TODO: in case of edit conflict\\n// Prompt: Do you want to save over this? Y/N\\n// Merging would be ideal, and may be possible using future generic merge flow\\nPutSaver.prototype.save = function(text, method, callback) {\\n\\tif(!this.serverAcceptsPuts) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar self = this;\\n\\tvar headers = { \\\"Content-Type\\\": \\\"text/html;charset=UTF-8\\\" };\\n\\tif(this.lastMod) {\\n\\t\\theaders[\\\"If-Unmodified-Since\\\"] = this.lastMod;\\n\\t}\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: this.uri(),\\n\\t\\ttype: \\\"PUT\\\",\\n\\t\\theaders: headers,\\n\\t\\tdata: text,\\n\\t\\tcallback: function(err, data, xhr) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\t// response is textual: \\\"XMLHttpRequest error code: 412\\\"\\n\\t\\t\\t\\tconst status = Number(err.substring(err.indexOf(':') + 2, err.length))\\n\\t\\t\\t\\tif(status === 412) { // edit conflict\\n\\t\\t\\t\\t\\tvar message = $tw.language.getString(\\\"Error/EditConflict\\\");\\n\\t\\t\\t\\t\\tcallback(message);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcallback(err); // fail\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tself.putEnabled = false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.lastMod = xhr.getResponseHeader(\\\"last-modified\\\");\\n\\t\\t\\t\\tif (self.lastMod == null) {\\n\\t\\t\\t\\t\\tgetLastMod(self);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcallback(null); // success\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nPutSaver.prototype.info = {\\n\\tname: \\\"put\\\",\\n\\tpriority: 2100,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn /^https?:/.test(location.protocol);\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new PutSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/plugins/wikilabs/webdav-lm/readme\":{\"title\":\"$:/plugins/wikilabs/webdav-lm/readme\",\"text\":\"''Important:'' This plugin takes precedence over the core webDav PUT saver!\\n\\nThis saver uses `last-modified` and `if-unmodified-since` HTTP header attributes, to detect file inconsistencies,\\nwhich allows the server to activate server-side file compression. \\n\\nThe core PUT saver uses etags, which don't work, if server-side file compression is active.\\n\"}}}"}