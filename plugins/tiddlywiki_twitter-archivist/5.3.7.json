{"title":"$:/plugins/tiddlywiki/twitter-archivist","name":"Twitter Archivist","description":"Twitter archiving tools","list":"readme usage spec todo","stability":"STABILITY_2_STABLE","version":"5.3.7","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"Twitter Archives\":{\"title\":\"Twitter Archives\",\"color\":\"#1D9CF0\",\"icon\":\"$:/core/images/twitter\",\"text\":\"<<list-archives>>\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/archivist.js\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/archivist.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/twitter-archivist/archivist.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nUtility class for manipulating Twitter archives\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\nfunction TwitterArchivist(options) {\\n\\toptions = options || {};\\n\\tthis.source = options.source;\\n}\\n\\nTwitterArchivist.prototype.loadArchive = async function(options) {\\n\\toptions = options || {};\\n\\tconst wiki = options.wiki;\\n\\tawait this.source.init();\\n\\t// Process the manifest and profile\\n\\tconst manifestData = await this.loadTwitterJsData(\\\"data/manifest.js\\\",\\\"window.__THAR_CONFIG = \\\",\\\"\\\"),\\n\\t\\tprofileData = await this.loadTwitterJsData(\\\"data/profile.js\\\",\\\"window.YTD.profile.part0 = \\\",\\\"\\\"),\\n\\t\\taccountData = await this.loadTwitterJsData(\\\"data/account.js\\\",\\\"window.YTD.account.part0 = \\\",\\\"\\\"),\\n\\t\\tusername = manifestData.userInfo.userName,\\n\\t\\tuser_id = manifestData.userInfo.accountId;\\n\\twiki.addTiddler({\\n\\t\\ttitle: \\\"Twitter Archive for @\\\" + username,\\n\\t\\ticon: \\\"$:/core/images/twitter\\\",\\n\\t\\tcolor: \\\"#1D9CF0\\\",\\n\\t\\ttags: \\\"$:/tags/TwitterArchive\\\",\\n\\t\\tuser_id: user_id,\\n\\t\\tusername: username,\\n\\t\\tdisplayname: manifestData.userInfo.displayName,\\n\\t\\tgeneration_date: $tw.utils.stringifyDate(new Date(manifestData.archiveInfo.generationDate)),\\n\\t\\taccount_created_date: $tw.utils.stringifyDate(new Date(accountData[0].account.createdAt)),\\n\\t\\tbio: profileData[0].profile.description.bio,\\n\\t\\twebsite: profileData[0].profile.description.website,\\n\\t\\tlocation: profileData[0].profile.description.location\\n\\t});\\n\\t// Process the media\\n\\tawait this.source.processFiles(\\\"data/tweets_media\\\",\\\"base64\\\",function(mediaItem) {\\n\\t\\tvar ext = mediaItem.filename.split(\\\".\\\").slice(-1)[0];\\n\\t\\tif(\\\"jpg png\\\".split(\\\" \\\").indexOf(ext) !== -1) {\\n\\t\\t\\tvar extensionInfo = $tw.utils.getFileExtensionInfo(\\\".\\\" + ext),\\n\\t\\t\\t\\ttype = extensionInfo ? extensionInfo.type : null;\\n\\t\\t\\twiki.addTiddler({\\n\\t\\t\\t\\ttitle: \\\"Tweet Media - \\\" + mediaItem.filename,\\n\\t\\t\\t\\ttags: \\\"$:/tags/TweetMedia\\\",\\n\\t\\t\\t\\tstatus_id: mediaItem.filename.split(\\\"-\\\")[0],\\n\\t\\t\\t\\ttext: mediaItem.contents,\\n\\t\\t\\t\\ttype: type\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t// Process the favourites\\n\\tconst likeData = await this.loadTwitterJsData(\\\"data/like.js\\\",\\\"window.YTD.like.part0 = \\\",\\\"\\\");\\n\\t$tw.utils.each(likeData,function(like) {\\n\\t\\t// Create the tweet tiddler\\n\\t\\tvar tiddler = {\\n\\t\\t\\ttitle: \\\"Tweet - \\\" + like.like.tweetId,\\n\\t\\t\\ttext: \\\"\\\\\\\\rules only html entity extlink\\\\n\\\" + (like.like.fullText || \\\"\\\").replace(\\\"\\\\n\\\",\\\"<br>\\\"),\\n\\t\\t\\tstatus_id: like.like.tweetId,\\n\\t\\t\\tliked_by: user_id,\\n\\t\\t\\ttags: \\\"$:/tags/Tweet\\\"\\n\\t\\t};\\n\\t\\twiki.addTiddler(tiddler);\\n\\t});\\n\\t// Process the tweets\\n\\tconst tweetData = await this.loadTwitterJsData(\\\"data/tweets.js\\\",\\\"window.YTD.tweets.part0 = \\\",\\\"\\\");\\n\\t$tw.utils.each(tweetData,function(tweet) {\\n\\t\\t// Compile the tags for the tweet\\n\\t\\tvar tags = [\\\"$:/tags/Tweet\\\"];\\n\\t\\t// Accumulate the replacements/insertions to the text as an array of {startPos:,endPos:,fnTransform:}\\n\\t\\tvar modifications = [];\\n\\t\\t// Modifications for mentions\\n\\t\\tvar mentions = [];\\n\\t\\t$tw.utils.each(tweet.tweet.entities.user_mentions,function(mention) {\\n\\t\\t\\tvar title = \\\"Tweeter - \\\" + mention.id_str;\\n\\t\\t\\ttags.push(title);\\n\\t\\t\\tmentions.push(mention.id_str);\\n\\t\\t\\twiki.addTiddler({\\n\\t\\t\\t\\ttitle: title,\\n\\t\\t\\t\\tscreenname: \\\"@\\\" + mention.screen_name,\\n\\t\\t\\t\\ttags: \\\"$:/tags/Tweeter\\\",\\n\\t\\t\\t\\tuser_id: mention.id_str,\\n\\t\\t\\t\\tname: mention.name\\n\\t\\t\\t});\\n\\t\\t\\tmodifications.push({\\n\\t\\t\\t\\tstartPos: parseInt(mention.indices[0],10),\\n\\t\\t\\t\\tendPos: parseInt(mention.indices[1],10),\\n\\t\\t\\t\\tfnTransform: function(text) {\\n\\t\\t\\t\\t\\treturn \\\"<$link to=\\\\\\\"\\\" + title + \\\"\\\\\\\">\\\" +\\n\\t\\t\\t\\t\\t\\t$tw.utils.htmlEncode(text.substring(mention.indices[0],mention.indices[1])) +\\n\\t\\t\\t\\t\\t\\t\\\"</$link>\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t// Modifications for URLs\\n\\t\\t$tw.utils.each(tweet.tweet.entities.urls,function(urlInfo) {\\n\\t\\t\\tmodifications.push({\\n\\t\\t\\t\\tstartPos: parseInt(urlInfo.indices[0],10),\\n\\t\\t\\t\\tendPos: parseInt(urlInfo.indices[1],10),\\n\\t\\t\\t\\tfnTransform: function(text) {\\n\\t\\t\\t\\t\\treturn \\\"<a href=\\\\\\\"\\\" + urlInfo.expanded_url + \\\"\\\\\\\" rel=\\\\\\\"noopener noreferrer\\\\\\\" target=\\\\\\\"_blank\\\\\\\">\\\" +\\n\\t\\t\\t\\t\\t\\t$tw.utils.htmlEncode(urlInfo.display_url) +\\n\\t\\t\\t\\t\\t\\t\\\"</a>\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t// Modifications for hashtags\\n\\t\\t$tw.utils.each(tweet.tweet.entities.hashtags,function(hashtag) {\\n\\t\\t\\tvar title = \\\"#\\\" + hashtag.text;\\n\\t\\t\\ttags.push(title);\\n\\t\\t\\twiki.addTiddler({\\n\\t\\t\\t\\ttitle: title,\\n\\t\\t\\t\\thashtag: hashtag.text,\\n\\t\\t\\t\\ttags: \\\"$:/tags/Hashtag\\\"\\n\\t\\t\\t});\\n\\t\\t\\tmodifications.push({\\n\\t\\t\\t\\tstartPos: parseInt(hashtag.indices[0],10),\\n\\t\\t\\t\\tendPos: parseInt(hashtag.indices[1],10),\\n\\t\\t\\t\\tfnTransform: function(text) {\\n\\t\\t\\t\\t\\treturn \\\"<$link to=\\\\\\\"\\\" + title + \\\"\\\\\\\">\\\" +\\n\\t\\t\\t\\t\\t\\t\\\"#\\\" + $tw.utils.htmlEncode(hashtag.text) +\\n\\t\\t\\t\\t\\t\\t\\\"</$link>\\\";\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t// Sort the modifications by start position\\n\\t\\tmodifications.sort(function(a,b) {\\n\\t\\t\\treturn a.startPos - b.startPos;\\n\\t\\t});\\n\\t\\t// Apply the modifications in reverse order\\n\\t\\tvar rawText = tweet.tweet.full_text,\\n\\t\\t\\tposText = 0,\\n\\t\\t\\tchunks = [];\\n\\t\\t$tw.utils.each(modifications,function(modification) {\\n\\t\\t\\t// Process any text before the modification\\n\\t\\t\\tif(modification.startPos > posText) {\\n\\t\\t\\t\\tchunks.push($tw.utils.htmlEncode(rawText.substring(posText,modification.startPos)));\\n\\t\\t\\t}\\n\\t\\t\\t// Process the modification\\n\\t\\t\\tchunks.push(modification.fnTransform(rawText));\\n\\t\\t\\t// Adjust the position\\n\\t\\t\\tposText = modification.endPos;\\n\\t\\t});\\n\\t\\t// Process any remaining text\\n\\t\\tif(posText < rawText.length) {\\n\\t\\t\\tchunks.push($tw.utils.htmlEncode(rawText.substring(posText)));\\n\\t\\t}\\n\\t\\t// Concatenate the chunks and replace newlines with <br>\\n\\t\\tvar text = chunks.join(\\\"\\\").replace(\\\"\\\\n\\\",\\\"<br>\\\");\\n\\t\\t// Create the tweet tiddler\\n\\t\\tvar tiddler = {\\n\\t\\t\\ttitle: \\\"Tweet - \\\" + tweet.tweet.id_str,\\n\\t\\t\\ttext: \\\"\\\\\\\\rules only html entity extlink\\\\n\\\" + text,\\n\\t\\t\\tstatus_id: tweet.tweet.id_str,\\n\\t\\t\\tuser_id: user_id,\\n\\t\\t\\tfavorite_count: tweet.tweet.favorite_count,\\n\\t\\t\\tretweet_count: tweet.tweet.retweet_count,\\n\\t\\t\\ttags: tags,\\n\\t\\t\\tcreated: $tw.utils.stringifyDate(new Date(tweet.tweet.created_at)),\\n\\t\\t\\tmodified: $tw.utils.stringifyDate(new Date(tweet.tweet.created_at))\\n\\t\\t};\\n\\t\\tif(tweet.tweet.in_reply_to_status_id_str) {\\n\\t\\t\\ttiddler.in_reply_to_status_id = tweet.tweet.in_reply_to_status_id_str;\\n\\t\\t}\\n\\t\\tif(mentions.length > 0) {\\n\\t\\t\\ttiddler.mention_user_ids = $tw.utils.stringifyList(mentions);\\n\\t\\t}\\n\\t\\twiki.addTiddler(tiddler);\\n\\t});\\n};\\n\\nTwitterArchivist.prototype.loadTwitterJsData = async function(filePath,prefix,suffix) {\\n\\tvar tweetFileData = await this.source.loadTwitterJsData(filePath);\\n\\tif(prefix) {\\n\\t\\tif(tweetFileData.slice(0,prefix.length) !== prefix) {\\n\\t\\t\\tthrow \\\"Reading Twitter JS file \\\" + filePath + \\\" missing prefix '\\\" + prefix + \\\"'\\\";\\n\\t\\t}\\n\\t\\ttweetFileData = tweetFileData.slice(prefix.length);\\n\\t}\\n\\tif(suffix) {\\n\\t\\tif(tweetFileData.slice(-suffix.length) !== suffix) {\\n\\t\\t\\tthrow \\\"Reading Twitter JS file \\\" + filePath + \\\" missing suffix '\\\" + suffix + \\\"'\\\";\\n\\t\\t}\\n\\t\\ttweetFileData = tweetFileData.slice(0,tweetFileData.length - suffix.length);\\n\\t}\\n\\treturn JSON.parse(tweetFileData);\\n};\\n\\nfunction TwitterArchivistSourceNodeJs(options) {\\n\\toptions = options || {};\\n\\tthis.archivePath = options.archivePath;\\n}\\n\\nTwitterArchivistSourceNodeJs.prototype.init = async function() {\\n};\\n\\nTwitterArchivistSourceNodeJs.prototype.processFiles = async function(dirPath,encoding,callback) {\\n\\tvar fs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\tdirPath = path.resolve(this.archivePath,dirPath),\\n\\t\\tfilenames = fs.readdirSync(dirPath);\\n\\t$tw.utils.each(filenames,function(filename) {\\n\\t\\tcallback({\\n\\t\\t\\tfilename: filename,\\n\\t\\t\\tcontents: fs.readFileSync(path.resolve(dirPath,filename),encoding)\\n\\t\\t});\\n\\t});\\n};\\n\\nTwitterArchivistSourceNodeJs.prototype.loadTwitterJsData = async function(filePath) {\\n\\tvar fs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n\\treturn fs.readFileSync(path.resolve(this.archivePath,filePath),\\\"utf8\\\");\\n};\\n\\nfunction TwitterArchivistSourceBrowser(options) {\\n\\toptions = options || {};\\n}\\n\\nTwitterArchivistSourceBrowser.prototype.init = async function() {\\n\\t// Open directory\\n\\tthis.rootDirHandle = await window.showDirectoryPicker();\\n};\\n\\nTwitterArchivistSourceBrowser.prototype.processFiles = async function(dirPath,encoding,callback) {\\n\\tconst dirHandle = await this.walkDirectory(dirPath.split(\\\"/\\\"));\\n\\tfor await (const [filename, fileHandle] of dirHandle.entries()) {\\n\\t\\tconst contents = await fileHandle.getFile();\\n\\t\\tcallback({\\n\\t\\t\\tfilename: filename,\\n\\t\\t\\tcontents: arrayBufferToBase64(await contents.arrayBuffer())\\n\\t\\t});\\n\\t}\\n};\\n\\nTwitterArchivistSourceBrowser.prototype.loadTwitterJsData = async function(filePath) {\\n\\tconst filePathParts = filePath.split(\\\"/\\\");\\n\\tconst dirHandle = await this.walkDirectory(filePathParts.slice(0,-1));\\n\\tconst fileHandle = await dirHandle.getFileHandle(filePathParts.slice(-1)[0]);\\n\\tconst contents = await fileHandle.getFile();\\n\\treturn await contents.text();\\n};\\n\\nTwitterArchivistSourceBrowser.prototype.walkDirectory = async function(arrayDirectoryEntries) {\\n\\tvar entries = arrayDirectoryEntries.slice(0),\\n\\t\\tdirHandle = this.rootDirHandle;\\n\\twhile(entries.length > 0) {\\n\\t\\tdirHandle = await dirHandle.getDirectoryHandle(entries[0]);\\n\\t\\tentries.shift();\\n\\t}\\n\\treturn dirHandle;\\n};\\n\\n// Thanks to MatheusFelipeMarinho\\n// https://github.com/MatheusFelipeMarinho/venom/blob/43ead0bfffa57a536a5cff67dd909e55da9f0915/src/lib/wapi/helper/array-buffer-to-base64.js#L55\\nfunction arrayBufferToBase64(arrayBuffer) {\\n\\tvar base64 = '';\\n\\tvar encodings =\\n\\t\\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n\\tvar bytes = new Uint8Array(arrayBuffer);\\n\\tvar byteLength = bytes.byteLength;\\n\\tvar byteRemainder = byteLength % 3;\\n\\tvar mainLength = byteLength - byteRemainder;\\n\\n\\tvar a, b, c, d;\\n\\tvar chunk;\\n\\n\\t// Main loop deals with bytes in chunks of 3\\n\\tfor (var i = 0; i < mainLength; i = i + 3) {\\n\\t\\t// Combine the three bytes into a single integer\\n\\t\\tchunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\\n\\n\\t\\t// Use bitmasks to extract 6-bit segments from the triplet\\n\\t\\ta = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\\n\\t\\tb = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\\n\\t\\tc = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\\n\\t\\td = chunk & 63; // 63       = 2^6 - 1\\n\\n\\t\\t// Convert the raw binary segments to the appropriate ASCII encoding\\n\\t\\tbase64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\\n\\t}\\n\\n\\t// Deal with the remaining bytes and padding\\n\\tif (byteRemainder == 1) {\\n\\t\\tchunk = bytes[mainLength];\\n\\n\\t\\ta = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\\n\\n\\t\\t// Set the 4 least significant bits to zero\\n\\t\\tb = (chunk & 3) << 4; // 3   = 2^2 - 1\\n\\n\\t\\tbase64 += encodings[a] + encodings[b] + '==';\\n\\t} else if (byteRemainder == 2) {\\n\\t\\tchunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\\n\\n\\t\\ta = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\\n\\t\\tb = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\\n\\n\\t\\t// Set the 2 least significant bits to zero\\n\\t\\tc = (chunk & 15) << 2; // 15    = 2^4 - 1\\n\\n\\t\\tbase64 += encodings[a] + encodings[b] + encodings[c] + '=';\\n\\t}\\n\\treturn base64;\\n}\\n\\nexports.TwitterArchivist = TwitterArchivist;\\nexports.TwitterArchivistSourceNodeJs = TwitterArchivistSourceNodeJs;\\nexports.TwitterArchivistSourceBrowser = TwitterArchivistSourceBrowser;\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/config/TiddlerInfo/Mode\":{\"title\":\"$:/config/TiddlerInfo/Mode\",\"text\":\"sticky\"},\"$:/plugins/tiddlywiki/twitter-archivist/loadtwitterarchive.js\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/loadtwitterarchive.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/twitter-archivist/loadtwitterarchive.js\\ntype: application/javascript\\nmodule-type: command\\n\\nRead tiddlers from an unzipped Twitter archive\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.info = {\\n\\tname: \\\"loadtwitterarchive\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this;\\n\\tif(this.params.length < 1) {\\n\\t\\treturn \\\"Missing path to Twitter archive\\\";\\n\\t}\\n\\tvar archivePath = this.params[0];\\n\\t// Load tweets\\n\\tvar archiveSource = new $tw.utils.TwitterArchivistSourceNodeJs({\\n\\t\\tarchivePath: archivePath\\n\\t}),\\n\\tarchivist = new $tw.utils.TwitterArchivist({\\n\\t\\tsource: archiveSource\\n\\t});\\n\\tarchivist.loadArchive({\\n\\t\\twiki: this.commander.wiki\\n\\t}).then(function() {\\n\\t\\tself.callback(null);\\n\\t}).catch(function(err) {\\n\\t\\tself.callback(err);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/plugins/tiddlywiki/twitter-archivist/macros\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/macros\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define skinny-tabs(tabNames,tabCaptions,defaultTab,state)\\n<$let\\n\\tcurrTab={{{ [<__state__>get[text]else<__defaultTab__>] }}}\\n>\\n\\t<div class=\\\"tc-tab-set\\\">\\n\\t\\t<div class=\\\"tc-tab-buttons\\\">\\n\\t\\t\\t<$list filter=\\\"[enlist<__tabNames__>]\\\" variable=\\\"tab\\\" counter=\\\"tabCounter\\\">\\n\\t\\t\\t\\t<$let\\n\\t\\t\\t\\t\\tcaption={{{ [enlist<__tabCaptions__>nth<tabCounter>] }}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<$list filter=\\\"[<tab>match<currTab>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t\\t\\t\\t<$button aria-checked=\\\"true\\\" class=\\\"tc-tab-selected\\\" role=\\\"switch\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$action-setfield $tiddler=<<__state__>> $value=<<tab>>/>\\n\\t\\t\\t\\t\\t\\t\\t<$text text=<<caption>>/>\\n\\t\\t\\t\\t\\t\\t</$button>\\n\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t\\t<$list filter=\\\"[<tab>!match<currTab>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t\\t\\t\\t<$button role=\\\"switch\\\">\\n\\t\\t\\t\\t\\t\\t\\t<$action-setfield $tiddler=<<__state__>> $value=<<tab>>/>\\n\\t\\t\\t\\t\\t\\t\\t<$text text=<<caption>>/>\\n\\t\\t\\t\\t\\t\\t</$button>\\n\\t\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t</$let>\\n\\t\\t\\t</$list>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"tc-tab-divider\\\"></div>\\n\\t\\t<div class=\\\"tc-tab-content\\\">\\n\\t\\t\\t<$list filter=\\\"[enlist<__tabNames__>]\\\" variable=\\\"tab\\\" counter=\\\"tabCounter\\\">\\n\\t\\t\\t\\t<$list filter=\\\"[<tab>match<currTab>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"tc-reveal\\\">\\n\\t\\t\\t\\t\\t\\t<$macrocall $name=<<currTab>>/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t\\t<$list filter=\\\"[<tab>!match<currTab>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"tc-reveal\\\" hidden=\\\"true\\\"></div>\\n\\t\\t\\t\\t</$list>\\n\\t\\t\\t</$list>\\n\\t\\t</div>\\n\\t</div>\\n</$let>\\n\\\\end\\n\\n\\\\define list-archives()\\n\\\\whitespace trim\\n<$list filter=\\\"[tag[$:/tags/TwitterArchive]limit[1]]\\\" emptyMessage=<<list-archives-empty>> variable=\\\"ignore\\\">\\n\\t<ul>\\n\\t\\t<$list filter=\\\"[tag[$:/tags/TwitterArchive]sort[displayname]]\\\">\\n\\t\\t\\t<li>\\n\\t\\t\\t\\t<$link><$text text=<<currentTiddler>>/></$link>\\n\\t\\t\\t</li>\\n\\t\\t</$list>\\n\\t</ul>\\n</$list>\\n\\\\end\\n\\n\\\\define list-archives-empty()\\n<p style=\\\"background:#ff3;color:#333;padding:8px;font-weight:bold;\\\">\\nNo Twitter Archives are currently loaded\\n</p>\\n<$transclude tiddler=\\\"$:/plugins/tiddlywiki/twitter-archivist/usage\\\" mode=\\\"block\\\"/>\\n\\\\end\\n\\n\\\\define show-archive()\\n<$let\\n\\tuser_id={{!!user_id}}\\n>\\n\\t<div class=\\\"tc-twitter-archive\\\">\\n\\t\\t<table>\\n\\t\\t\\t<tbody>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Username\\\" \\\"username\\\" prefix:\\\"@\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Display Name\\\" \\\"displayname\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Bio\\\" \\\"bio\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Location\\\" \\\"location\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Website\\\" \\\"website\\\">>\\n\\t\\t\\t\\t<<show-archive-calculated-attribute \\\"Number of Tweets\\\" \\\"[tag[$:/tags/Tweet]field:user_id<user_id>count[]]\\\">>\\n\\t\\t\\t\\t<<show-archive-calculated-attribute \\\"Number of Favorites Received\\\" \\\"[tag[$:/tags/Tweet]field:user_id<user_id>] :reduce[<currentTiddler>get[favorite_count]else[0]add<accumulator>]\\\">>\\n\\t\\t\\t\\t<<show-archive-calculated-attribute \\\"Number of Retweets Received\\\" \\\"[tag[$:/tags/Tweet]field:user_id<user_id>] :reduce[<currentTiddler>get[retweet_count]else[0]add<accumulator>]\\\">>\\n\\t\\t\\t\\t<<show-archive-calculated-attribute \\\"Number of Tweeters Mentioned\\\" \\\"[tag[$:/tags/Tweeter]count[]]\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"User ID\\\" \\\"user_id\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Account Creation Date\\\" \\\"account_created_date\\\" format:\\\"date\\\" template:\\\"DDth mmm YYYY 0hh:0mm:0ss\\\">>\\n\\t\\t\\t\\t<<show-archive-attribute \\\"Archive Generation Date\\\" \\\"generation_date\\\" format:\\\"date\\\" template:\\\"DDth mmm YYYY 0hh:0mm:0ss\\\">>\\n\\t\\t\\t</tbody>\\n\\t\\t</table>\\n\\t\\t<$macrocall $name=\\\"skinny-tabs\\\" tabNames=\\\"show-archive-tweets show-favorited-tweets\\\" tabCaptions=\\\"Tweets Favourites\\\" defaultTab=\\\"show-archive-tweets\\\" state=<<qualify \\\"$:/state/skinny-tabs/archive\\\">>/>\\n\\t</div>\\n</$let>\\n\\\\end\\n\\n\\\\define show-archive-tweets()\\n<$let user_id={{!!user_id}}>\\n\\t<$list filter=\\\"[tag[$:/tags/Tweet]field:user_id<user_id>!sort[created]limit[50]]\\\">\\n\\t\\t<<show-tweet>>\\n\\t</$list>\\n</$let>\\n\\\\end\\n\\n\\\\define show-favorited-tweets()\\n<$let user_id={{!!user_id}}>\\n\\t<$list filter=\\\"[tag[$:/tags/Tweet]field:liked_by<user_id>limit[50]]\\\">\\n\\t\\t<<show-tweet>>\\n\\t</$list>\\n</$let>\\n\\\\end\\n\\n\\\\define show-archive-attribute(caption,field,prefix,format:\\\"text\\\",template)\\n<tr>\\n\\t<th>\\n\\t\\t<$text text=<<__caption__>>/>\\n\\t</th>\\n\\t<td>\\n\\t\\t<$text text={{{ [<__prefix__>] }}}/>\\n\\t\\t<$view field=<<__field__>> format=<<__format__>> template=<<__template__>>/>\\n\\t</td>\\n</tr>\\n\\\\end\\n\\n\\\\define show-archive-calculated-attribute(caption,filter)\\n<tr>\\n\\t<th>\\n\\t\\t<$text text=<<__caption__>>/>\\n\\t</th>\\n\\t<td>\\n\\t\\t<$text text={{{ [subfilter<__filter__>] }}}/>\\n\\t</td>\\n</tr>\\n\\\\end\\n\\n\\\\define show-tweet()\\n<div class=\\\"tc-twitter-tweet\\\">\\n\\t<div class=\\\"tc-twitter-tweet-header\\\">\\n\\t\\t<$list filter=\\\"[<currentTiddler>has[user_id]]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t<$let archive={{{ [tag[$:/tags/TwitterArchive]field:user_id{!!user_id}] }}}>\\n\\t\\t\\t\\t<span class=\\\"tc-twitter-tweet-header-displayname\\\">\\n\\t\\t\\t\\t\\t<$text text={{{ [<archive>get[displayname]] }}}/>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t<span class=\\\"tc-twitter-tweet-header-username\\\">\\n\\t\\t\\t\\t\\t@<$text text={{{ [<archive>get[username]] }}}/>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t•\\n\\t\\t\\t</$let>\\n\\t\\t</$list>\\n\\t\\t<$link to=<<currentTiddler>>>\\n\\t\\t\\t<span class=\\\"tc-twitter-tweet-header-date\\\">\\n\\t\\t\\t\\t<$view field=\\\"created\\\" format=\\\"date\\\" template=\\\"DDth mmm YYYY 0hh:0mm:0ss\\\"/>\\n\\t\\t\\t</span>\\n\\t\\t</$link>\\n\\t</div>\\n\\t<$list filter=\\\"[<currentTiddler>get[in_reply_to_status_id]addprefix[Tweet - ]is[tiddler]]\\\" variable=\\\"replyTo\\\">\\n\\t\\t<div class=\\\"tc-twitter-tweet-reply-to\\\">\\n\\t\\t\\tReply to <$link to=<<replyTo>>><$text text=<<replyTo>>/></$link>\\n\\t\\t</div>\\n\\t</$list>\\n\\t<div class=\\\"tc-twitter-tweet-body\\\">\\n\\t\\t<$transclude field=\\\"text\\\"/>\\n\\t</div>\\n\\t<div class=\\\"tc-twitter-tweet-media\\\">\\n\\t\\t<$list filter=\\\"[tag[$:/tags/TweetMedia]field:status_id{!!status_id}]\\\" variable=\\\"mediaItem\\\">\\n\\t\\t\\t<$transclude tiddler=<<mediaItem>>/>\\n\\t\\t</$list>\\n\\t</div>\\n\\t<div class=\\\"tc-twitter-tweet-footer\\\">\\n\\t\\t<$list filter=\\\"[<currentTiddler>has[retweet_count]]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t<span class=\\\"tc-twitter-tweet-footer-retweets\\\">\\n\\t\\t\\t\\tRetweets: <$view field=\\\"retweet_count\\\" format=\\\"text\\\"/>\\n\\t\\t\\t</span>\\n\\t\\t</$list>\\n\\t\\t<$list filter=\\\"[<currentTiddler>has[favorite_count]]\\\" variable=\\\"ignore\\\">\\n\\t\\t\\t<span class=\\\"tc-twitter-tweet-footer-likes\\\">\\n\\t\\t\\t\\tLikes: <$view field=\\\"favorite_count\\\" format=\\\"text\\\"/>\\n\\t\\t\\t</span>\\n\\t\\t</$list>\\n\\t\\t<span class=\\\"tc-twitter-tweet-footer-twitter-link\\\">\\n\\t\\t\\t<a href={{{ [{!!status_id}addprefix[https://twitter.com/i/web/status/]] }}} rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">View on Twitter</a>\\n\\t\\t</span>\\n\\t</div>\\n</div>\\n\\\\end\\n\\n\\\\define show-tweet-thread(archive)\\n<div class=\\\"tc-twitter-tweet-thread\\\">\\n\\t<$list filter=\\\"[<currentTiddler>has[in_reply_to_status_id]]\\\" variable=\\\"ignore\\\">\\n\\t\\t<div class=\\\"tc-twitter-tweet-reply\\\">\\n\\t\\t\\t<$tiddler tiddler={{{ [<currentTiddler>get[in_reply_to_status_id]addprefix[Tweet - ]] }}}>\\n\\t\\t\\t\\t<$macrocall $name=\\\"show-tweet\\\"/>\\n\\t\\t\\t</$tiddler>\\n\\t\\t</div>\\n\\t</$list>\\n\\t<$macrocall $name=\\\"show-tweet\\\"/>\\n</div>\\n\\\\end\\n\\n\\\\define show-tweeter()\\n<table>\\n\\t<tbody>\\n\\t\\t<tr><th>Username</th><td><$text text={{!!screenname}}/></td></tr>\\n\\t\\t<tr><th>Display Name</th><td><$text text={{!!name}}/></td></tr>\\n\\t\\t<tr><th>User ID</th><td><$text text={{!!user_id}}/></td></tr>\\n\\t</tbody>\\n</table>\\n<a href={{{ [{!!user_id}addprefix[https://twitter.com/intent/user?user_id=]] }}} rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">View on Twitter</a>\\n<$macrocall $name=\\\"skinny-tabs\\\" tabNames=\\\"show-tweeter-mentions\\\" tabCaptions=\\\"Mentions\\\" defaultTab=\\\"show-tweeter-mentions\\\" state=<<qualify \\\"$:/state/skinny-tabs/tweeter-mentions\\\">>/>\\n\\\\end\\n\\n\\\\define show-tweeter-mentions()\\n<$list filter=\\\"[tag[$:/tags/Tweet]tag<currentTiddler>]\\\">\\n\\t<$macrocall $name=\\\"show-tweet\\\" title=<<currentTiddler>>/>\\n</$list>\\n\\\\end\\n\\n\\\\define show-hashtag()\\n<a href={{{ [{!!user_id}addprefix[https://twitter.com/intent/user?user_id=]] }}} rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">View on Twitter</a>\\n<$macrocall $name=\\\"skinny-tabs\\\" tabNames=\\\"show-hashtag-tweets\\\" tabCaptions=\\\"Tweets\\\" defaultTab=\\\"show-hashtag-tweets\\\" state=<<qualify \\\"$:/state/skinny-tabs/hashtag-tweets\\\">>/>\\n\\\\end\\n\\n\\\\define show-hashtag-tweets()\\n<$list filter=\\\"[tag[$:/tags/Tweet]tag<currentTiddler>]\\\">\\n\\t<$macrocall $name=\\\"show-tweet\\\" title=<<currentTiddler>>/>\\n</$list>\\n\\\\end\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/readme\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/readme\",\"text\":\"! Introduction\\n\\nThe Twitter Archivist imports the tweets and associated media from a [[Twitter Archive|https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive]] as individual tiddlers.\\n\\nThe first step is to request your Tweet archive from Twitter. Once it is available, download file compressed file and unzip it.\\n\\n! Installation\\n\\nFor browser-based wikis, drag and drop this link to install the Twitter Archivist plugin in your own wikis (note that a reload will be required after installing the plugin and saving the wiki):\\n\\n{{$:/plugins/tiddlywiki/twitter-archivist||$:/core/ui/Components/plugin-info}}\\n\\nFor Node.js-based wikis, add `tiddlywiki/twitter-archivist` to the `plugin` section of `tiddlywiki.info`:\\n\\n```\\n...\\n\\t\\\"plugins\\\": [\\n\\t\\t\\\"tiddlywiki/twitter-archivist\\\"\\n\\t],\\n...\\n```\\n\\n! Limitations of Twitter Archives\\n\\nThe Twitter Archive format itself has many shortcomings which affect this tool:\\n\\n* Retweets come through as old-school RTs, which means that they are often truncated\\n* Likes only have minimal information, lacking date, author and mentions\\n* Twitter archives can be delivered in multiple parts, but this tool has only been tested with single archives. It is hoped that cumulatively importing each of the archives in turn should work\\n\\nA future version of this tool may use the Twitter API to get around these restrictions.\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/spec\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/spec\",\"text\":\"! Twitter Archivist Data Model\\n\\nThe Twitter Archivist imports the following tiddlers:\\n\\n* A single tiddler tagged <<tag \\\"$:/tags/TwitterArchive\\\">> containing details about the archive\\n* Tweets/favourites represented by tiddlers tagged <<tag \\\"$:/tags/Tweet\\\">>\\n* Twitter users represented by tiddlers tagged <<tag \\\"$:/tags/Tweeter\\\">>\\n* Tweet images/videos represented by tiddlers tagged <<tag \\\"$:/tags/TweetMedia\\\">>\\n\\n!! Twitter Archive Tiddler Fields\\n\\n|!Field |!Description |\\n|''account_created_date'' |Date of account creation (in TiddlyWiki format) |\\n|''bio'' |Account biography |\\n|''displayname'' |Account displayname |\\n|''generation_date'' |Date of archive generation (in TiddlyWiki format) |\\n|''location'' |Account location |\\n|''tags'' |`$:/tags/TwitterArchive` |\\n|''title'' |Formed from `Twitter Archive for @` concatenated with the account username |\\n|''user_id'' |Unique numeric identifier for account |\\n|''username'' |Account username |\\n|''website'' |Account website |\\n\\n!! Tweet Tiddler Fields\\n\\n|!Field |!Description |\\n|''created'' |Tweet creation date (in TiddlyWiki format) |\\n|''favorite_count'' |Number of favourites received by this tweet |\\n|''mention_user_ids'' |Optional list of user IDs mentioned in the tweet |\\n|''modified'' |Tweet creation date (in TiddlyWiki format) |\\n|''retweet_count'' |Number of retweets received by this tweet |\\n|''status_id'' |Unique numeric identifier for tweet |\\n|''tags'' |`$:/tags/Tweet` along with the titles of any tweeters mentioned in the tweet |\\n|''text'' |The text of the tweet (see below) |\\n|''title'' |Formed from `Tweet - ` concatenated with the tweet ID |\\n|''user_id'' |Unique numeric identifier for tweeter of this tweet |\\n\\nThe text of the tweet includes the following changes:\\n\\n* The pragma `\\\\rules only html entity extlink` is prepended to restrict the parse rules recognised within the text\\n* Mentions are linked to the associated tweeter tiddler\\n* Line breaks are replaced by `<br/>`\\n\\n!! Tweeter Tiddler Fields\\n\\n|!Field |!Description |\\n|''name'' |Account displayname |\\n|''screenname'' |Account screenname (including the @) |\\n|''tags'' |`$:/tags/Tweeter` |\\n|''title'' |Formed from `Tweeter - ` concatenated with the account ID |\\n|''user_id'' |Unique numeric identifier for account |\\n\\n!! Tweet Media Fields\\n\\n|!Field |!Description |\\n|''status_id'' |Identifier of tweet associated with this media item |\\n|''tags'' |`$:/tags/TweetMedia` |\\n|''text'' |The body of the media item |\\n|''title'' |Formed from `Tweet Media - ` concatenated with the ID of the associated tweet and a further unique identifier |\\n|''type'' |`image/jpg`, `image/png` or `video/mp4` |\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/startup.js\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/startup.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/twitter-archivist/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nTwitter initialisation\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"twitter-archivist\\\";\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n\\t$tw.rootWidget.addEventListener(\\\"tm-load-twitter-archive\\\",function(event) {\\n\\t\\t// Load tweets\\n\\t\\tvar archiveSource = new $tw.utils.TwitterArchivistSourceBrowser({\\n\\t\\t}),\\n\\t\\tarchivist = new $tw.utils.TwitterArchivist({\\n\\t\\t\\tsource: archiveSource\\n\\t\\t});\\n\\t\\tarchivist.loadArchive({\\n\\t\\t\\twiki: $tw.wiki\\n\\t\\t}).then(function() {\\n\\t\\t\\talert(\\\"Archived tweets imported\\\");\\n\\t\\t}).catch(function(err) {\\n\\t\\t\\talert(\\\"Error importing archived tweets: \\\" + err);\\n\\t\\t});\\n\\t});\\n};\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/tiddlywiki/twitter-archivist/styles\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/styles\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"code-body\":\"yes\",\"text\":\"\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\\n\\n.tc-twitter-tweet {\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tborder-radius: 8px;\\n\\tmargin: 1em 0;\\n\\tpadding: 1em;\\n}\\n\\n.tc-twitter-tweet-reply {\\n\\tfont-size: 0.7em;\\n}\\n\\n.tc-twitter-tweet-reply .tc-twitter-tweet {\\n\\tmargin: 0.5em 0 0.5em 1em;\\n\\tpadding: 0.5em;\\n}\\n\\n.tc-twitter-tweet-header-displayname {\\n\\tfont-weight: bold;\\n}\\n\\n.tc-twitter-tweet-header-username,\\n.tc-twitter-tweet-header-date {\\n\\tcolor: #536471;\\n}\\n\\n.tc-twitter-tweet-reply-to {\\n\\tfont-size: 0.7em;\\n}\\n\\n.tc-twitter-tweet-body {\\n\\tmargin: 0.25em 0;\\n\\tline-height: 1.3;\\n}\\n\\n.tc-twitter-tweet-reply .tc-twitter-tweet-body {\\n\\tmargin: 0.5em 0;\\n}\\n\\n.tc-twitter-tweet-footer {\\n\\tfont-size: 0.8em;\\n}\"},\"$:/plugins/tiddlywiki/twitter-archivist/template/archive\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/template/archive\",\"text\":\"<<show-archive>>\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/template/hashtag\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/template/hashtag\",\"text\":\"<<show-hashtag>>\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/template/tweet\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/template/tweet\",\"text\":\"<<show-tweet-thread>>\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/template/tweeter\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/template/tweeter\",\"text\":\"<<show-tweeter>>\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/todo\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/todo\",\"text\":\"!! Done\\n\\n* Fixed display of tweet account information\\n* Data model documentation\\n* Expand t.co URLs\\n* Wikify hashtags\\n\\n!! To Do\\n\\n* Import direct messages\\n* Control over which media types are imported\\n* `_canonical_uri` support for media\\n* Handle editable tweets\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/usage\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/usage\",\"text\":\"! In the Browser\\n\\nTo import a Twitter archive in the browser (currently Chrome only), click the button below and navigate to the root of the archive:\\n\\n<$button>\\n<$action-sendmessage $message=\\\"tm-load-twitter-archive\\\"/>\\nOpen Twitter archive\\n</$button>\\n\\n! Under Node.js\\n\\nTo import a Twitter archive under Node.js, use the `--loadtwitterarchive` command:\\n\\n```\\ntiddlywiki editions/twitter-archivist/ --loadtwitterarchive '/path/to/archive' --build index\\n```\\n\"},\"$:/plugins/tiddlywiki/twitter-archivist/view-template-body-cascade\":{\"title\":\"$:/plugins/tiddlywiki/twitter-archivist/view-template-body-cascade\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"list-before\":\"\",\"text\":\"[tag[$:/tags/Tweet]then[$:/plugins/tiddlywiki/twitter-archivist/template/tweet]]\\n[tag[$:/tags/TwitterArchive]then[$:/plugins/tiddlywiki/twitter-archivist/template/archive]]\\n[tag[$:/tags/Tweeter]then[$:/plugins/tiddlywiki/twitter-archivist/template/tweeter]]\\n[tag[$:/tags/Hashtag]then[$:/plugins/tiddlywiki/twitter-archivist/template/hashtag]]\\n\"}}}","author":"tiddlywiki"}