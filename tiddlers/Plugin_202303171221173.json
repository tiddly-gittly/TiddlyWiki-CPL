[
    {
        "tags": "$:/tags/PluginWiki",
        "cpl.readme": "The ''Dynannotate'' plugin allows annotations on textual content to be created and displayed. It has several components:\n\n* The dynannotate widget draws clickable textual annotations, search highlights and search snippets as overlays over the top of the content that it contains\n* The selection tracker keeps track of changes to the selected text in the main browser window. It triggers an action string when the selection changes, passing it the details of the selection. It can be used to display a popup menu\n** The original legacy selection tracker is also provided for backwards compatibility. It is much more limited, and not recommended for new projects\n* The element spotlight highlights on screen elements using a spotlight animation\n\n!! Dynannotate Widget\n\nThe attributes of the `<$dynannotate>` widget describe annotations to be overlaid over the text contained within its child widgets. A single annotation can be directly applied using the attributes or multiple annotations can be applied by providing a filter identifying the \"annotation tiddlers\" that specify each annotation.\n\nThe content of the  `<$dynannotate>` widget should not contain HTML `<input>` or `<textarea>` text editing elements (and therefore should not contain TiddlyWiki's `<$edit-text>` widget)\n\nThe `<$dynannotate>` widget uses the selection tracker to support a popup that dynamically tracks selected text within it.\n\n!!! Attributes\n\n|!Attribute |!Description |\n|target |Optional text to be annotated |\n|targetPrefix |Optional prefix text to disambiguate the target |\n|targetSuffix |Optional suffix text to disambiguate the target |\n|filter |Filter identifying the annotation tiddlers applying to this content (see below) |\n|actions |Action string to be executed when an annotation is clicked. The variable `annotationTiddler` contains the title of the tiddler corresponding to the annotation that was clicked, and the variable `modifierKey` contains \"ctrl\", \"shift\", \"ctrl-shift\", \"normal\" according to which modifier keys were pressed |\n|popup |Popup state tiddler to be used to trigger a popup when an annotation is clicked |\n|floating |Setting to `yes` makes the popup need to be closed explicitly. |\n|search |Search text to be highlighted within the widget |\n|searchDisplay |\"overlay\" or \"snippet\" (see below) |\n|searchMode |\"literal\" (default), \"regexp\", \"whitespace\", \"words\" or \"some\" (see below) |\n|searchMinLength |Optional minimum length of search string |\n|searchCaseSensitive |\"yes\" (the default) for a case sensitive search, or \"no\" for a case insensitive search|\n|searchClass |Optional CSS class to be added to search overlays |\n|snippetContextLength |Optional length of search result contextual prefix/suffix |\n\nThe following attributes are only used with the legacy selection tracker:\n\n|!Attribute |!Description |\n|selection |Tiddler to which the currently selected text should be dynamically saved |\n|selectionPrefix |Tiddler to which up to 50 characters preceding the currently selected text should be dynamically saved |\n|selectionSuffix |Tiddler to which up to 50 characters succeeding the currently selected text should be dynamically saved |\n|selectionPopup |Popup state tiddler to be used to trigger a popup when text is selected |\n\nThe values supported by the `searchDisplay` attribute are:\n\n* `overlay` - display search results as overlays over the contained text\n* `snippet` - display search results as a sequence of highlighted snippets, and the original text is hidden. Selecting this option therefore disables the annotation functionality\n\nThe search modes supported by the `searchMode` attribute are:\n\n* `literal` or `normal` - a literal string of plain text to match (default).\n* `regexp` - a JavaScript-style regular expression (without the quoting backslashes and flags)\n* `whitespace` - a literal string to match while normalising runs of whitespace. Thus `A B` matches `A   B`.\n* `words` or `some` - treats the search string as a list of tokens separated by whitespace, and matches all tokens (regardless of ordering and whether there is other text in between)\n\nWhen the selection popup is triggered, the currently selected text can be found in the tiddler named in the `selection` attribute, with the disambiguating prefix and suffix in the tiddlers named in the `selectionPrefix` and `selectionPopup` tiddlers. Note that the selection text will be an empty string if the selection popup was triggered in response to a click (ie zero width selection).\n\nHere's a simple example that highlights the first occurrence of the word \"ut\" within the text contained within it:\n\n```\n<$dynannotate target=\"ut\">\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n</$dynannotate>\n```\n\nA prefix and/or suffix can be specified to disambiguate the annotation. For example, here we target the second occurrence of the word \"ut\":\n\n```\n<$dynannotate target=\"ut\" targetPrefix=\"ullamco laboris nisi \" targetSuffix=\" aliquip ex ea commodo consequat\">\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n</$dynannotate>\n```\n\nThe widget works by scanning the rendered text of its content, so it works even if the text is built dynamically:\n\n```\n<$dynannotate target=\"HelloThere\">\n<<list-links \"[tag[Work]]\">>\n</$dynannotate>\n```\n\n!!! Annotation Tiddlers\n\nAn annotation tiddler is a tiddler describing an annotation to be overlaid over another tiddler. Their fields are used as follows:\n\n|!Field |!Description |\n|title |By convention the prefix `$:/annotations/<username>/` is used, but any title can be used |\n|text |The text of the annotation |\n|created, creator, modified, modifier |As per TiddlyWiki normal behaviour |\n|annotate-tiddler |The title of the target tiddler being annotated (optional, see below) |\n|annotate-text |The text being annotated in the target tiddler |\n|annotate-prefix |Optional prefix to disambiguate the target annotation |\n|annotate-suffix |Optional suffix to disambiguate the target annotation |\n|annotate-colour |CSS colour for the annotation (defaults to `rgba(255,255,0,0.3)`) |\n|annotate-blend-mode |CSS [[mix blend mode|https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode]] for the annotation (defaults to `multiply`) |\n\nNote that using the `annotate-tiddler` field to associate an annotation with the annotated tiddler is a lightweight convention employed by the examples; it isn't actually required by any of the JavaScript code. Thus authors can experiment with other techniques for recording the association.\n\n!! Selection Trackers\n\nThe selection trackers are enabled when the following configuration tiddlers are set to ''yes''.\n\n* $:/config/Dynannotate/SelectionTracker/Enable for the main selection tracker\n* $:/config/Dynannotate/LegacySelectionTracker/Enable for the legacy selection tracker\n\nBoth selection trackers are enabled by default.\n\n!!! Main Selection Tracker\n\nThe selection tracker triggers an action string whenever the browser text selection changes. The actions are delayed until the selection has not changed for 500ms (this means that the selection tracker is only triggered when the user pauses after completing a selection, and is not continuously invoked as the user drags the selection).\n\nThe selection tracker works within DOM subtrees that have the following structure:\n\n* The outer wrapper element has the attribute `data-selection-actions-title` containing the title of the tiddler containing the action string to be invoked when the selection changes\n* Each child element of the outer element must have a unique `id` attribute to identify it\n\n```\n<div data-selection-actions-title=\"{tiddler title}\">\n\t<div id=\"{title}\">\n\t\tContent text\n\t</div>\n\t...\n</div>\n```\n\nThe action string is invoked with the following variables:\n\n|!Variable |!Description |\n|`selection` |A JSON object representing the selection (see below) |\n|`dom-*` |All DOM attributes of the outer wrapper node are made available as variables, with the prefix `dom-` |\n|`tv-selection-posx` |X position of the selection in pixels |\n|`tv-selection-posy` |Y position of the selection in pixels |\n|`tv-selection-width` |Width of the selection in pixels |\n|`tv-selection-height` |Height of the selection in pixels |\n|`tv-selection-coords` |A co-ordinate string that can be used with the ActionPopupWidget to trigger a popup at the selection |\n\nThe JSON representation of the selection is as follows:\n\n```\n{\n\t\"chunks\": [\n\t\t{\n\t\t\t\"id\": \"id-of-first-chunk-of-selection\",\n\t\t\t\"text\": \"text-of-first-chunk-of-selection\",\n\t\t\t\"prefix\": \"optional-prefix-before-first-chunk-of-selection\",\n\t\t\t\"suffix\": \"optional-suffix-after-last-chunk-of-selection\"\n\t\t}\n\t\t...\n\t],\n\t\"variables\": {\n\t\t<variables listed above>\n\t}\n}\n```\n\nNotes:\n\n* Only the first chunk of the selection may have a \"prefix\" field which will contain any text at the start of the chunk preceding the selection\n* Only the last chunk of the selection may have a \"suffix\" field which will contain any text at the end of the chunk following the selection\n\n!!! Legacy Selection Tracker\n\nThe selection tracker is incorporated within the `<$dynannotate>` widget via the ''selection'', ''selectionPrefix'' ''selectionSuffix'' and ''selectionPopup'' attributes. It can be used independently for specialised applications.\n\nEach selection container is marked with the class `tc-dynannotate-selection-container`, and should contain the following attributes:\n\n* `data-annotation-selection-save`: title of tiddler to which the selected text should be saved\n* `data-annotation-selection-prefix-save`: title of tiddler to which up to 50 characters preceding the currently selected text should be dynamically saved\n* `data-annotation-selection-suffix-save`: title of tiddler to which up to 50 characters succeeding the currently selected text should be dynamically saved\n* `data-annotation-selection-popup`: title of state tiddler used to trigger the selection popup\n\nNotes:\n\n* The selection popup will disappear if the selection is cancelled; this will happen if the user clicks on any other element apart than a button. Thus it is not possible to have any interactive controls within the popup apart from buttons\n\n!! Element Spotlight\n\nThe `tm-spotlight-element` message causes a spotlight effect to briefly appear to highlight a specified element. The message accepts the following parameters:\n\n|!Parameter |!Description |\n|`selector` |CSS selector of the element to highlight |\n|{//Any parameter names starting with `selector-`}// |Fallback CSS selectors to be used if the primary selector does not resolve to an element |\n\nThe fallback CSS selectors are case-insensitively sorted by title before use, with uppercase letters sorting before lower case letters. The usual convention is to use numeric suffixes: `selector-00`, `selector-01` etc.\n",
        "cpl.uri": "https://tiddlywiki.com/library/v5.3.8/recipes/library/tiddlers/%2524%253A%252Fplugins%252Ftiddlywiki%252Fdynannotate.json",
        "cpl.title": "$:/plugins/tiddlywiki/dynannotate",
        "cpl.author": "JeremyRuston",
        "cpl.name": "Dynannotate",
        "cpl.description": "Dynamic content annotation",
        "cpl.plugin-type": "plugin",
        "cpl.dependents": "$:/plugins/tiddlywiki/dynaview",
        "cpl.core-version": ">=5.0.0",
        "title": "Plugin_202303171221173"
    }
]